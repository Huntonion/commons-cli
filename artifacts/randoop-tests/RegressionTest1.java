import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.util.List<java.lang.String> strList47 = commandLine37.getArgList();
        java.util.List<java.lang.String> strList48 = commandLine37.getArgList();
        java.lang.String str50 = commandLine37.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String[] strArray52 = commandLine37.getOptionValues('\000');
        java.lang.String[] strArray53 = commandLine37.getArgs();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        java.lang.String str43 = commandLine37.getOptionValue("", "[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str43, "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("hi!", "");
        java.lang.Throwable[] throwableArray3 = unrecognizedOptionException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        java.lang.Object obj25 = commandLine10.getOptionObject('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        java.lang.String str41 = option38.getValue(10);
        java.lang.String str43 = option38.getValue((int) '#');
        boolean boolean44 = option38.hasArg();
        option38.setValueSeparator('a');
        boolean boolean47 = commandLine33.hasOption(option38);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        java.lang.String str55 = option52.getValue(10);
        java.lang.String str57 = option52.getValue((int) '#');
        boolean boolean58 = option52.hasArgs();
        option52.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str61 = option52.getLongOpt();
        option52.setLongOpt("[- ]");
        java.util.Properties properties64 = commandLine33.getOptionProperties(option52);
        java.lang.String str67 = commandLine33.getOptionValue(' ', "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str61, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str67, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.util.List<java.lang.String> strList7 = option4.getValuesList();
        boolean boolean8 = option4.hasLongOpt();
        option4.setOptionalArg(true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("[]", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str10 = options0.toString();
        org.apache.commons.cli.Options options15 = options0.addOption("", "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", true, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str10, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(options15);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection30 = options29.getOptions();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        option35.setValueSeparator(' ');
        java.lang.String str41 = option35.getArgName();
        java.lang.Object obj42 = option35.clone();
        org.apache.commons.cli.Options options43 = options29.addOption(option35);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(optionCollection30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(options43);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder9 = builder5.numberOfArgs(0);
        org.apache.commons.cli.Option.Builder builder10 = builder9.hasArg();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        java.lang.String str30 = option24.getValue("hi!");
        int int31 = option24.getArgs();
        option24.setDescription("hi!");
        java.lang.String str34 = option24.getLongOpt();
        java.lang.Object obj35 = option24.getType();
        option24.setOptionalArg(true);
        java.lang.Object obj38 = commandLine10.getParsedOptionValue(option24);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = null;
        org.apache.commons.cli.DefaultParser.Builder builder31 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder33 = builder31.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder35 = builder31.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser36 = builder35.build();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        boolean boolean45 = option42.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options46 = options37.addOption(option42);
        org.apache.commons.cli.OptionGroup optionGroup47 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options48 = options46.addOptionGroup(optionGroup47);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection49 = options48.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser50 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray58 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = defaultParser50.parse(options51, strArray58, properties59);
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser36.parse(options48, strArray58, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine63 = defaultParser1.parse(options30, strArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Options.getRequiredOptions()\" because \"options\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(defaultParser36);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionCollection49);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(commandLine62);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("[]");
        java.lang.Throwable[] throwableArray2 = parseException1.getSuppressed();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException4 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray5 = alreadySelectedException4.getSuppressed();
        org.apache.commons.cli.OptionGroup optionGroup6 = alreadySelectedException4.getOptionGroup();
        org.apache.commons.cli.Option option7 = alreadySelectedException4.getOption();
        parseException1.addSuppressed((java.lang.Throwable) alreadySelectedException4);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNull(optionGroup6);
        org.junit.Assert.assertNull(option7);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.OptionGroup optionGroup16 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options17 = options15.addOptionGroup(optionGroup16);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection18 = options17.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser19 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser19.parse(options20, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser5.parse(options17, strArray27, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj38 = option37.getType();
        boolean boolean40 = option37.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options41 = options32.addOption(option37);
        boolean boolean43 = options41.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.DefaultParser.Builder builder44 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser45 = builder44.build();
        org.apache.commons.cli.DefaultParser defaultParser46 = builder44.build();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        boolean boolean55 = option52.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options56 = options47.addOption(option52);
        org.apache.commons.cli.OptionGroup optionGroup57 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options58 = options56.addOptionGroup(optionGroup57);
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj64 = option63.getType();
        boolean boolean66 = option63.equals((java.lang.Object) 0);
        boolean boolean67 = option63.hasLongOpt();
        org.apache.commons.cli.Options options68 = options56.addOption(option63);
        java.lang.String str69 = options68.toString();
        org.apache.commons.cli.OptionGroup optionGroup70 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str71 = optionGroup70.getSelected();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj77 = option76.getType();
        java.lang.String str78 = option76.getArgName();
        option76.setValueSeparator('#');
        optionGroup70.setSelected(option76);
        org.apache.commons.cli.Options options82 = options68.addOption(option76);
        java.util.List<java.lang.String> strList84 = options68.getMatchingOptions("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String[] strArray91 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: []", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "[ option:  hi!  ::  :: class java.lang.String ]", "hi!" };
        org.apache.commons.cli.CommandLine commandLine93 = defaultParser46.parse(options68, strArray91, true);
        org.apache.commons.cli.CommandLine commandLine95 = defaultParser5.parse(options41, strArray91, false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionCollection18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(defaultParser45);
        org.junit.Assert.assertNotNull(defaultParser46);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str69, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "class java.lang.String");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(commandLine95);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        org.apache.commons.cli.DefaultParser defaultParser49 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = defaultParser49.parse(options50, strArray57, properties58);
        java.lang.String str61 = commandLine59.getOptionValue("hi!");
        java.lang.Object obj63 = commandLine59.getParsedOptionValue("");
        java.lang.String[] strArray65 = commandLine59.getOptionValues('4');
        java.lang.String str67 = commandLine59.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj74 = option73.getType();
        boolean boolean76 = option73.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options77 = options68.addOption(option73);
        org.apache.commons.cli.OptionGroup optionGroup78 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options79 = options77.addOptionGroup(optionGroup78);
        org.apache.commons.cli.Option option84 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj85 = option84.getType();
        boolean boolean87 = option84.equals((java.lang.Object) 0);
        boolean boolean88 = option84.hasLongOpt();
        org.apache.commons.cli.Options options89 = options77.addOption(option84);
        java.lang.Object obj90 = option84.clone();
        java.lang.String str92 = commandLine59.getOptionValue(option84, "hi!");
        boolean boolean93 = commandLine10.hasOption(option84);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        boolean boolean32 = option29.hasArgName();
        option29.setLongOpt("");
        boolean boolean35 = option29.hasArgs();
        java.lang.Object obj36 = option29.getType();
        java.lang.String str37 = commandLine10.getOptionValue(option29);
        java.lang.Object obj39 = commandLine10.getParsedOptionValue(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.String str40 = commandLine37.getOptionValue('a', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option[] optionArray41 = commandLine37.getOptions();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str40, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(optionArray41);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.List<java.lang.String> strList49 = options9.getMatchingOptions("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options53 = options9.addOption("", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        boolean boolean59 = optionGroup54.isRequired();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        java.util.List<java.lang.String> strList67 = option64.getValuesList();
        option64.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup54.setSelected(option64);
        org.apache.commons.cli.Options options71 = options9.addOptionGroup(optionGroup54);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj78 = option77.getType();
        boolean boolean80 = option77.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options81 = options72.addOption(option77);
        java.lang.String str83 = option77.getValue("hi!");
        java.util.List<java.lang.String> strList84 = option77.getValuesList();
        int int85 = option77.getArgs();
        java.lang.String str86 = option77.getValue();
        org.apache.commons.cli.OptionGroup optionGroup87 = options9.getOptionGroup(option77);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        java.lang.Object obj16 = commandLine10.getOptionObject("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str18 = commandLine10.getOptionValue('4');
        java.lang.String[] strArray20 = commandLine10.getOptionValues("[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.util.List list10 = options0.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options13 = options0.addOption("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder3.desc("");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        java.util.List<java.lang.String> strList24 = options9.getMatchingOptions("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection25 = options9.getOptions();
        java.util.List list26 = options9.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(optionCollection25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.ParseException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.String str40 = commandLine37.getOptionValue('a', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj42 = commandLine37.getParsedOptionValue("org.apache.commons.cli.AlreadySelectedException: ");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str40, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        optionGroup0.setRequired(true);
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = defaultParser9.parse(options10, strArray17, properties18);
        java.lang.String str21 = commandLine19.getOptionValue("hi!");
        org.apache.commons.cli.DefaultParser defaultParser23 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj31 = option30.getType();
        boolean boolean33 = option30.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options34 = options25.addOption(option30);
        org.apache.commons.cli.DefaultParser defaultParser35 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray43 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties44 = null;
        org.apache.commons.cli.CommandLine commandLine45 = defaultParser35.parse(options36, strArray43, properties44);
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser24.parse(options25, strArray43);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine51 = defaultParser23.parse(options25, strArray49, false);
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj58 = option57.getType();
        boolean boolean60 = option57.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options61 = options52.addOption(option57);
        org.apache.commons.cli.OptionGroup optionGroup62 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options63 = options61.addOptionGroup(optionGroup62);
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        boolean boolean71 = option68.equals((java.lang.Object) 0);
        boolean boolean72 = option68.hasLongOpt();
        org.apache.commons.cli.Options options73 = options61.addOption(option68);
        java.lang.Object obj74 = option68.clone();
        boolean boolean75 = option68.isRequired();
        java.lang.Object obj76 = commandLine51.getParsedOptionValue(option68);
        java.lang.Object obj77 = commandLine19.getParsedOptionValue(option68);
        optionGroup0.setSelected(option68);
        java.util.Collection<java.lang.String> strCollection79 = optionGroup0.getNames();
        boolean boolean80 = optionGroup0.isRequired();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(strCollection79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        java.lang.String str41 = option38.getValue(10);
        java.lang.String str43 = option38.getValue((int) '#');
        boolean boolean44 = option38.hasArg();
        option38.setValueSeparator('a');
        boolean boolean47 = commandLine33.hasOption(option38);
        java.lang.String str48 = option38.getOpt();
        java.lang.Object obj49 = option38.getType();
        boolean boolean50 = option38.hasOptionalArg();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArgs();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.lang.String str47 = option44.getValue(10);
        java.lang.String str49 = option44.getValue((int) '#');
        boolean boolean50 = option44.hasArgs();
        java.lang.String[] strArray51 = commandLine37.getOptionValues(option44);
        option44.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean54 = option44.hasValueSeparator();
        option44.setDescription("");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str14 = option4.getValue((int) (short) 0);
        java.lang.String str15 = option4.getOpt();
        option4.setValueSeparator('\000');
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.lang.String str47 = option44.getValue(10);
        java.lang.String str49 = option44.getValue((int) '#');
        boolean boolean50 = option44.hasArgs();
        java.lang.String[] strArray51 = commandLine37.getOptionValues(option44);
        option44.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str54 = option44.getOpt();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        java.lang.String str14 = option12.getArgName();
        boolean boolean15 = option12.hasArgName();
        optionGroup0.setSelected(option12);
        option12.setOptionalArg(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        boolean boolean11 = option4.hasArg();
        java.lang.String[] strArray12 = option4.getValues();
        java.lang.String[] strArray13 = option4.getValues();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str52 = commandLine47.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup53 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str54 = optionGroup53.getSelected();
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj60 = option59.getType();
        java.lang.String str61 = option59.getArgName();
        option59.setValueSeparator('#');
        optionGroup53.setSelected(option59);
        boolean boolean65 = option59.hasLongOpt();
        boolean boolean66 = commandLine47.hasOption(option59);
        java.lang.String str67 = option59.getArgName();
        java.lang.String str69 = option59.getValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj70 = option59.getType();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class java.lang.String");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str69, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class java.lang.String");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder1.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder1.numberOfArgs(10);
        org.apache.commons.cli.Option.Builder builder8 = builder1.required();
        org.apache.commons.cli.Option.Builder builder10 = builder1.hasArg(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        java.lang.String str54 = commandLine52.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.Object obj56 = commandLine52.getOptionObject('#');
        java.lang.Object obj58 = commandLine52.getParsedOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        java.lang.String str10 = option4.getDescription();
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        boolean boolean20 = option17.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options21 = options12.addOption(option17);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser11.parse(options12, strArray30);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options43 = options34.addOption(option39);
        org.apache.commons.cli.OptionGroup optionGroup44 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options45 = options43.addOptionGroup(optionGroup44);
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        boolean boolean53 = option50.equals((java.lang.Object) 0);
        boolean boolean54 = option50.hasLongOpt();
        org.apache.commons.cli.Options options55 = options43.addOption(option50);
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = defaultParser11.parse(options55, strArray56, false);
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj64 = option63.getType();
        boolean boolean66 = option63.equals((java.lang.Object) 0);
        option63.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray69 = commandLine58.getOptionValues(option63);
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) commandLine58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.CommandLine cannot be cast to class java.lang.Class (org.apache.commons.cli.CommandLine is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strArray69);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.List<java.lang.String> strList49 = options9.getMatchingOptions("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option option51 = options9.getOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNull(option51);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("[ option:  [- ]  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  [- ]  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        boolean boolean55 = option52.equals((java.lang.Object) 0);
        option52.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray58 = commandLine47.getOptionValues(option52);
        java.lang.Object obj60 = commandLine47.getParsedOptionValue("");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "[ option:  hi!  ::  :: class java.lang.String ]", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str2 = missingOptionException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str2, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List<java.lang.String> strList37 = options21.getMatchingOptions("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Options options40 = options21.addOption("", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.CommandLine.Builder builder41 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine42 = builder41.build();
        org.apache.commons.cli.CommandLine commandLine43 = builder41.build();
        org.apache.commons.cli.CommandLine.Builder builder45 = builder41.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.lang.String str52 = option50.getArgName();
        option50.setValueSeparator('#');
        boolean boolean55 = option50.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder56 = builder45.addOption(option50);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj63 = option62.getType();
        boolean boolean65 = option62.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options66 = options57.addOption(option62);
        java.lang.String str68 = option62.getValue("hi!");
        int int69 = option62.getArgs();
        option62.setDescription("hi!");
        java.lang.String str72 = option62.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder73 = builder45.addOption(option62);
        boolean boolean74 = option62.hasOptionalArg();
        java.lang.String str75 = option62.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup76 = options21.getOptionGroup(option62);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(optionGroup76);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj51 = commandLine47.getOptionObject("org.apache.commons.cli.ParseException: []");
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj58 = option57.getType();
        boolean boolean60 = option57.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options61 = options52.addOption(option57);
        org.apache.commons.cli.OptionGroup optionGroup62 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options63 = options61.addOptionGroup(optionGroup62);
        java.lang.String str64 = optionGroup62.getSelected();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj71 = option70.getType();
        boolean boolean73 = option70.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options74 = options65.addOption(option70);
        java.lang.String str76 = option70.getValue("hi!");
        int int77 = option70.getArgs();
        option70.setDescription("hi!");
        java.lang.String str80 = option70.getLongOpt();
        optionGroup62.setSelected(option70);
        char char82 = option70.getValueSeparator();
        java.lang.Object obj83 = commandLine47.getParsedOptionValue(option70);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection42 = options41.getOptions();
        java.util.List<java.lang.String> strList44 = options41.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser1.parse(options41, strArray45);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser47.parse(options48, strArray55, properties56);
        java.util.List<java.lang.String> strList58 = commandLine57.getArgList();
        java.lang.String str61 = commandLine57.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean63 = commandLine57.hasOption('4');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        java.lang.String str70 = option68.getArgName();
        boolean boolean71 = option68.hasArgName();
        boolean boolean72 = option68.hasArg();
        option68.setOptionalArg(false);
        java.lang.String str75 = option68.getValue();
        java.lang.String str77 = option68.getValue((int) '4');
        boolean boolean78 = option68.hasOptionalArg();
        java.lang.String str80 = commandLine57.getOptionValue(option68, "");
        int int81 = option68.getArgs();
        org.apache.commons.cli.Options options82 = options41.addOption(option68);
        option68.setArgs((int) (short) -1);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionCollection42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str61, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(options82);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        option5.setOptionalArg(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: []");
        java.util.List list2 = missingOptionException1.getMissingOptions();
        java.util.List list3 = missingOptionException1.getMissingOptions();
        org.junit.Assert.assertNull(list2);
        org.junit.Assert.assertNull(list3);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        boolean boolean11 = option4.hasArg();
        java.lang.String[] strArray12 = option4.getValues();
        boolean boolean13 = option4.isRequired();
        java.lang.String str14 = option4.toString();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str14, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List<java.lang.String> strList33 = commandLine10.getArgList();
        java.lang.Object obj35 = commandLine10.getParsedOptionValue('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray55 = commandLine29.getOptions();
        java.lang.String str57 = commandLine29.getOptionValue("[ option:  [- ]  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(optionArray55);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        java.lang.Object obj42 = commandLine37.getOptionObject("org.apache.commons.cli.ParseException: []");
        java.lang.Object obj44 = commandLine37.getParsedOptionValue('#');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        org.apache.commons.cli.OptionGroup optionGroup15 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str16 = optionGroup15.getSelected();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        optionGroup15.setSelected(option21);
        boolean boolean27 = option21.hasLongOpt();
        boolean boolean28 = commandLine10.hasOption(option21);
        java.util.Properties properties30 = commandLine10.getOptionProperties("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj32 = commandLine10.getOptionObject('#');
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser35 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options45 = options36.addOption(option41);
        org.apache.commons.cli.DefaultParser defaultParser46 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray54 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = defaultParser46.parse(options47, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser35.parse(options36, strArray54);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser34.parse(options36, strArray60, false);
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.lang.String str70 = option67.getValue(10);
        java.lang.String str72 = option67.getValue((int) '#');
        boolean boolean73 = option67.hasArgs();
        option67.setRequired(true);
        java.lang.String str76 = option67.getArgName();
        java.lang.Object obj77 = option67.getType();
        java.lang.String str78 = commandLine62.getOptionValue(option67);
        java.lang.String str79 = commandLine10.getOptionValue(option67);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "class java.lang.String");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        java.lang.String str8 = option6.getArgName();
        option6.setValueSeparator('#');
        optionGroup0.setSelected(option6);
        boolean boolean12 = option6.hasLongOpt();
        java.lang.String str13 = option6.getLongOpt();
        option6.setArgName("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        option4.setLongOpt("");
        boolean boolean10 = option4.hasArgs();
        org.apache.commons.cli.Option.Builder builder11 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder12 = builder11.required();
        org.apache.commons.cli.Option.Builder builder14 = builder12.longOpt("[]");
        org.apache.commons.cli.Option.Builder builder16 = builder14.desc("org.apache.commons.cli.ParseException: []");
        boolean boolean17 = option4.equals((java.lang.Object) "org.apache.commons.cli.ParseException: []");
        boolean boolean18 = option4.isRequired();
        java.lang.Object obj19 = option4.getType();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.AlreadySelectedException: ", "org.apache.commons.cli.UnrecognizedOptionException: []");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        java.lang.String str10 = option4.getValue((int) '4');
        java.lang.String str11 = option4.getDescription();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = option4.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException3 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException3.getOptionGroup();
        missingOptionException1.addSuppressed((java.lang.Throwable) alreadySelectedException3);
        java.lang.Throwable[] throwableArray6 = missingOptionException1.getSuppressed();
        java.lang.Throwable[] throwableArray7 = missingOptionException1.getSuppressed();
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        boolean boolean31 = optionGroup10.isRequired();
        java.util.Collection<java.lang.String> strCollection32 = optionGroup10.getNames();
        boolean boolean33 = optionGroup10.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = options11.getOptions();
        java.util.List<java.lang.String> strList14 = options11.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        option19.setArgName("");
        java.lang.String[] strArray25 = option19.getValues();
        boolean boolean26 = option19.isRequired();
        java.lang.String str27 = option19.getValue();
        org.apache.commons.cli.OptionGroup optionGroup28 = options11.getOptionGroup(option19);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = option19.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(optionGroup28);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.DefaultParser defaultParser32 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = defaultParser32.parse(options33, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue("hi!");
        java.lang.Object obj46 = commandLine42.getParsedOptionValue("");
        java.lang.String[] strArray48 = commandLine42.getOptionValues('4');
        java.lang.String[] strArray49 = commandLine42.getArgs();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        java.util.Properties properties56 = commandLine42.getOptionProperties(option54);
        option54.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option54.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean61 = option54.isRequired();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException62 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option54);
        java.lang.Throwable[] throwableArray63 = alreadySelectedException62.getSuppressed();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean27 = commandLine10.hasOption(' ');
        boolean boolean29 = commandLine10.hasOption("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        option21.setDescription("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        java.util.List<java.lang.String> strList13 = commandLine10.getArgList();
        java.lang.String str16 = commandLine10.getOptionValue('\000', "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str19 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str16, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str19, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj56 = commandLine29.getOptionObject(' ');
        java.lang.String str59 = commandLine29.getOptionValue("hi!", "");
        org.apache.commons.cli.Option[] optionArray60 = commandLine29.getOptions();
        java.util.List<java.lang.String> strList61 = commandLine29.getArgList();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(optionArray60);
        org.junit.Assert.assertNotNull(strList61);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder8 = builder3.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder9 = builder3.hasArgs();
        org.apache.commons.cli.Option.Builder builder11 = builder9.numberOfArgs((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("org.apache.commons.cli.AlreadySelectedException: ", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.AlreadySelectedException: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.AlreadySelectedException: ");
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = defaultParser2.parse(options3, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options24 = options22.addOptionGroup(optionGroup23);
        java.lang.String str25 = options22.toString();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj31 = option30.getType();
        java.lang.String str32 = option30.getArgName();
        boolean boolean33 = option30.hasArgName();
        boolean boolean34 = option30.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup35 = options22.getOptionGroup(option30);
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser47.parse(options48, strArray55, properties56);
        java.lang.String str59 = commandLine57.getOptionValue("hi!");
        java.lang.Object obj61 = commandLine57.getParsedOptionValue("");
        java.lang.String[] strArray63 = commandLine57.getOptionValues('4');
        java.lang.String[] strArray64 = commandLine57.getArgs();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj70 = option69.getType();
        java.util.Properties properties71 = commandLine57.getOptionProperties(option69);
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser2.parse(options22, strArray44, properties71);
        boolean boolean74 = options22.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list75 = options22.getRequiredOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException76 = new org.apache.commons.cli.MissingOptionException(list75);
        unrecognizedOptionException1.addSuppressed((java.lang.Throwable) missingOptionException76);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str25, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "class java.lang.String");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(list75);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.CommandLine commandLine34 = builder4.build();
        org.apache.commons.cli.CommandLine.Builder builder36 = builder4.addArg("");
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.String[] strArray47 = option41.getValues();
        option41.setArgs(0);
        java.lang.String str50 = option41.toString();
        option41.setRequired(true);
        org.apache.commons.cli.CommandLine.Builder builder53 = builder4.addOption(option41);
        org.apache.commons.cli.Option option54 = null;
        org.apache.commons.cli.CommandLine.Builder builder55 = builder4.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine56 = builder55.build();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str50, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(commandLine56);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str26 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str29 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        java.util.List<java.lang.String> strList13 = commandLine10.getArgList();
        org.apache.commons.cli.MissingOptionException missingOptionException14 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList13);
        java.util.List list15 = missingOptionException14.getMissingOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        boolean boolean6 = options0.hasShortOption("[]");
        boolean boolean8 = options0.hasLongOption("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        org.apache.commons.cli.Options options53 = options9.addOption(option52);
        java.lang.String str54 = option52.getValue();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        int int12 = option5.getArgs();
        option5.setDescription("hi!");
        java.lang.String str15 = option5.getLongOpt();
        java.lang.Object obj16 = option5.getType();
        option5.setOptionalArg(true);
        boolean boolean19 = option5.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.CommandLine commandLine34 = builder4.build();
        java.lang.String[] strArray35 = commandLine34.getArgs();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        option4.setArgs((int) '#');
        java.lang.String str12 = option4.getArgName();
        boolean boolean13 = option4.hasValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option49 = options9.getOption("");
        java.lang.String str50 = options9.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str50, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        boolean boolean26 = commandLine10.hasOption(' ');
        java.lang.String[] strArray27 = commandLine10.getArgs();
        java.lang.String str29 = commandLine10.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj46 = option45.getType();
        java.lang.String str47 = option45.getArgName();
        boolean boolean48 = option45.hasArgName();
        option45.setLongOpt("");
        java.lang.Object obj51 = option45.getType();
        java.lang.Object obj52 = commandLine37.getParsedOptionValue(option45);
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj58 = option57.getType();
        boolean boolean60 = option57.equals((java.lang.Object) 0);
        boolean boolean61 = option57.hasLongOpt();
        option57.setLongOpt("");
        option57.setDescription("");
        java.lang.String str66 = option57.getDescription();
        java.lang.String str67 = commandLine37.getOptionValue(option57);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class java.lang.String");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = optionGroup10.getOptions();
        java.lang.String str13 = optionGroup10.getSelected();
        org.apache.commons.cli.CommandLine.Builder builder14 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine15 = builder14.build();
        org.apache.commons.cli.CommandLine commandLine16 = builder14.build();
        org.apache.commons.cli.CommandLine.Builder builder18 = builder14.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj24 = option23.getType();
        java.lang.String str25 = option23.getArgName();
        option23.setValueSeparator('#');
        boolean boolean28 = option23.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder29 = builder18.addOption(option23);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        int int42 = option35.getArgs();
        option35.setDescription("hi!");
        java.lang.String str45 = option35.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder46 = builder18.addOption(option35);
        boolean boolean47 = option35.hasOptionalArg();
        option35.setRequired(false);
        optionGroup10.setSelected(option35);
        boolean boolean51 = option35.hasOptionalArg();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class java.lang.String");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        java.lang.Throwable[] throwableArray28 = alreadySelectedException27.getSuppressed();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        boolean boolean14 = options9.hasLongOption("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options18 = options9.addOption("hi!", false, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        boolean boolean5 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        java.lang.String str12 = option10.getArgName();
        java.util.List<java.lang.String> strList13 = option10.getValuesList();
        option10.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup0.setSelected(option10);
        org.apache.commons.cli.DefaultParser defaultParser17 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj24 = option23.getType();
        boolean boolean26 = option23.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options27 = options18.addOption(option23);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.CommandLine commandLine39 = defaultParser17.parse(options18, strArray36);
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties45 = commandLine39.getOptionProperties(option44);
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.lang.String str52 = option50.getArgName();
        java.lang.String str54 = commandLine39.getOptionValue(option50, "");
        java.lang.String str55 = option50.getValue();
        org.apache.commons.cli.OptionGroup optionGroup56 = optionGroup0.addOption(option50);
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        java.lang.String str63 = option61.getArgName();
        boolean boolean64 = option61.hasArgName();
        option61.setLongOpt("");
        boolean boolean67 = option61.hasArgs();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException68 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option61);
        java.lang.Throwable[] throwableArray69 = alreadySelectedException68.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(optionGroup56);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        option17.setOptionalArg(true);
        java.lang.String str22 = option17.getLongOpt();
        java.lang.String str23 = option17.getLongOpt();
        boolean boolean24 = option17.hasArgName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        boolean boolean13 = options9.hasShortOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean26 = options1.hasShortOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection27 = options1.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup28 = new org.apache.commons.cli.OptionGroup();
        boolean boolean29 = optionGroup28.isRequired();
        java.lang.String str30 = optionGroup28.getSelected();
        optionGroup28.setRequired(false);
        boolean boolean33 = optionGroup28.isRequired();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        java.lang.String str40 = option38.getArgName();
        java.util.List<java.lang.String> strList41 = option38.getValuesList();
        option38.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup28.setSelected(option38);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj52 = option51.getType();
        boolean boolean54 = option51.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options55 = options46.addOption(option51);
        org.apache.commons.cli.DefaultParser defaultParser56 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = defaultParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.CommandLine commandLine67 = defaultParser45.parse(options46, strArray64);
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties73 = commandLine67.getOptionProperties(option72);
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj79 = option78.getType();
        java.lang.String str80 = option78.getArgName();
        java.lang.String str82 = commandLine67.getOptionValue(option78, "");
        java.lang.String str83 = option78.getValue();
        org.apache.commons.cli.OptionGroup optionGroup84 = optionGroup28.addOption(option78);
        org.apache.commons.cli.Option option89 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj90 = option89.getType();
        java.lang.String str91 = option89.getArgName();
        boolean boolean92 = option89.hasArgName();
        option89.setLongOpt("");
        boolean boolean95 = option89.hasArgs();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException96 = new org.apache.commons.cli.AlreadySelectedException(optionGroup28, option89);
        org.apache.commons.cli.Options options97 = options1.addOptionGroup(optionGroup28);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(optionCollection27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class java.lang.String");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(optionGroup84);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "class java.lang.String");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(options97);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine6 = builder0.build();
        java.lang.Object obj8 = commandLine6.getParsedOptionValue("org.apache.commons.cli.AlreadySelectedException: ");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertNotNull(commandLine6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        option4.setValueSeparator('4');
        java.lang.String str10 = option4.getValue();
        java.util.List<java.lang.String> strList11 = option4.getValuesList();
        boolean boolean12 = option4.hasLongOpt();
        boolean boolean13 = option4.isRequired();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException37 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException39 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException41 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup42 = alreadySelectedException41.getOptionGroup();
        missingOptionException39.addSuppressed((java.lang.Throwable) alreadySelectedException41);
        alreadySelectedException37.addSuppressed((java.lang.Throwable) missingOptionException39);
        boolean boolean45 = option32.equals((java.lang.Object) alreadySelectedException37);
        option32.setArgName("");
        option32.setArgName("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg(true);
        org.apache.commons.cli.Option.Builder builder6 = builder5.required();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option7 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setRequired(true);
        boolean boolean13 = option4.hasArg();
        java.lang.String str14 = option4.getLongOpt();
        option4.setValueSeparator(' ');
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        char char12 = option5.getValueSeparator();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        java.lang.Object obj11 = option4.getType();
        java.lang.String str12 = option4.getArgName();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        option4.setValueSeparator('4');
        option4.setLongOpt("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties28 = commandLine22.getOptionProperties(option27);
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        java.lang.String str37 = commandLine22.getOptionValue(option33, "");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String str44 = option42.getArgName();
        option42.setValueSeparator('#');
        boolean boolean47 = option42.hasOptionalArg();
        boolean boolean48 = commandLine22.hasOption(option42);
        java.lang.Object obj49 = option42.getType();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.String str40 = commandLine37.getOptionValue('a', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean42 = commandLine37.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str40, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        org.apache.commons.cli.CommandLine commandLine26 = defaultParser0.parse(options1, strArray21, true);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        boolean boolean35 = option32.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options36 = options27.addOption(option32);
        boolean boolean38 = options36.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str39 = options36.toString();
        org.apache.commons.cli.DefaultParser defaultParser41 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser42 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        boolean boolean51 = option48.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options52 = options43.addOption(option48);
        org.apache.commons.cli.DefaultParser defaultParser53 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = defaultParser53.parse(options54, strArray61, properties62);
        org.apache.commons.cli.CommandLine commandLine64 = defaultParser42.parse(options43, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine69 = defaultParser41.parse(options43, strArray67, false);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options36, strArray67);
        org.apache.commons.cli.OptionGroup optionGroup71 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str72 = optionGroup71.getSelected();
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj78 = option77.getType();
        java.lang.String str79 = option77.getArgName();
        option77.setValueSeparator('#');
        optionGroup71.setSelected(option77);
        java.lang.String str83 = option77.getArgName();
        java.lang.Object obj84 = commandLine70.getParsedOptionValue(option77);
        java.lang.Object obj86 = commandLine70.getParsedOptionValue('4');
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str39, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "class java.lang.String");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder3.longOpt("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option.Builder builder9 = builder3.valueSeparator('a');
        org.apache.commons.cli.Option.Builder builder10 = builder3.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("org.apache.commons.cli.AlreadySelectedException: ");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        boolean boolean23 = option20.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options24 = options15.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup25 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options26 = options24.addOptionGroup(optionGroup25);
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        boolean boolean35 = option31.hasLongOpt();
        org.apache.commons.cli.Options options36 = options24.addOption(option31);
        boolean boolean37 = option31.hasLongOpt();
        java.lang.String str39 = commandLine10.getOptionValue(option31, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        boolean boolean41 = optionGroup40.isRequired();
        java.lang.String str42 = optionGroup40.getSelected();
        optionGroup40.setRequired(false);
        boolean boolean45 = optionGroup40.isRequired();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.lang.String str52 = option50.getArgName();
        java.util.List<java.lang.String> strList53 = option50.getValuesList();
        option50.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup40.setSelected(option50);
        java.lang.String str58 = commandLine10.getOptionValue(option50, "[ option:    ::  :: class java.lang.String ]");
        java.lang.Object obj59 = option50.clone();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str39, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str58, "[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException74 = new org.apache.commons.cli.MissingOptionException(list73);
        org.apache.commons.cli.MissingOptionException missingOptionException75 = new org.apache.commons.cli.MissingOptionException(list73);
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException77 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str78 = unrecognizedOptionException77.getOption();
        missingOptionException75.addSuppressed((java.lang.Throwable) unrecognizedOptionException77);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.lang.String str23 = option16.toString();
        java.lang.String[] strArray24 = option16.getValues();
        int int25 = option16.getArgs();
        boolean boolean26 = option16.hasOptionalArg();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str23, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setArgs(0);
        java.lang.String str13 = option4.toString();
        option4.setRequired(true);
        java.lang.Object obj16 = option4.clone();
        java.util.List<java.lang.String> strList17 = option4.getValuesList();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str13, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.util.List<java.lang.String> strList23 = commandLine10.getArgList();
        java.lang.Object obj25 = commandLine10.getParsedOptionValue(' ');
        boolean boolean27 = commandLine10.hasOption("");
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        boolean boolean37 = option34.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options38 = options29.addOption(option34);
        org.apache.commons.cli.OptionGroup optionGroup39 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options40 = options38.addOptionGroup(optionGroup39);
        org.apache.commons.cli.DefaultParser defaultParser41 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj48 = option47.getType();
        boolean boolean50 = option47.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options51 = options42.addOption(option47);
        org.apache.commons.cli.DefaultParser defaultParser52 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser52.parse(options53, strArray60, properties61);
        org.apache.commons.cli.CommandLine commandLine63 = defaultParser41.parse(options42, strArray60);
        org.apache.commons.cli.CommandLine commandLine65 = defaultParser28.parse(options40, strArray60, true);
        java.lang.Object obj67 = commandLine65.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj73 = option72.getType();
        java.lang.String str75 = option72.getValue(10);
        java.lang.String str77 = option72.getValue((int) '#');
        boolean boolean78 = option72.hasArgs();
        java.lang.String[] strArray79 = commandLine65.getOptionValues(option72);
        java.lang.String[] strArray80 = commandLine10.getOptionValues(option72);
        java.lang.Object obj82 = commandLine10.getParsedOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "class java.lang.String");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder3.longOpt("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option8 = builder7.build();
        org.apache.commons.cli.Option.Builder builder9 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder10 = builder9.required();
        org.apache.commons.cli.Option.Builder builder11 = builder10.hasArg();
        org.apache.commons.cli.Option.Builder builder12 = builder11.valueSeparator();
        org.apache.commons.cli.Option.Builder builder13 = builder11.valueSeparator();
        org.apache.commons.cli.Option.Builder builder14 = builder11.hasArg();
        org.apache.commons.cli.Option.Builder builder16 = builder11.longOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        boolean boolean17 = option8.equals((java.lang.Object) builder11);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        char char8 = option4.getValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List list2 = missingOptionException1.getMissingOptions();
        org.junit.Assert.assertNull(list2);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        option16.setRequired(false);
        boolean boolean24 = option16.hasOptionalArg();
        char char25 = option16.getValueSeparator();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.CommandLine.Builder builder12 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine13 = builder12.build();
        org.apache.commons.cli.CommandLine commandLine14 = builder12.build();
        org.apache.commons.cli.CommandLine.Builder builder16 = builder12.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        boolean boolean26 = option21.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder27 = builder16.addOption(option21);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        boolean boolean36 = option33.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options37 = options28.addOption(option33);
        java.lang.String str39 = option33.getValue("hi!");
        int int40 = option33.getArgs();
        option33.setDescription("hi!");
        java.lang.String str43 = option33.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder44 = builder16.addOption(option33);
        org.apache.commons.cli.CommandLine commandLine45 = builder16.build();
        org.apache.commons.cli.CommandLine commandLine46 = builder16.build();
        org.apache.commons.cli.CommandLine.Builder builder48 = builder16.addArg("");
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        option53.setArgName("");
        java.lang.String[] strArray59 = option53.getValues();
        option53.setArgs(0);
        java.lang.String str62 = option53.toString();
        option53.setRequired(true);
        org.apache.commons.cli.CommandLine.Builder builder65 = builder16.addOption(option53);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException66 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option53);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str62, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        boolean boolean18 = option15.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options19 = options10.addOption(option15);
        org.apache.commons.cli.OptionGroup optionGroup20 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options21 = options19.addOptionGroup(optionGroup20);
        java.lang.String str22 = options19.toString();
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        java.lang.String str29 = option27.getArgName();
        java.util.List<java.lang.String> strList30 = option27.getValuesList();
        org.apache.commons.cli.Options options31 = options19.addOption(option27);
        boolean boolean32 = option4.equals((java.lang.Object) options19);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list53 = options47.getRequiredOptions();
        java.lang.String str54 = options47.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]" + "'", str54, "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        option6.setArgName("");
        java.lang.String[] strArray12 = option6.getValues();
        boolean boolean13 = option6.hasArgName();
        java.lang.String str14 = option6.getOpt();
        optionGroup0.setSelected(option6);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection16 = optionGroup0.getOptions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(optionCollection16);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.longOpt("");
        org.apache.commons.cli.Option.Builder builder7 = builder5.desc("");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg();
        org.apache.commons.cli.Option.Builder builder10 = builder8.desc("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder11 = builder8.required();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        option4.setArgs((int) '#');
        java.lang.String str12 = option4.getArgName();
        java.lang.String str13 = option4.toString();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option:  hi! [ARG...] ::  :: class java.lang.String ]" + "'", str13, "[ option:  hi! [ARG...] ::  :: class java.lang.String ]");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: []", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: []' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj81 = option80.getType();
        java.lang.String str82 = option80.getArgName();
        boolean boolean83 = option80.hasArgName();
        option80.setLongOpt("");
        boolean boolean86 = option80.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup87 = options20.getOptionGroup(option80);
        java.lang.String str88 = option80.getOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class java.lang.String");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.DefaultParser defaultParser48 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = defaultParser48.parse(options49, strArray56, properties57);
        boolean boolean60 = commandLine58.hasOption("hi!");
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj66 = option65.getType();
        java.lang.String str67 = option65.getArgName();
        option65.setValueSeparator('#');
        java.lang.String[] strArray70 = commandLine58.getOptionValues(option65);
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj77 = option76.getType();
        boolean boolean79 = option76.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options80 = options71.addOption(option76);
        java.lang.String str82 = option76.getValue("hi!");
        java.util.List<java.lang.String> strList83 = option76.getValuesList();
        option76.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.Object obj86 = commandLine58.getParsedOptionValue(option76);
        org.apache.commons.cli.Options options87 = options44.addOption(option76);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class java.lang.String");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(options87);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder0.build();
        boolean boolean7 = commandLine5.hasOption('#');
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException3 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str4 = unrecognizedOptionException3.getOption();
        missingOptionException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException3);
        java.util.List list6 = missingOptionException1.getMissingOptions();
        java.lang.Throwable[] throwableArray7 = missingOptionException1.getSuppressed();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(list6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser3 = builder0.build();
        org.apache.commons.cli.DefaultParser defaultParser4 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = defaultParser4.parse(options5, strArray12, properties13);
        org.apache.commons.cli.Option option16 = options5.getOption("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.DefaultParser defaultParser17 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = defaultParser17.parse(options18, strArray25, properties26);
        java.util.List<java.lang.String> strList28 = commandLine27.getArgList();
        java.lang.String str31 = commandLine27.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean33 = commandLine27.hasOption('4');
        java.lang.String[] strArray35 = commandLine27.getOptionValues(' ');
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        java.lang.String str48 = commandLine46.getOptionValue("hi!");
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean54 = option53.hasValueSeparator();
        boolean boolean55 = commandLine46.hasOption(option53);
        option53.setOptionalArg(true);
        java.lang.String str58 = option53.getLongOpt();
        java.lang.String str59 = commandLine27.getOptionValue(option53);
        java.lang.String[] strArray60 = commandLine27.getArgs();
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser3.parse(options5, strArray60, true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(defaultParser3);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str31, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException3 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str4 = unrecognizedOptionException3.getOption();
        missingOptionException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException3);
        java.lang.String str6 = missingOptionException1.toString();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str6, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.lang.String str45 = option35.getLongOpt();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option49 = options9.getOption("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options53 = options9.addOption("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(option49);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder0.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder4 = builder3.valueSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.Object obj20 = commandLine10.getOptionObject("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str23 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: []", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str26 = commandLine10.getOptionValue('\000', "[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str26, "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        java.lang.String str20 = option17.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str20, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options35 = options26.addOption(option31);
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser25.parse(options26, strArray44);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser25.parse(options69, strArray70, false);
        java.lang.Object obj74 = commandLine72.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str77 = commandLine72.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup78 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str79 = optionGroup78.getSelected();
        org.apache.commons.cli.Option option84 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj85 = option84.getType();
        java.lang.String str86 = option84.getArgName();
        option84.setValueSeparator('#');
        optionGroup78.setSelected(option84);
        boolean boolean90 = option84.hasLongOpt();
        boolean boolean91 = commandLine72.hasOption(option84);
        java.util.Properties properties92 = commandLine22.getOptionProperties(option84);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = option84.addValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "class java.lang.String");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(properties92);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException43 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option36);
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException45 = new org.apache.commons.cli.UnrecognizedOptionException("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        alreadySelectedException43.addSuppressed((java.lang.Throwable) unrecognizedOptionException45);
        org.apache.commons.cli.OptionGroup optionGroup47 = alreadySelectedException43.getOptionGroup();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(optionGroup47);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        java.lang.String str12 = option9.getLongOpt();
        option9.setOptionalArg(true);
        java.lang.Object obj15 = option9.clone();
        org.apache.commons.cli.CommandLine.Builder builder16 = builder0.addOption(option9);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        optionGroup0.setRequired(false);
        boolean boolean8 = optionGroup0.isRequired();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options55 = options47.addOption("org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder8 = builder6.longOpt("");
        org.apache.commons.cli.Option.Builder builder10 = builder6.longOpt("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.Option.Builder builder12 = builder6.argName("[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options35 = options26.addOption(option31);
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser25.parse(options26, strArray44);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser25.parse(options69, strArray70, false);
        java.lang.Object obj74 = commandLine72.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str77 = commandLine72.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup78 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str79 = optionGroup78.getSelected();
        org.apache.commons.cli.Option option84 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj85 = option84.getType();
        java.lang.String str86 = option84.getArgName();
        option84.setValueSeparator('#');
        optionGroup78.setSelected(option84);
        boolean boolean90 = option84.hasLongOpt();
        boolean boolean91 = commandLine72.hasOption(option84);
        java.util.Properties properties92 = commandLine22.getOptionProperties(option84);
        java.lang.String[] strArray93 = option84.getValues();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "class java.lang.String");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertNull(strArray93);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean27 = commandLine10.hasOption(' ');
        java.lang.String str29 = commandLine10.getOptionValue("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        boolean boolean49 = option46.equals((java.lang.Object) 0);
        boolean boolean50 = option46.hasLongOpt();
        org.apache.commons.cli.Options options51 = options39.addOption(option46);
        org.apache.commons.cli.DefaultParser defaultParser52 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser52.parse(options53, strArray60, properties61);
        java.lang.String str64 = commandLine62.getOptionValue("hi!");
        java.lang.Object obj66 = commandLine62.getParsedOptionValue("");
        java.lang.String[] strArray68 = commandLine62.getOptionValues('4');
        java.lang.String[] strArray69 = commandLine62.getArgs();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj75 = option74.getType();
        java.util.Properties properties76 = commandLine62.getOptionProperties(option74);
        org.apache.commons.cli.Options options77 = options39.addOption(option74);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "hi!", false, "");
        org.apache.commons.cli.Options options83 = options39.addOption(option82);
        java.lang.String str85 = commandLine10.getOptionValue(option82, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str85, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        java.lang.Object obj42 = commandLine37.getOptionObject("org.apache.commons.cli.ParseException: []");
        java.lang.Object obj44 = commandLine37.getOptionObject('#');
        java.lang.Object obj46 = commandLine37.getParsedOptionValue('a');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor28 = commandLine10.iterator();
        java.lang.Object obj30 = commandLine10.getParsedOptionValue("[]");
        java.lang.Object obj32 = commandLine10.getParsedOptionValue(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(optionItor28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        boolean boolean33 = option21.hasOptionalArg();
        option21.setOptionalArg(false);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.Options options12 = options0.addOption("", "hi!");
        java.lang.String str13 = options0.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str13, "[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list2 = missingOptionException1.getMissingOptions();
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException4 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str5 = unrecognizedOptionException4.getOption();
        missingOptionException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException4);
        java.lang.String str7 = unrecognizedOptionException4.getOption();
        java.lang.String str8 = unrecognizedOptionException4.getOption();
        org.junit.Assert.assertNull(list2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        boolean boolean33 = option21.hasOptionalArg();
        option21.setRequired(false);
        java.lang.String str36 = option21.getOpt();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        java.lang.String str8 = option6.getArgName();
        option6.setValueSeparator('#');
        optionGroup0.setSelected(option6);
        boolean boolean12 = option6.hasLongOpt();
        java.lang.String str13 = option6.getLongOpt();
        option6.setArgName("[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        org.apache.commons.cli.Options options53 = options9.addOption(option52);
        option52.setRequired(true);
        boolean boolean56 = option52.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        boolean boolean5 = options3.hasShortOption("[]");
        boolean boolean7 = options3.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser10 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser21 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser21.parse(options22, strArray29, properties30);
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser10.parse(options11, strArray29);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser9.parse(options11, strArray35, false);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj44 = option43.getType();
        boolean boolean46 = option43.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options47 = options38.addOption(option43);
        java.lang.String str49 = option43.getValue("hi!");
        java.util.List<java.lang.String> strList50 = option43.getValuesList();
        int int51 = option43.getArgs();
        java.lang.String[] strArray52 = commandLine37.getOptionValues(option43);
        org.apache.commons.cli.OptionGroup optionGroup53 = options3.getOptionGroup(option43);
        java.lang.String[] strArray54 = commandLine2.getOptionValues(option43);
        boolean boolean55 = option43.isRequired();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.lang.String str47 = option44.getValue(10);
        java.lang.String str49 = option44.getValue((int) '#');
        boolean boolean50 = option44.hasArgs();
        java.lang.String[] strArray51 = commandLine37.getOptionValues(option44);
        option44.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str54 = option44.getValue();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray2 = alreadySelectedException1.getSuppressed();
        org.apache.commons.cli.Option option3 = alreadySelectedException1.getOption();
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException1.getOptionGroup();
        org.apache.commons.cli.Option option5 = alreadySelectedException1.getOption();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(option5);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        org.apache.commons.cli.OptionGroup optionGroup15 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str16 = optionGroup15.getSelected();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        optionGroup15.setSelected(option21);
        boolean boolean27 = option21.hasLongOpt();
        boolean boolean28 = commandLine10.hasOption(option21);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        boolean boolean37 = option34.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options38 = options29.addOption(option34);
        org.apache.commons.cli.OptionGroup optionGroup39 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options40 = options38.addOptionGroup(optionGroup39);
        java.lang.String str41 = options38.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        java.lang.String str48 = option46.getArgName();
        java.util.List<java.lang.String> strList49 = option46.getValuesList();
        org.apache.commons.cli.Options options50 = options38.addOption(option46);
        option46.setArgs((int) (byte) -1);
        java.util.Properties properties53 = commandLine10.getOptionProperties(option46);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str41, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(properties53);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection30 = options29.getOptions();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection31 = options29.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(optionCollection30);
        org.junit.Assert.assertNotNull(optionCollection31);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str26 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj28 = commandLine10.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean30 = commandLine10.hasOption("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        boolean boolean8 = option4.hasOptionalArg();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list53 = options52.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.option("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder10 = builder7.option("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = options11.getOptions();
        java.util.List<java.lang.String> strList14 = options11.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        boolean boolean16 = options11.hasLongOption("");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder0.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder5 = builder3.longOpt("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.Option.Builder builder7 = builder3.valueSeparator('a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        java.util.List<java.lang.String> strList12 = option5.getValuesList();
        option5.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj15 = option5.clone();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        boolean boolean54 = options52.hasOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean56 = options52.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options61 = options52.addOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        boolean boolean35 = option32.equals((java.lang.Object) 0);
        option32.setValueSeparator(' ');
        optionGroup10.setSelected(option32);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder53 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine54 = builder53.build();
        org.apache.commons.cli.CommandLine commandLine55 = builder53.build();
        org.apache.commons.cli.CommandLine.Builder builder57 = builder53.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean58 = option44.equals((java.lang.Object) builder57);
        org.apache.commons.cli.OptionGroup optionGroup59 = optionGroup10.addOption(option44);
        java.lang.String str60 = option44.getArgName();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(optionGroup59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List list36 = options21.getRequiredOptions();
        org.apache.commons.cli.Option option38 = options21.getOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNull(option38);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection42 = options41.getOptions();
        java.util.List<java.lang.String> strList44 = options41.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser1.parse(options41, strArray45);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser47.parse(options48, strArray55, properties56);
        java.util.List<java.lang.String> strList58 = commandLine57.getArgList();
        java.lang.String str61 = commandLine57.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean63 = commandLine57.hasOption('4');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        java.lang.String str70 = option68.getArgName();
        boolean boolean71 = option68.hasArgName();
        boolean boolean72 = option68.hasArg();
        option68.setOptionalArg(false);
        java.lang.String str75 = option68.getValue();
        java.lang.String str77 = option68.getValue((int) '4');
        boolean boolean78 = option68.hasOptionalArg();
        java.lang.String str80 = commandLine57.getOptionValue(option68, "");
        int int81 = option68.getArgs();
        org.apache.commons.cli.Options options82 = options41.addOption(option68);
        org.apache.commons.cli.Option option84 = options41.getOption("org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionCollection42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str61, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNull(option84);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        boolean boolean35 = option32.equals((java.lang.Object) 0);
        option32.setValueSeparator(' ');
        optionGroup10.setSelected(option32);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder53 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine54 = builder53.build();
        org.apache.commons.cli.CommandLine commandLine55 = builder53.build();
        org.apache.commons.cli.CommandLine.Builder builder57 = builder53.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean58 = option44.equals((java.lang.Object) builder57);
        org.apache.commons.cli.OptionGroup optionGroup59 = optionGroup10.addOption(option44);
        optionGroup59.setRequired(true);
        java.lang.String str62 = optionGroup59.toString();
        java.util.Collection<java.lang.String> strCollection63 = optionGroup59.getNames();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(optionGroup59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[- ]" + "'", str62, "[- ]");
        org.junit.Assert.assertNotNull(strCollection63);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean26 = commandLine22.hasOption('#');
        boolean boolean28 = commandLine22.hasOption('4');
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        boolean boolean36 = option33.hasArgName();
        java.lang.String str38 = commandLine22.getOptionValue(option33, "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj44 = option43.getType();
        java.lang.String str46 = option43.getValue(10);
        java.lang.String str48 = option43.getValue((int) '#');
        java.util.List<java.lang.String> strList49 = option43.getValuesList();
        option43.setArgs((int) '\000');
        java.lang.Object obj52 = option43.getType();
        boolean boolean53 = commandLine22.hasOption(option43);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str38, "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        boolean boolean26 = commandLine22.hasOption("[ option:  hi!  ::  :: class java.lang.String ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor27 = commandLine22.iterator();
        java.lang.String[] strArray28 = commandLine22.getArgs();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        boolean boolean37 = option34.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options38 = options29.addOption(option34);
        org.apache.commons.cli.OptionGroup optionGroup39 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options40 = options38.addOptionGroup(optionGroup39);
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj46 = option45.getType();
        boolean boolean48 = option45.equals((java.lang.Object) 0);
        boolean boolean49 = option45.hasLongOpt();
        org.apache.commons.cli.Options options50 = options38.addOption(option45);
        boolean boolean51 = option45.hasLongOpt();
        java.lang.String[] strArray52 = commandLine22.getOptionValues(option45);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(optionItor27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(strArray52);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg();
        org.apache.commons.cli.Option.Builder builder10 = builder8.numberOfArgs(0);
        org.apache.commons.cli.Option.Builder builder12 = builder8.desc("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        java.lang.String str12 = option4.toString();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str12, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.util.List<java.lang.String> strList7 = option4.getValuesList();
        boolean boolean8 = option4.hasLongOpt();
        char char9 = option4.getValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder9 = builder5.desc("org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj81 = option80.getType();
        java.lang.String str82 = option80.getArgName();
        boolean boolean83 = option80.hasArgName();
        option80.setLongOpt("");
        boolean boolean86 = option80.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup87 = options20.getOptionGroup(option80);
        option80.setOptionalArg(false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class java.lang.String");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.String[] strArray13 = commandLine10.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        option21.setValueSeparator(' ');
        java.lang.String str27 = option21.getArgName();
        boolean boolean28 = option21.hasValueSeparator();
        java.lang.String str30 = commandLine10.getOptionValue(option21, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str32 = commandLine10.getOptionValue(' ');
        boolean boolean34 = commandLine10.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str30, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder4 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg();
        org.apache.commons.cli.Option.Builder builder7 = builder2.longOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option.Builder builder9 = builder2.option("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        java.lang.String str37 = commandLine10.getOptionValue('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        boolean boolean6 = options0.hasShortOption("[]");
        boolean boolean8 = options0.hasOption("[]");
        boolean boolean10 = options0.hasShortOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean12 = options0.hasLongOption("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.longOpt("[]");
        org.apache.commons.cli.Option.Builder builder5 = builder3.desc("org.apache.commons.cli.ParseException: []");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser6 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj14 = option13.getType();
        boolean boolean16 = option13.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options17 = options8.addOption(option13);
        org.apache.commons.cli.DefaultParser defaultParser18 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = defaultParser18.parse(options19, strArray26, properties27);
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser7.parse(options8, strArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser6.parse(options8, strArray32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        boolean boolean43 = option40.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options44 = options35.addOption(option40);
        java.lang.String str46 = option40.getValue("hi!");
        java.util.List<java.lang.String> strList47 = option40.getValuesList();
        int int48 = option40.getArgs();
        java.lang.String[] strArray49 = commandLine34.getOptionValues(option40);
        org.apache.commons.cli.OptionGroup optionGroup50 = options0.getOptionGroup(option40);
        int int51 = option40.getArgs();
        java.lang.String[] strArray52 = option40.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(strArray52);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        java.lang.String str21 = option18.getValue(10);
        boolean boolean22 = option18.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup23 = optionGroup10.addOption(option18);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(optionGroup23);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder3.optionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder7 = builder5.option("org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.Option option11 = options0.getOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNull(option11);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getValue();
        option4.setValueSeparator(' ');
        boolean boolean10 = option4.hasArgName();
        option4.setValueSeparator(' ');
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.AlreadySelectedException: ");
        java.lang.String str2 = unrecognizedOptionException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: " + "'", str2, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("hi!");
        java.lang.Object obj26 = commandLine22.getParsedOptionValue("");
        org.apache.commons.cli.DefaultParser defaultParser27 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser27.parse(options28, strArray35, properties36);
        java.lang.String str39 = commandLine37.getOptionValue("hi!");
        java.lang.Object obj41 = commandLine37.getParsedOptionValue("");
        java.lang.String[] strArray43 = commandLine37.getOptionValues('4');
        java.lang.String str45 = commandLine37.getOptionValue('4');
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj52 = option51.getType();
        boolean boolean54 = option51.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options55 = options46.addOption(option51);
        org.apache.commons.cli.OptionGroup optionGroup56 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options57 = options55.addOptionGroup(optionGroup56);
        java.lang.String str58 = options55.toString();
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj64 = option63.getType();
        java.lang.String str65 = option63.getArgName();
        boolean boolean66 = option63.hasArgName();
        boolean boolean67 = option63.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup68 = options55.getOptionGroup(option63);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean74 = option73.hasValueSeparator();
        org.apache.commons.cli.Options options75 = options55.addOption(option73);
        java.lang.String str77 = commandLine37.getOptionValue(option73, "hi!");
        option73.setOptionalArg(true);
        java.util.Properties properties80 = commandLine22.getOptionProperties(option73);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str58, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "class java.lang.String");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(properties80);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        java.lang.String str42 = option31.toString();
        option31.setDescription("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str42, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder6 = builder4.numberOfArgs((int) (short) 10);
        org.apache.commons.cli.Option.Builder builder8 = builder6.hasArg(true);
        org.apache.commons.cli.Option.Builder builder10 = builder8.required(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        int int12 = option5.getArgs();
        java.lang.String str14 = option5.getValue("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean15 = option5.hasLongOpt();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str14, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        option4.setLongOpt("");
        option4.setDescription("");
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser15 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser15.parse(options16, strArray34);
        org.apache.commons.cli.CommandLine commandLine39 = defaultParser13.parse(options14, strArray34, true);
        boolean boolean40 = option4.equals((java.lang.Object) true);
        option4.setDescription("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.String str25 = commandLine10.getOptionValue(' ', "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.Object obj27 = commandLine10.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str25, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser1 = builder0.build();
        org.apache.commons.cli.DefaultParser defaultParser2 = builder0.build();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.OptionGroup optionGroup13 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options14 = options12.addOptionGroup(optionGroup13);
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        boolean boolean23 = option19.hasLongOpt();
        org.apache.commons.cli.Options options24 = options12.addOption(option19);
        java.lang.String str25 = options24.toString();
        org.apache.commons.cli.OptionGroup optionGroup26 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str27 = optionGroup26.getSelected();
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        java.lang.String str34 = option32.getArgName();
        option32.setValueSeparator('#');
        optionGroup26.setSelected(option32);
        org.apache.commons.cli.Options options38 = options24.addOption(option32);
        java.util.List<java.lang.String> strList40 = options24.getMatchingOptions("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String[] strArray47 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: []", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "[ option:  hi!  ::  :: class java.lang.String ]", "hi!" };
        org.apache.commons.cli.CommandLine commandLine49 = defaultParser2.parse(options24, strArray47, true);
        org.apache.commons.cli.OptionGroup optionGroup50 = new org.apache.commons.cli.OptionGroup();
        boolean boolean51 = optionGroup50.isRequired();
        java.lang.String str52 = optionGroup50.getSelected();
        optionGroup50.setRequired(false);
        boolean boolean55 = optionGroup50.isRequired();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj61 = option60.getType();
        java.lang.String str62 = option60.getArgName();
        java.util.List<java.lang.String> strList63 = option60.getValuesList();
        option60.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup50.setSelected(option60);
        java.util.Collection<java.lang.String> strCollection67 = optionGroup50.getNames();
        org.apache.commons.cli.Options options68 = options24.addOptionGroup(optionGroup50);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaultParser1);
        org.junit.Assert.assertNotNull(defaultParser2);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str25, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "class java.lang.String");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strCollection67);
        org.junit.Assert.assertNotNull(options68);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArg();
        option4.setValueSeparator('a');
        java.lang.String[] strArray13 = option4.getValues();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = option4.addValue("[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.longOpt("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder7 = builder5.option("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("");
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        java.lang.String[] strArray13 = commandLine10.getArgs();
        java.util.List<java.lang.String> strList14 = commandLine10.getArgList();
        java.util.Properties properties16 = commandLine10.getOptionProperties("[- ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        java.util.Properties properties19 = commandLine10.getOptionProperties("[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties19);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        java.lang.Object obj25 = commandLine22.getOptionObject("");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder3.numberOfArgs((int) (short) 0);
        org.apache.commons.cli.Option.Builder builder7 = builder5.desc("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = defaultParser2.parse(options3, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options24 = options22.addOptionGroup(optionGroup23);
        java.lang.String str25 = options22.toString();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj31 = option30.getType();
        java.lang.String str32 = option30.getArgName();
        boolean boolean33 = option30.hasArgName();
        boolean boolean34 = option30.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup35 = options22.getOptionGroup(option30);
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser47.parse(options48, strArray55, properties56);
        java.lang.String str59 = commandLine57.getOptionValue("hi!");
        java.lang.Object obj61 = commandLine57.getParsedOptionValue("");
        java.lang.String[] strArray63 = commandLine57.getOptionValues('4');
        java.lang.String[] strArray64 = commandLine57.getArgs();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj70 = option69.getType();
        java.util.Properties properties71 = commandLine57.getOptionProperties(option69);
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser2.parse(options22, strArray44, properties71);
        boolean boolean74 = options22.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String[] strArray75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = defaultParser1.parse(options22, strArray75, true);
        java.lang.Object obj79 = commandLine77.getParsedOptionValue("[ option:  hi! [ARG...] ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str25, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "class java.lang.String");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", "[ option:    ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        boolean boolean25 = commandLine22.hasOption('#');
        java.lang.String[] strArray26 = commandLine22.getArgs();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        java.lang.Object obj11 = option4.clone();
        option4.setOptionalArg(false);
        java.lang.Object obj14 = option4.getType();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class java.lang.String");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list53 = options47.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        java.util.Collection<java.lang.String> strCollection59 = optionGroup54.getNames();
        org.apache.commons.cli.Options options60 = options47.addOptionGroup(optionGroup54);
        org.apache.commons.cli.Options options63 = options47.addOption("", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options68 = options47.addOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "hi!", false, "org.apache.commons.cli.ParseException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strCollection59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(options63);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str2 = parseException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str2, "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        boolean boolean6 = options0.hasShortOption("[]");
        boolean boolean8 = options0.hasOption("[]");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection9 = options0.getOptions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionCollection9);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.String str14 = commandLine10.getOptionValue(' ');
        java.lang.Object obj16 = commandLine10.getOptionObject("");
        boolean boolean18 = commandLine10.hasOption(' ');
        java.lang.String str20 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj16 = commandLine10.getParsedOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder4.build();
        java.lang.String[] strArray7 = commandLine5.getOptionValues('a');
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertNull(strArray7);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setLongOpt("");
        java.util.List<java.lang.String> strList13 = option4.getValuesList();
        option4.setArgs(100);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str21 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.Object obj23 = commandLine10.getParsedOptionValue("[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        boolean boolean5 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        java.lang.String str12 = option10.getArgName();
        java.util.List<java.lang.String> strList13 = option10.getValuesList();
        option10.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup0.setSelected(option10);
        org.apache.commons.cli.DefaultParser defaultParser17 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = defaultParser17.parse(options18, strArray25, properties26);
        java.lang.String str29 = commandLine27.getOptionValue("hi!");
        java.lang.Object obj31 = commandLine27.getParsedOptionValue("");
        java.lang.String[] strArray33 = commandLine27.getOptionValues('4');
        java.lang.String[] strArray34 = commandLine27.getArgs();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        java.util.Properties properties41 = commandLine27.getOptionProperties(option39);
        boolean boolean42 = option39.hasArg();
        java.lang.String str43 = option39.getDescription();
        java.lang.Object obj44 = option39.getType();
        optionGroup0.setSelected(option39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("org.apache.commons.cli.UnrecognizedOptionException: []");
        java.lang.Throwable[] throwableArray2 = parseException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.Object obj20 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray22 = commandLine10.getOptionValues("org.apache.commons.cli.ParseException: []");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        java.lang.String str29 = option27.getArgName();
        boolean boolean30 = option27.hasArgName();
        option27.setLongOpt("");
        boolean boolean33 = option27.hasArgs();
        java.lang.String str35 = commandLine10.getOptionValue(option27, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str35, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        java.lang.String str14 = optionGroup10.toString();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection15 = optionGroup10.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser16 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = defaultParser16.parse(options17, strArray24, properties25);
        java.lang.String str28 = commandLine26.getOptionValue("hi!");
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        boolean boolean37 = option34.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options38 = options29.addOption(option34);
        java.lang.String str40 = option34.getValue("hi!");
        boolean boolean41 = commandLine26.hasOption(option34);
        org.apache.commons.cli.Option[] optionArray42 = commandLine26.getOptions();
        org.apache.commons.cli.Option option47 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj48 = option47.getType();
        boolean boolean50 = option47.equals((java.lang.Object) 0);
        option47.setArgName("");
        java.lang.String[] strArray53 = option47.getValues();
        option47.setArgs(0);
        java.lang.String[] strArray56 = option47.getValues();
        boolean boolean57 = commandLine26.hasOption(option47);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException58 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option47);
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj64 = option63.getType();
        java.lang.String str65 = option63.getArgName();
        boolean boolean66 = option63.hasArgName();
        boolean boolean67 = option63.hasArg();
        option63.setOptionalArg(false);
        java.lang.String str70 = option63.getValue();
        java.lang.String str72 = option63.getValue((int) '4');
        boolean boolean73 = option63.hasOptionalArg();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException74 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option63);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(optionCollection15);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(optionArray42);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "class java.lang.String");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean26 = commandLine22.hasOption('#');
        boolean boolean28 = commandLine22.hasOption('4');
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        boolean boolean36 = option33.hasArgName();
        java.lang.String str38 = commandLine22.getOptionValue(option33, "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj39 = option33.getType();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str38, "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str52 = commandLine47.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup53 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str54 = optionGroup53.getSelected();
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj60 = option59.getType();
        java.lang.String str61 = option59.getArgName();
        option59.setValueSeparator('#');
        optionGroup53.setSelected(option59);
        boolean boolean65 = option59.hasLongOpt();
        boolean boolean66 = commandLine47.hasOption(option59);
        java.lang.String str67 = option59.getArgName();
        java.lang.String str69 = option59.getValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str71 = option59.getValue(1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class java.lang.String");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str69, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        option31.setArgs((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        boolean boolean31 = options3.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options36 = options3.addOption("[ option:  hi!  ::  :: class java.lang.String ]", "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", true, "[ option:  hi! [ARG...] ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder10 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.Options options12 = options0.addOption("", "hi!");
        boolean boolean14 = options12.hasShortOption("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser15 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser15.parse(options16, strArray34);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj44 = option43.getType();
        boolean boolean46 = option43.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options47 = options38.addOption(option43);
        org.apache.commons.cli.OptionGroup optionGroup48 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options49 = options47.addOptionGroup(optionGroup48);
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        boolean boolean57 = option54.equals((java.lang.Object) 0);
        boolean boolean58 = option54.hasLongOpt();
        org.apache.commons.cli.Options options59 = options47.addOption(option54);
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser15.parse(options59, strArray60, false);
        java.lang.Object obj64 = commandLine62.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str67 = commandLine62.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup68 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str69 = optionGroup68.getSelected();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj75 = option74.getType();
        java.lang.String str76 = option74.getArgName();
        option74.setValueSeparator('#');
        optionGroup68.setSelected(option74);
        boolean boolean80 = option74.hasLongOpt();
        boolean boolean81 = commandLine62.hasOption(option74);
        org.apache.commons.cli.Options options82 = options12.addOption(option74);
        org.apache.commons.cli.Options options85 = options82.addOption("", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options90 = options82.addOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class java.lang.String");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNotNull(options85);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "[ option:  [- ]  ::  :: class java.lang.String ]");
        java.lang.Object obj4 = option3.getType();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class java.lang.String");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str10 = options0.toString();
        boolean boolean12 = options0.hasLongOption("[- ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str10, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj58 = option57.getType();
        java.lang.String str60 = option57.getValue(10);
        java.lang.String str62 = option57.getValue((int) '#');
        boolean boolean63 = option57.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup64 = options47.getOptionGroup(option57);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class java.lang.String");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(optionGroup64);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        java.lang.String[] strArray17 = commandLine10.getOptionValues(option15);
        int int18 = option15.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        boolean boolean24 = options21.hasLongOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder3.hasArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder3.optionalArg(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setOptionalArg(false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        java.util.List<java.lang.String> strList54 = options2.getMatchingOptions("[ option:  hi! [ARG...] ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strList54);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[ option:  [- ]  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list53 = options47.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        java.util.Collection<java.lang.String> strCollection59 = optionGroup54.getNames();
        org.apache.commons.cli.Options options60 = options47.addOptionGroup(optionGroup54);
        java.util.List list61 = options60.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options65 = options60.addOption("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strCollection59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder6 = builder4.longOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder8 = builder4.required(false);
        org.apache.commons.cli.Option.Builder builder9 = builder4.valueSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        org.apache.commons.cli.DefaultParser defaultParser19 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser19.parse(options20, strArray27, properties28);
        boolean boolean31 = commandLine29.hasOption("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        option36.setValueSeparator('#');
        java.lang.String[] strArray41 = commandLine29.getOptionValues(option36);
        java.util.Properties properties43 = commandLine29.getOptionProperties("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser46 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        boolean boolean55 = option52.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options56 = options47.addOption(option52);
        org.apache.commons.cli.DefaultParser defaultParser57 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = defaultParser57.parse(options58, strArray65, properties66);
        org.apache.commons.cli.CommandLine commandLine68 = defaultParser46.parse(options47, strArray65);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine73 = defaultParser45.parse(options47, strArray71, false);
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj80 = option79.getType();
        boolean boolean82 = option79.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options83 = options74.addOption(option79);
        java.lang.String str85 = option79.getValue("hi!");
        int int86 = option79.getArgs();
        option79.setDescription("hi!");
        org.apache.commons.cli.OptionGroup optionGroup89 = options47.getOptionGroup(option79);
        boolean boolean90 = commandLine29.hasOption(option79);
        boolean boolean91 = commandLine10.hasOption(option79);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        boolean boolean24 = option20.hasLongOpt();
        java.util.List<java.lang.String> strList25 = option20.getValuesList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        option18.setOptionalArg(false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        org.apache.commons.cli.OptionGroup optionGroup30 = new org.apache.commons.cli.OptionGroup();
        boolean boolean31 = optionGroup30.isRequired();
        java.lang.String str32 = optionGroup30.getSelected();
        optionGroup30.setRequired(false);
        boolean boolean35 = optionGroup30.isRequired();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        java.lang.String str42 = option40.getArgName();
        java.util.List<java.lang.String> strList43 = option40.getValuesList();
        option40.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup30.setSelected(option40);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.DefaultParser defaultParser58 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray66 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = defaultParser58.parse(options59, strArray66, properties67);
        org.apache.commons.cli.CommandLine commandLine69 = defaultParser47.parse(options48, strArray66);
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties75 = commandLine69.getOptionProperties(option74);
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj81 = option80.getType();
        java.lang.String str82 = option80.getArgName();
        java.lang.String str84 = commandLine69.getOptionValue(option80, "");
        java.lang.String str85 = option80.getValue();
        org.apache.commons.cli.OptionGroup optionGroup86 = optionGroup30.addOption(option80);
        java.lang.String str87 = optionGroup30.toString();
        org.apache.commons.cli.Options options88 = options29.addOptionGroup(optionGroup30);
        org.apache.commons.cli.Options options92 = options29.addOption("", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class java.lang.String");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(optionGroup86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[- ]" + "'", str87, "[- ]");
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(options92);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.CommandLine.Builder builder17 = builder15.addArg("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser18 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = defaultParser18.parse(options19, strArray26, properties27);
        boolean boolean30 = commandLine28.hasOption("hi!");
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        java.lang.String str37 = option35.getArgName();
        option35.setValueSeparator('#');
        java.lang.String[] strArray40 = commandLine28.getOptionValues(option35);
        java.lang.Object obj42 = commandLine28.getParsedOptionValue('4');
        java.lang.String str45 = commandLine28.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str52 = option50.getValue("");
        java.lang.String[] strArray53 = commandLine28.getOptionValues(option50);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException55 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException57 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException59 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup60 = alreadySelectedException59.getOptionGroup();
        missingOptionException57.addSuppressed((java.lang.Throwable) alreadySelectedException59);
        alreadySelectedException55.addSuppressed((java.lang.Throwable) missingOptionException57);
        boolean boolean63 = option50.equals((java.lang.Object) alreadySelectedException55);
        option50.setArgName("");
        org.apache.commons.cli.CommandLine.Builder builder66 = builder15.addOption(option50);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        java.lang.String str34 = option28.getValue("hi!");
        java.util.List<java.lang.String> strList35 = option28.getValuesList();
        option28.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.Object obj38 = commandLine10.getParsedOptionValue(option28);
        java.util.List<java.lang.String> strList39 = commandLine10.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.Object obj22 = option16.clone();
        boolean boolean23 = option16.isRequired();
        boolean boolean24 = option16.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        boolean boolean35 = option32.equals((java.lang.Object) 0);
        option32.setValueSeparator(' ');
        optionGroup10.setSelected(option32);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder53 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine54 = builder53.build();
        org.apache.commons.cli.CommandLine commandLine55 = builder53.build();
        org.apache.commons.cli.CommandLine.Builder builder57 = builder53.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean58 = option44.equals((java.lang.Object) builder57);
        org.apache.commons.cli.OptionGroup optionGroup59 = optionGroup10.addOption(option44);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection60 = optionGroup10.getOptions();
        boolean boolean61 = optionGroup10.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(optionGroup59);
        org.junit.Assert.assertNotNull(optionCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        option21.setValueSeparator(' ');
        java.lang.String str27 = option21.getArgName();
        boolean boolean28 = option21.hasValueSeparator();
        java.lang.String str30 = commandLine10.getOptionValue(option21, "[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean31 = option21.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str30, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        boolean boolean26 = commandLine10.hasOption(' ');
        java.util.Properties properties28 = commandLine10.getOptionProperties("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties28);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        org.apache.commons.cli.Option.Builder builder12 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder14 = builder12.argName("[]");
        org.apache.commons.cli.Option.Builder builder15 = builder12.hasArg();
        org.apache.commons.cli.Option.Builder builder17 = builder12.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder19 = builder17.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder21 = builder19.hasArg(false);
        boolean boolean22 = option5.equals((java.lang.Object) builder19);
        org.apache.commons.cli.Option.Builder builder24 = builder19.desc("[]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        org.apache.commons.cli.Option.Builder builder9 = builder8.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = defaultParser2.parse(options3, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options24 = options22.addOptionGroup(optionGroup23);
        java.lang.String str25 = options22.toString();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj31 = option30.getType();
        java.lang.String str32 = option30.getArgName();
        boolean boolean33 = option30.hasArgName();
        boolean boolean34 = option30.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup35 = options22.getOptionGroup(option30);
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser47.parse(options48, strArray55, properties56);
        java.lang.String str59 = commandLine57.getOptionValue("hi!");
        java.lang.Object obj61 = commandLine57.getParsedOptionValue("");
        java.lang.String[] strArray63 = commandLine57.getOptionValues('4');
        java.lang.String[] strArray64 = commandLine57.getArgs();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj70 = option69.getType();
        java.util.Properties properties71 = commandLine57.getOptionProperties(option69);
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser2.parse(options22, strArray44, properties71);
        boolean boolean74 = options22.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String[] strArray75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = defaultParser1.parse(options22, strArray75, true);
        java.lang.Object obj79 = commandLine77.getParsedOptionValue("org.apache.commons.cli.AlreadySelectedException: ");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor80 = commandLine77.iterator();
        java.lang.String[] strArray82 = commandLine77.getOptionValues('\000');
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str25, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "class java.lang.String");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(optionItor80);
        org.junit.Assert.assertNull(strArray82);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        boolean boolean11 = options9.hasOption("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options14 = options9.addOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", "[ option:  [- ]  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        java.util.List<java.lang.String> strList10 = option4.getValuesList();
        option4.setArgs((int) '\000');
        java.lang.String str13 = option4.getArgName();
        java.lang.String[] strArray14 = option4.getValues();
        java.lang.String str16 = option4.getValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str16, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        org.apache.commons.cli.DefaultParser defaultParser18 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = defaultParser18.parse(options19, strArray26, properties27);
        java.lang.String str30 = commandLine28.getOptionValue("hi!");
        java.lang.Object obj32 = commandLine28.getParsedOptionValue("");
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        boolean boolean41 = option38.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options42 = options33.addOption(option38);
        org.apache.commons.cli.OptionGroup optionGroup43 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options44 = options42.addOptionGroup(optionGroup43);
        java.lang.String str45 = options42.toString();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.lang.String str52 = option50.getArgName();
        boolean boolean53 = option50.hasArgName();
        boolean boolean54 = option50.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup55 = options42.getOptionGroup(option50);
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean61 = option60.hasValueSeparator();
        org.apache.commons.cli.Options options62 = options42.addOption(option60);
        java.lang.String str64 = option60.getValue((int) 'a');
        boolean boolean65 = commandLine28.hasOption(option60);
        option60.setArgs((int) (byte) 100);
        java.lang.String str69 = commandLine10.getOptionValue(option60, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj71 = commandLine10.getParsedOptionValue('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str45, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str69, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.util.List<java.lang.String> strList47 = commandLine37.getArgList();
        java.util.List<java.lang.String> strList48 = commandLine37.getArgList();
        java.lang.String str50 = commandLine37.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String[] strArray52 = commandLine37.getOptionValues("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str55 = commandLine37.getOptionValue(' ', "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str55, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = commandLine10.getOptionValue(option46, "hi!");
        java.util.List<java.lang.String> strList51 = option46.getValuesList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        java.util.List<java.lang.String> strList12 = option5.getValuesList();
        int int13 = option5.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder14 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine15 = builder14.build();
        org.apache.commons.cli.CommandLine commandLine16 = builder14.build();
        org.apache.commons.cli.CommandLine.Builder builder18 = builder14.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean19 = option5.equals((java.lang.Object) builder18);
        boolean boolean20 = option5.hasArg();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder0.build();
        org.apache.commons.cli.OptionGroup optionGroup6 = new org.apache.commons.cli.OptionGroup();
        boolean boolean7 = optionGroup6.isRequired();
        java.lang.String str8 = optionGroup6.getSelected();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj15 = option14.getType();
        boolean boolean17 = option14.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options18 = options9.addOption(option14);
        org.apache.commons.cli.OptionGroup optionGroup19 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options20 = options18.addOptionGroup(optionGroup19);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj26 = option25.getType();
        boolean boolean28 = option25.equals((java.lang.Object) 0);
        boolean boolean29 = option25.hasLongOpt();
        org.apache.commons.cli.Options options30 = options18.addOption(option25);
        java.lang.Object obj31 = option25.clone();
        boolean boolean32 = option25.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup33 = optionGroup6.addOption(option25);
        java.lang.String[] strArray34 = option25.getValues();
        org.apache.commons.cli.CommandLine.Builder builder35 = builder0.addOption(option25);
        org.apache.commons.cli.CommandLine.Builder builder37 = builder35.addArg("");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(optionGroup33);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getDescription();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "[ option:  [- ]  ::  :: class java.lang.String ]");
        java.lang.String str5 = option3.getValue(0);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        java.lang.String str34 = option28.getValue("hi!");
        java.util.List<java.lang.String> strList35 = option28.getValuesList();
        option28.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.Object obj38 = commandLine10.getParsedOptionValue(option28);
        java.lang.Object obj39 = option28.clone();
        java.lang.String str40 = option28.getOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "[ option:  hi!  :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "[ option:  hi!  :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "[ option:  hi!  :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.valueSeparator('4');
        org.apache.commons.cli.Option.Builder builder3 = builder2.hasArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = builder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list53 = options47.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        java.util.Collection<java.lang.String> strCollection59 = optionGroup54.getNames();
        org.apache.commons.cli.Options options60 = options47.addOptionGroup(optionGroup54);
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj66 = option65.getType();
        java.lang.String str68 = option65.getValue(10);
        option65.setValueSeparator('4');
        java.lang.String str71 = option65.getArgName();
        int int72 = option65.getArgs();
        org.apache.commons.cli.OptionGroup optionGroup73 = optionGroup54.addOption(option65);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strCollection59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class java.lang.String");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(optionGroup73);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.OptionGroup optionGroup2 = new org.apache.commons.cli.OptionGroup();
        boolean boolean3 = optionGroup2.isRequired();
        java.lang.String str4 = optionGroup2.getSelected();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        boolean boolean13 = option10.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options14 = options5.addOption(option10);
        org.apache.commons.cli.OptionGroup optionGroup15 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options16 = options14.addOptionGroup(optionGroup15);
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        boolean boolean25 = option21.hasLongOpt();
        org.apache.commons.cli.Options options26 = options14.addOption(option21);
        java.lang.Object obj27 = option21.clone();
        boolean boolean28 = option21.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup29 = optionGroup2.addOption(option21);
        java.lang.String[] strArray30 = option21.getValues();
        org.apache.commons.cli.OptionGroup optionGroup31 = optionGroup0.addOption(option21);
        java.util.Collection<java.lang.String> strCollection32 = optionGroup0.getNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(optionGroup29);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(optionGroup31);
        org.junit.Assert.assertNotNull(strCollection32);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option2 = alreadySelectedException1.getOption();
        org.junit.Assert.assertNull(option2);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        org.apache.commons.cli.DefaultParser defaultParser70 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = defaultParser70.parse(options71, strArray78, properties79);
        java.lang.String str82 = commandLine80.getOptionValue("hi!");
        java.lang.Object obj84 = commandLine80.getParsedOptionValue("");
        java.lang.String[] strArray86 = commandLine80.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine80.getArgs();
        org.apache.commons.cli.CommandLine commandLine88 = defaultParser0.parse(options69, strArray87);
        java.lang.Object obj90 = commandLine88.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup2 = alreadySelectedException1.getOptionGroup();
        org.apache.commons.cli.Option option3 = alreadySelectedException1.getOption();
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException1.getOptionGroup();
        java.lang.String str5 = alreadySelectedException1.toString();
        org.junit.Assert.assertNull(optionGroup2);
        org.junit.Assert.assertNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.cli.AlreadySelectedException: " + "'", str5, "org.apache.commons.cli.AlreadySelectedException: ");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        char char26 = option18.getValueSeparator();
        java.lang.String str27 = option18.getValue();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String str2 = parseException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.ParseException: [ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]" + "'", str2, "org.apache.commons.cli.ParseException: [ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = builder0.build();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        boolean boolean10 = options8.hasShortOption("[]");
        boolean boolean12 = options8.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        boolean boolean14 = options8.hasShortOption("[]");
        boolean boolean16 = options8.hasOption("[]");
        org.apache.commons.cli.DefaultParser defaultParser17 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = defaultParser17.parse(options18, strArray25, properties26);
        boolean boolean29 = commandLine27.hasOption("hi!");
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        java.lang.String str36 = option34.getArgName();
        option34.setValueSeparator('#');
        java.lang.String[] strArray39 = commandLine27.getOptionValues(option34);
        java.lang.Object obj41 = commandLine27.getParsedOptionValue('4');
        boolean boolean43 = commandLine27.hasOption(' ');
        java.lang.String[] strArray44 = commandLine27.getArgs();
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.util.List<java.lang.String> strList56 = commandLine55.getArgList();
        java.lang.String str59 = commandLine55.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean61 = commandLine55.hasOption('4');
        org.apache.commons.cli.Option option66 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj67 = option66.getType();
        boolean boolean69 = option66.equals((java.lang.Object) 0);
        option66.setValueSeparator(' ');
        java.lang.String str72 = option66.getArgName();
        boolean boolean73 = option66.hasValueSeparator();
        java.lang.String str75 = commandLine55.getOptionValue(option66, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str77 = commandLine55.getOptionValue(' ');
        java.util.Properties properties79 = commandLine55.getOptionProperties("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.CommandLine commandLine81 = defaultParser7.parse(options8, strArray44, properties79, false);
        java.lang.String str83 = commandLine81.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaultParser7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str59, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str75, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        option4.setLongOpt("");
        option4.setDescription("");
        java.lang.String str13 = option4.getDescription();
        java.util.List<java.lang.String> strList14 = option4.getValuesList();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine.Builder builder6 = builder0.addArg("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser8 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        boolean boolean18 = option15.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options19 = options10.addOption(option15);
        org.apache.commons.cli.DefaultParser defaultParser20 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray28 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = defaultParser20.parse(options21, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser9.parse(options10, strArray28);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser8.parse(options10, strArray34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        boolean boolean45 = option42.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options46 = options37.addOption(option42);
        org.apache.commons.cli.OptionGroup optionGroup47 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options48 = options46.addOptionGroup(optionGroup47);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        boolean boolean57 = option53.hasLongOpt();
        org.apache.commons.cli.Options options58 = options46.addOption(option53);
        java.lang.Object obj59 = option53.clone();
        boolean boolean60 = option53.isRequired();
        java.lang.Object obj61 = commandLine36.getParsedOptionValue(option53);
        int int62 = option53.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder63 = builder0.addOption(option53);
        org.apache.commons.cli.CommandLine.Builder builder65 = builder0.addArg("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.lang.String str42 = optionGroup40.getSelected();
        boolean boolean43 = optionGroup40.isRequired();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        boolean boolean51 = option48.equals((java.lang.Object) 0);
        boolean boolean52 = option48.hasLongOpt();
        option48.setLongOpt("");
        option48.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException57 = new org.apache.commons.cli.AlreadySelectedException(optionGroup40, option48);
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj63 = option62.getType();
        boolean boolean65 = option62.equals((java.lang.Object) 0);
        option62.setValueSeparator(' ');
        optionGroup40.setSelected(option62);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj75 = option74.getType();
        boolean boolean77 = option74.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options78 = options69.addOption(option74);
        java.lang.String str80 = option74.getValue("hi!");
        java.util.List<java.lang.String> strList81 = option74.getValuesList();
        int int82 = option74.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder83 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine84 = builder83.build();
        org.apache.commons.cli.CommandLine commandLine85 = builder83.build();
        org.apache.commons.cli.CommandLine.Builder builder87 = builder83.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean88 = option74.equals((java.lang.Object) builder87);
        org.apache.commons.cli.OptionGroup optionGroup89 = optionGroup40.addOption(option74);
        java.lang.String str90 = optionGroup89.getSelected();
        org.apache.commons.cli.Options options91 = options3.addOptionGroup(optionGroup89);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(optionGroup89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(options91);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        java.lang.String str21 = commandLine10.getOptionValue("", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str23 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str21, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        java.lang.String str55 = option53.getArgName();
        boolean boolean56 = option53.hasArgName();
        boolean boolean57 = option53.hasArg();
        option53.setOptionalArg(false);
        java.lang.String str60 = option53.getValue();
        java.lang.String str62 = option53.getValue((int) '4');
        boolean boolean63 = option53.hasOptionalArg();
        java.lang.String[] strArray64 = commandLine10.getOptionValues(option53);
        boolean boolean65 = option53.hasValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.option("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        org.apache.commons.cli.Option.Builder builder10 = builder8.required(true);
        org.apache.commons.cli.Option.Builder builder12 = builder8.numberOfArgs(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        java.util.List<java.lang.String> strList13 = commandLine10.getArgList();
        org.apache.commons.cli.DefaultParser defaultParser15 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser16 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        org.apache.commons.cli.DefaultParser defaultParser27 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser27.parse(options28, strArray35, properties36);
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser16.parse(options17, strArray35);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine43 = defaultParser15.parse(options17, strArray41, false);
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj50 = option49.getType();
        boolean boolean52 = option49.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options53 = options44.addOption(option49);
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options55 = options53.addOptionGroup(optionGroup54);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection56 = options55.getOptions();
        java.util.List<java.lang.String> strList58 = options55.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = defaultParser15.parse(options55, strArray59);
        org.apache.commons.cli.DefaultParser defaultParser61 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray69 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties70 = null;
        org.apache.commons.cli.CommandLine commandLine71 = defaultParser61.parse(options62, strArray69, properties70);
        java.util.List<java.lang.String> strList72 = commandLine71.getArgList();
        java.lang.String str75 = commandLine71.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean77 = commandLine71.hasOption('4');
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj83 = option82.getType();
        java.lang.String str84 = option82.getArgName();
        boolean boolean85 = option82.hasArgName();
        boolean boolean86 = option82.hasArg();
        option82.setOptionalArg(false);
        java.lang.String str89 = option82.getValue();
        java.lang.String str91 = option82.getValue((int) '4');
        boolean boolean92 = option82.hasOptionalArg();
        java.lang.String str94 = commandLine71.getOptionValue(option82, "");
        int int95 = option82.getArgs();
        org.apache.commons.cli.Options options96 = options55.addOption(option82);
        java.lang.String str97 = commandLine10.getOptionValue(option82);
        java.lang.String str99 = option82.getValue("[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(optionCollection56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str75, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "class java.lang.String");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str99, "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        boolean boolean14 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options20 = options9.addOption(option19);
        boolean boolean22 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list23 = options9.getRequiredOptions();
        org.apache.commons.cli.Options options26 = options9.addOption("", "[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(options26);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = optionGroup10.getOptions();
        boolean boolean13 = optionGroup10.isRequired();
        java.util.Collection<java.lang.String> strCollection14 = optionGroup10.getNames();
        java.lang.String str15 = optionGroup10.getSelected();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strCollection14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        boolean boolean15 = option12.equals((java.lang.Object) 0);
        option12.setArgName("");
        java.lang.String[] strArray18 = option12.getValues();
        option12.setArgs(0);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException21 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option12);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection22 = optionGroup0.getOptions();
        java.lang.String str23 = optionGroup0.getSelected();
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        java.lang.String str36 = commandLine34.getOptionValue("hi!");
        java.lang.Object obj38 = commandLine34.getParsedOptionValue("");
        java.lang.String[] strArray40 = commandLine34.getOptionValues('4');
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        boolean boolean49 = option46.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options50 = options41.addOption(option46);
        java.lang.String str52 = option46.getValue("hi!");
        java.util.List<java.lang.String> strList53 = option46.getValuesList();
        int int54 = option46.getArgs();
        java.lang.String str56 = commandLine34.getOptionValue(option46, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        java.lang.String str63 = option61.getArgName();
        java.lang.String str64 = option61.getValue();
        option61.setValueSeparator(' ');
        java.util.Properties properties67 = commandLine34.getOptionProperties(option61);
        org.apache.commons.cli.OptionGroup optionGroup68 = optionGroup0.addOption(option61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(optionCollection22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str56, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(optionGroup68);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setArgs(0);
        java.lang.String[] strArray13 = option4.getValues();
        java.lang.String[] strArray14 = option4.getValues();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(strArray14);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection42 = options41.getOptions();
        java.util.List<java.lang.String> strList44 = options41.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser1.parse(options41, strArray45);
        java.lang.String[] strArray47 = commandLine46.getArgs();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionCollection42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str21 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        java.lang.String str54 = commandLine32.getOptionValue(option44, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option44.setRequired(true);
        java.lang.String[] strArray57 = commandLine10.getOptionValues(option44);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = option44.addValue("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str54, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(strArray57);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        boolean boolean5 = options3.hasShortOption("[]");
        boolean boolean7 = options3.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser10 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser21 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser21.parse(options22, strArray29, properties30);
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser10.parse(options11, strArray29);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser9.parse(options11, strArray35, false);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj44 = option43.getType();
        boolean boolean46 = option43.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options47 = options38.addOption(option43);
        java.lang.String str49 = option43.getValue("hi!");
        java.util.List<java.lang.String> strList50 = option43.getValuesList();
        int int51 = option43.getArgs();
        java.lang.String[] strArray52 = commandLine37.getOptionValues(option43);
        org.apache.commons.cli.OptionGroup optionGroup53 = options3.getOptionGroup(option43);
        java.lang.String[] strArray54 = commandLine2.getOptionValues(option43);
        java.lang.String str55 = option43.getDescription();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List<java.lang.String> strList37 = options21.getMatchingOptions("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String str44 = option42.getArgName();
        boolean boolean45 = option42.hasArgName();
        boolean boolean46 = option42.hasOptionalArg();
        option42.setDescription("[ option:  [- ]  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Options options49 = options21.addOption(option42);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options49);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        java.lang.String str8 = option6.getArgName();
        option6.setValueSeparator('#');
        optionGroup0.setSelected(option6);
        boolean boolean12 = option6.hasLongOpt();
        java.lang.String str13 = option6.getLongOpt();
        boolean boolean14 = option6.hasArgs();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.longOpt("");
        org.apache.commons.cli.Option.Builder builder6 = builder5.hasArg();
        org.apache.commons.cli.Option.Builder builder8 = builder6.valueSeparator('#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        boolean boolean25 = option22.hasArg();
        java.lang.String str26 = option22.getDescription();
        boolean boolean27 = option22.hasOptionalArg();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        org.apache.commons.cli.DefaultParser defaultParser76 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray84 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = defaultParser76.parse(options77, strArray84, properties85);
        org.apache.commons.cli.Option option91 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj92 = option91.getType();
        java.lang.String[] strArray93 = commandLine86.getOptionValues(option91);
        org.apache.commons.cli.OptionGroup optionGroup94 = options20.getOptionGroup(option91);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "class java.lang.String");
        org.junit.Assert.assertNull(strArray93);
        org.junit.Assert.assertNull(optionGroup94);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str52 = commandLine47.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup53 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str54 = optionGroup53.getSelected();
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj60 = option59.getType();
        java.lang.String str61 = option59.getArgName();
        option59.setValueSeparator('#');
        optionGroup53.setSelected(option59);
        boolean boolean65 = option59.hasLongOpt();
        boolean boolean66 = commandLine47.hasOption(option59);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj73 = option72.getType();
        boolean boolean75 = option72.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options76 = options67.addOption(option72);
        org.apache.commons.cli.OptionGroup optionGroup77 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options78 = options76.addOptionGroup(optionGroup77);
        java.lang.String str79 = optionGroup77.getSelected();
        boolean boolean80 = optionGroup77.isRequired();
        java.lang.String str81 = optionGroup77.toString();
        java.lang.String str82 = optionGroup77.getSelected();
        optionGroup77.setRequired(false);
        org.apache.commons.cli.Option option89 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj90 = option89.getType();
        java.lang.String str91 = option89.getArgName();
        java.lang.String str92 = option89.getLongOpt();
        java.lang.Object obj93 = option89.getType();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException94 = new org.apache.commons.cli.AlreadySelectedException(optionGroup77, option89);
        boolean boolean95 = commandLine47.hasOption(option89);
        boolean boolean96 = option89.hasOptionalArg();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class java.lang.String");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[]" + "'", str81, "[]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "class java.lang.String");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertEquals(obj93.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj93), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj93), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        java.lang.String str9 = option4.getDescription();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str4 = option3.getArgName();
        int int5 = option3.getArgs();
        boolean boolean6 = option3.hasArg();
        option3.setArgs(100);
        java.lang.Object obj9 = null;
        boolean boolean10 = option3.equals(obj9);
        java.lang.Object obj11 = option3.clone();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "[ option:  [ARG...] :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "[ option:  [ARG...] :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "[ option:  [ARG...] :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        java.lang.String str13 = options10.toString();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        java.lang.String str20 = option18.getArgName();
        boolean boolean21 = option18.hasArgName();
        boolean boolean22 = option18.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup23 = options10.getOptionGroup(option18);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser0.parse(options10, strArray32, true);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection37 = options10.getOptions();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str13, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(optionCollection37);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("");
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArgs();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder3.longOpt("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option.Builder builder9 = builder3.valueSeparator('a');
        org.apache.commons.cli.Option.Builder builder11 = builder9.desc("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        java.lang.String str42 = option31.getLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        java.lang.String str22 = options21.toString();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection23 = options21.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(optionCollection23);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.Options options18 = options6.addOption("", "hi!");
        boolean boolean20 = options18.hasShortOption("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean22 = options18.hasOption("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.DefaultParser defaultParser23 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser23.parse(options24, strArray31, properties32);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser5.parse(options18, strArray31, false);
        java.lang.Class<?> wildcardClass36 = strArray31.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        option27.setValueSeparator(' ');
        java.lang.String str33 = option27.getArgName();
        java.lang.Object obj34 = option27.clone();
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option27);
        java.lang.Object obj36 = option27.clone();
        boolean boolean37 = option27.hasArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        boolean boolean33 = option21.hasOptionalArg();
        option21.setArgName("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException3 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException5 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup6 = alreadySelectedException5.getOptionGroup();
        missingOptionException3.addSuppressed((java.lang.Throwable) alreadySelectedException5);
        alreadySelectedException1.addSuppressed((java.lang.Throwable) missingOptionException3);
        org.apache.commons.cli.OptionGroup optionGroup9 = alreadySelectedException1.getOptionGroup();
        org.apache.commons.cli.MissingOptionException missingOptionException11 = new org.apache.commons.cli.MissingOptionException("hi!");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException13 = new org.apache.commons.cli.UnrecognizedOptionException("");
        java.lang.String str14 = unrecognizedOptionException13.getOption();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException16 = new org.apache.commons.cli.AlreadySelectedException("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        unrecognizedOptionException13.addSuppressed((java.lang.Throwable) alreadySelectedException16);
        missingOptionException11.addSuppressed((java.lang.Throwable) unrecognizedOptionException13);
        alreadySelectedException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException13);
        org.junit.Assert.assertNull(optionGroup6);
        org.junit.Assert.assertNull(optionGroup9);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option option17 = null;
        java.lang.String[] strArray18 = commandLine10.getOptionValues(option17);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.String[] strArray20 = commandLine10.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options9 = options0.addOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "[]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = optionGroup10.getOptions();
        boolean boolean13 = optionGroup10.isRequired();
        java.util.Collection<java.lang.String> strCollection14 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection15 = optionGroup10.getNames();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strCollection14);
        org.junit.Assert.assertNotNull(strCollection15);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        java.lang.String str46 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
        java.util.List<java.lang.String> strList47 = commandLine10.getArgList();
        java.util.List<java.lang.String> strList48 = commandLine10.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList48);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "org.apache.commons.cli.AlreadySelectedException: ", false, "[ option:  [- ]  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder5.required(true);
        org.apache.commons.cli.Option.Builder builder10 = builder5.hasArgs();
        org.apache.commons.cli.Option.Builder builder12 = builder10.desc("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder14 = builder10.option("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        boolean boolean36 = commandLine34.hasOption("hi!");
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        java.lang.String str43 = option41.getArgName();
        option41.setValueSeparator('#');
        java.lang.String[] strArray46 = commandLine34.getOptionValues(option41);
        boolean boolean47 = commandLine22.hasOption(option41);
        java.lang.String str50 = commandLine22.getOptionValue("[ option:  hi!  ::  :: class java.lang.String ]", "[- ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[- ]" + "'", str50, "[- ]");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        boolean boolean5 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        java.lang.String str12 = option10.getArgName();
        java.util.List<java.lang.String> strList13 = option10.getValuesList();
        option10.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup0.setSelected(option10);
        java.lang.Object obj17 = option10.getType();
        java.lang.String str18 = option10.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = option10.addValue("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str18, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException3 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException3.getOptionGroup();
        missingOptionException1.addSuppressed((java.lang.Throwable) alreadySelectedException3);
        org.apache.commons.cli.Option option6 = alreadySelectedException3.getOption();
        java.lang.String str7 = alreadySelectedException3.toString();
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(option6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.AlreadySelectedException: " + "'", str7, "org.apache.commons.cli.AlreadySelectedException: ");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.OptionGroup optionGroup16 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options17 = options15.addOptionGroup(optionGroup16);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        boolean boolean26 = option22.hasLongOpt();
        org.apache.commons.cli.Options options27 = options15.addOption(option22);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        java.lang.String str40 = commandLine38.getOptionValue("hi!");
        java.lang.Object obj42 = commandLine38.getParsedOptionValue("");
        java.lang.String[] strArray44 = commandLine38.getOptionValues('4');
        java.lang.String[] strArray45 = commandLine38.getArgs();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.util.Properties properties52 = commandLine38.getOptionProperties(option50);
        org.apache.commons.cli.Options options53 = options15.addOption(option50);
        option50.setLongOpt("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj56 = commandLine5.getParsedOptionValue(option50);
        java.lang.Object obj57 = option50.getType();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "class java.lang.String");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder3.desc("");
        org.apache.commons.cli.Option.Builder builder9 = builder3.longOpt("[ option:  [- ]  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj58 = option57.getType();
        java.lang.String str59 = option57.getArgName();
        java.lang.String str60 = option57.getValue();
        java.lang.String[] strArray61 = commandLine52.getOptionValues(option57);
        char char62 = option57.getValueSeparator();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class java.lang.String");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        boolean boolean33 = option21.hasOptionalArg();
        option21.setRequired(false);
        option21.setRequired(true);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.isRequired();
        java.lang.String str12 = option4.getValue();
        java.lang.String str13 = option4.getValue();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str34 = commandLine10.getOptionValue(' ');
        java.lang.String str36 = commandLine10.getOptionValue('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        boolean boolean43 = option40.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options44 = options35.addOption(option40);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = defaultParser34.parse(options35, strArray53);
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties62 = commandLine56.getOptionProperties(option61);
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.lang.String str69 = option67.getArgName();
        java.lang.String str71 = commandLine56.getOptionValue(option67, "");
        java.lang.String str72 = option67.getValue();
        org.apache.commons.cli.CommandLine.Builder builder73 = builder4.addOption(option67);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        java.lang.String str46 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
        java.util.Properties properties48 = commandLine10.getOptionProperties("");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor49 = commandLine10.iterator();
        org.apache.commons.cli.Option[] optionArray50 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(optionItor49);
        org.junit.Assert.assertNotNull(optionArray50);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder4.build();
        org.apache.commons.cli.CommandLine.Builder builder7 = builder4.addArg("hi!");
        org.apache.commons.cli.CommandLine.Builder builder9 = builder4.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine10 = builder9.build();
        java.lang.Object obj12 = commandLine10.getParsedOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        java.util.List list25 = options1.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options28 = options1.addOption("hi!", "[ option:  [- ]  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder0.setAllowPartialMatching(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        org.apache.commons.cli.OptionGroup optionGroup15 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str16 = optionGroup15.getSelected();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        optionGroup15.setSelected(option21);
        boolean boolean27 = option21.hasLongOpt();
        boolean boolean28 = commandLine10.hasOption(option21);
        java.util.Properties properties30 = commandLine10.getOptionProperties("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Properties properties32 = commandLine10.getOptionProperties("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(properties32);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        boolean boolean40 = options38.hasShortOption("[]");
        boolean boolean42 = options38.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser43 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray51 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = defaultParser43.parse(options44, strArray51, properties52);
        boolean boolean55 = commandLine53.hasOption("hi!");
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj61 = option60.getType();
        java.lang.String str62 = option60.getArgName();
        option60.setValueSeparator('#');
        java.lang.String[] strArray65 = commandLine53.getOptionValues(option60);
        java.lang.Object obj67 = commandLine53.getParsedOptionValue('4');
        boolean boolean69 = commandLine53.hasOption(' ');
        java.lang.String[] strArray70 = commandLine53.getArgs();
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser0.parse(options38, strArray70, false);
        java.lang.Object obj74 = commandLine72.getParsedOptionValue('a');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "class java.lang.String");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder7 = builder0.addArg("[ option:    ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine8 = builder0.build();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(commandLine8);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "[- ]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = commandLine10.getOptionValue(option46, "hi!");
        java.util.Properties properties52 = commandLine10.getOptionProperties("hi!");
        java.lang.String str54 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        boolean boolean11 = option4.isRequired();
        option4.setArgs((int) (short) 100);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray35 = option27.getValues();
        org.apache.commons.cli.Options options36 = options1.addOption(option27);
        org.apache.commons.cli.Option option38 = options36.getOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List<java.lang.String> strList40 = options36.getMatchingOptions("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean42 = options36.hasLongOption("[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.MissingOptionException missingOptionException3 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException5 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup6 = alreadySelectedException5.getOptionGroup();
        missingOptionException3.addSuppressed((java.lang.Throwable) alreadySelectedException5);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException9 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup10 = alreadySelectedException9.getOptionGroup();
        org.apache.commons.cli.Option option11 = alreadySelectedException9.getOption();
        alreadySelectedException5.addSuppressed((java.lang.Throwable) alreadySelectedException9);
        alreadySelectedException1.addSuppressed((java.lang.Throwable) alreadySelectedException9);
        org.apache.commons.cli.OptionGroup optionGroup14 = alreadySelectedException9.getOptionGroup();
        org.apache.commons.cli.Option option15 = alreadySelectedException9.getOption();
        org.junit.Assert.assertNull(optionGroup6);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertNull(option11);
        org.junit.Assert.assertNull(optionGroup14);
        org.junit.Assert.assertNull(option15);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder7.hasArg(false);
        org.apache.commons.cli.Option.Builder builder10 = builder7.hasArg();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = options11.getOptions();
        org.apache.commons.cli.Option option14 = options11.getOption("[ option:  hi!  ::  :: class java.lang.String ]");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection15 = options11.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNull(option14);
        org.junit.Assert.assertNotNull(optionCollection15);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        org.apache.commons.cli.OptionGroup optionGroup22 = new org.apache.commons.cli.OptionGroup();
        boolean boolean23 = optionGroup22.isRequired();
        java.lang.String str24 = optionGroup22.getSelected();
        optionGroup22.setRequired(false);
        org.apache.commons.cli.Options options27 = options21.addOptionGroup(optionGroup22);
        boolean boolean29 = options27.hasLongOption("[- ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.Object obj13 = option4.clone();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[ option:  org.apache.commons.cli.MissingOptionException: Missing required options:   ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[ option:  org.apache.commons.cli.MissingOptionException: Missing required options:   ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[ option:  org.apache.commons.cli.MissingOptionException: Missing required options:   ::  :: class java.lang.String ]");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties28 = commandLine22.getOptionProperties(option27);
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        boolean boolean36 = option33.equals((java.lang.Object) 0);
        option33.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option33.setArgs((-2));
        option33.setDescription("hi!");
        java.util.Properties properties43 = commandLine22.getOptionProperties(option33);
        java.lang.String[] strArray45 = commandLine22.getOptionValues('#');
        java.lang.String[] strArray46 = commandLine22.getArgs();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.String str3 = unrecognizedOptionException1.getOption();
        java.lang.Throwable[] throwableArray4 = unrecognizedOptionException1.getSuppressed();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getOpt();
        java.lang.String str11 = option4.getArgName();
        boolean boolean12 = option4.hasArgName();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        java.lang.String str42 = option31.toString();
        option31.setLongOpt("[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str42, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        boolean boolean14 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = options9.hasOption("org.apache.commons.cli.AlreadySelectedException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options21 = options9.addRequiredOption("[ option:    ::  :: class java.lang.String ]", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "org.apache.commons.cli.ParseException: [ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:    ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str14 = option4.getValue((int) (short) 0);
        option4.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean17 = option4.hasArgs();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        boolean boolean35 = option32.equals((java.lang.Object) 0);
        option32.setValueSeparator(' ');
        optionGroup10.setSelected(option32);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder53 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine54 = builder53.build();
        org.apache.commons.cli.CommandLine commandLine55 = builder53.build();
        org.apache.commons.cli.CommandLine.Builder builder57 = builder53.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean58 = option44.equals((java.lang.Object) builder57);
        org.apache.commons.cli.OptionGroup optionGroup59 = optionGroup10.addOption(option44);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection60 = optionGroup59.getOptions();
        boolean boolean61 = optionGroup59.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(optionGroup59);
        org.junit.Assert.assertNotNull(optionCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        org.apache.commons.cli.DefaultParser defaultParser54 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser55 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        boolean boolean64 = option61.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options65 = options56.addOption(option61);
        org.apache.commons.cli.DefaultParser defaultParser66 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray74 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = defaultParser66.parse(options67, strArray74, properties75);
        org.apache.commons.cli.CommandLine commandLine77 = defaultParser55.parse(options56, strArray74);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine82 = defaultParser54.parse(options56, strArray80, false);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine85 = defaultParser1.parse(options56, strArray83, true);
        java.util.List list86 = options56.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(list86);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        option28.setValueSeparator('#');
        boolean boolean33 = option28.hasArgName();
        java.lang.String str35 = option28.getValue(100);
        boolean boolean36 = commandLine22.hasOption(option28);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean26 = options1.hasShortOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list27 = options1.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = optionGroup10.getOptions();
        java.lang.String str13 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.OptionGroup optionGroup24 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options25 = options23.addOptionGroup(optionGroup24);
        java.lang.String str26 = options23.toString();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        java.lang.String str33 = option31.getArgName();
        boolean boolean34 = option31.hasArgName();
        boolean boolean35 = option31.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup36 = options23.getOptionGroup(option31);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean42 = option41.hasValueSeparator();
        org.apache.commons.cli.Options options43 = options23.addOption(option41);
        java.lang.String str45 = option41.getValue((int) 'a');
        java.lang.String str46 = option41.getValue();
        option41.setValueSeparator('#');
        optionGroup10.setSelected(option41);
        java.lang.String str51 = option41.getValue((int) (short) 10);
        java.lang.String str52 = option41.getLongOpt();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str26, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        boolean boolean23 = options21.hasShortOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean25 = options21.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        option4.setValueSeparator('4');
        java.lang.String str10 = option4.getArgName();
        int int11 = option4.getArgs();
        java.lang.Object obj12 = option4.clone();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        java.lang.String str27 = commandLine10.getOptionValue("[]", "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]" + "'", str27, "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection3 = optionGroup0.getOptions();
        java.lang.String str4 = optionGroup0.toString();
        org.apache.commons.cli.Option.Builder builder5 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("[]");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg();
        org.apache.commons.cli.Option.Builder builder10 = builder5.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder12 = builder10.option("");
        org.apache.commons.cli.Option option13 = builder10.build();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException14 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option13);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(optionCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(option13);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        org.apache.commons.cli.OptionGroup optionGroup15 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str16 = optionGroup15.getSelected();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        optionGroup15.setSelected(option21);
        boolean boolean27 = option21.hasLongOpt();
        boolean boolean28 = commandLine10.hasOption(option21);
        java.lang.String str29 = option21.getOpt();
        int int30 = option21.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        java.lang.String str46 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
        java.lang.Object obj48 = commandLine10.getOptionObject('a');
        java.lang.String[] strArray50 = commandLine10.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(strArray50);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        boolean boolean49 = options9.hasShortOption("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options53 = options9.addOption("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "[ option:  [- ]  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        option18.setArgs(100);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder0.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder5 = builder3.longOpt("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        org.apache.commons.cli.DefaultParser defaultParser19 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser19.parse(options20, strArray27, properties28);
        java.lang.String str31 = commandLine29.getOptionValue("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean37 = option36.hasValueSeparator();
        boolean boolean38 = commandLine29.hasOption(option36);
        option36.setOptionalArg(true);
        java.lang.String str41 = option36.getLongOpt();
        java.lang.String str42 = commandLine10.getOptionValue(option36);
        java.util.List<java.lang.String> strList43 = commandLine10.getArgList();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.lang.String str51 = option48.getValue(10);
        java.lang.String str53 = option48.getValue((int) '#');
        boolean boolean54 = option48.hasArgs();
        option48.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str58 = option48.getValue((int) (short) 0);
        boolean boolean59 = option48.isRequired();
        option48.setValueSeparator('a');
        boolean boolean62 = option48.hasValueSeparator();
        java.lang.Object obj63 = commandLine10.getParsedOptionValue(option48);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getValue();
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getLongOpt();
        java.lang.Object obj11 = option4.clone();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser1 = builder0.build();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        org.apache.commons.cli.OptionGroup optionGroup12 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options13 = options11.addOptionGroup(optionGroup12);
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        org.apache.commons.cli.Options options23 = options11.addOption(option18);
        boolean boolean25 = options11.hasOption("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        boolean boolean37 = option34.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options38 = options29.addOption(option34);
        org.apache.commons.cli.DefaultParser defaultParser39 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = defaultParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.CommandLine commandLine50 = defaultParser28.parse(options29, strArray47);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser26.parse(options27, strArray47, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj59 = option58.getType();
        boolean boolean61 = option58.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options62 = options53.addOption(option58);
        boolean boolean64 = options62.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str65 = options62.toString();
        org.apache.commons.cli.DefaultParser defaultParser67 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser68 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj75 = option74.getType();
        boolean boolean77 = option74.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options78 = options69.addOption(option74);
        org.apache.commons.cli.DefaultParser defaultParser79 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray87 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = defaultParser79.parse(options80, strArray87, properties88);
        org.apache.commons.cli.CommandLine commandLine90 = defaultParser68.parse(options69, strArray87);
        java.lang.String[] strArray93 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine95 = defaultParser67.parse(options69, strArray93, false);
        org.apache.commons.cli.CommandLine commandLine96 = defaultParser26.parse(options62, strArray93);
        org.apache.commons.cli.CommandLine commandLine98 = defaultParser1.parse(options11, strArray93, false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaultParser1);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str65, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNotNull(commandLine98);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<java.lang.String> strCollection12 = optionGroup10.getNames();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(strCollection12);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        option6.setArgName("");
        java.lang.String[] strArray12 = option6.getValues();
        boolean boolean13 = option6.hasArgName();
        java.lang.String str14 = option6.getOpt();
        optionGroup0.setSelected(option6);
        boolean boolean17 = option6.equals((java.lang.Object) 100);
        boolean boolean18 = option6.hasValueSeparator();
        java.lang.Object obj19 = option6.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        boolean boolean54 = options52.hasLongOption("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser55 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        boolean boolean64 = option61.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options65 = options56.addOption(option61);
        org.apache.commons.cli.DefaultParser defaultParser66 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray74 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = defaultParser66.parse(options67, strArray74, properties75);
        org.apache.commons.cli.CommandLine commandLine77 = defaultParser55.parse(options56, strArray74);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties83 = commandLine77.getOptionProperties(option82);
        org.apache.commons.cli.Option option88 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj89 = option88.getType();
        java.lang.String str90 = option88.getArgName();
        java.lang.String str92 = commandLine77.getOptionValue(option88, "");
        option88.setArgs(0);
        java.lang.String str95 = option88.getArgName();
        int int96 = option88.getArgs();
        org.apache.commons.cli.Options options97 = options52.addOption(option88);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "class java.lang.String");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(options97);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.DefaultParser.Builder builder7 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder9 = builder5.numberOfArgs(0);
        org.apache.commons.cli.Option.Builder builder11 = builder5.argName("[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        boolean boolean11 = option4.isRequired();
        java.lang.String str12 = option4.getOpt();
        java.lang.String str13 = option4.getOpt();
        boolean boolean14 = option4.hasArgName();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        boolean boolean26 = commandLine10.hasOption(' ');
        org.apache.commons.cli.OptionGroup optionGroup27 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str28 = optionGroup27.getSelected();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        option33.setValueSeparator('#');
        optionGroup27.setSelected(option33);
        boolean boolean39 = option33.hasArgs();
        boolean boolean40 = commandLine10.hasOption(option33);
        boolean boolean42 = commandLine10.hasOption('\000');
        java.lang.String[] strArray44 = commandLine10.getOptionValues('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strArray44);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        boolean boolean26 = commandLine10.hasOption(' ');
        org.apache.commons.cli.OptionGroup optionGroup27 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str28 = optionGroup27.getSelected();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        option33.setValueSeparator('#');
        optionGroup27.setSelected(option33);
        boolean boolean39 = option33.hasArgs();
        boolean boolean40 = commandLine10.hasOption(option33);
        boolean boolean41 = option33.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        char char20 = option17.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException37 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException39 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException41 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup42 = alreadySelectedException41.getOptionGroup();
        missingOptionException39.addSuppressed((java.lang.Throwable) alreadySelectedException41);
        alreadySelectedException37.addSuppressed((java.lang.Throwable) missingOptionException39);
        boolean boolean45 = option32.equals((java.lang.Object) alreadySelectedException37);
        boolean boolean46 = option32.hasArgName();
        boolean boolean47 = option32.hasArgName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        java.util.List<java.lang.String> strList13 = commandLine10.getArgList();
        java.lang.Object obj15 = commandLine10.getParsedOptionValue('a');
        java.lang.Object obj17 = commandLine10.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option[] optionArray18 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(optionArray18);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder4.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder10 = builder4.setAllowPartialMatching(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        boolean boolean5 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        java.lang.String str12 = option10.getArgName();
        java.util.List<java.lang.String> strList13 = option10.getValuesList();
        option10.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup0.setSelected(option10);
        java.lang.Object obj17 = option10.getType();
        java.lang.String str18 = option10.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser6 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj14 = option13.getType();
        boolean boolean16 = option13.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options17 = options8.addOption(option13);
        org.apache.commons.cli.DefaultParser defaultParser18 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = defaultParser18.parse(options19, strArray26, properties27);
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser7.parse(options8, strArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser6.parse(options8, strArray32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        boolean boolean43 = option40.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options44 = options35.addOption(option40);
        java.lang.String str46 = option40.getValue("hi!");
        java.util.List<java.lang.String> strList47 = option40.getValuesList();
        int int48 = option40.getArgs();
        java.lang.String[] strArray49 = commandLine34.getOptionValues(option40);
        org.apache.commons.cli.OptionGroup optionGroup50 = options0.getOptionGroup(option40);
        int int51 = option40.getArgs();
        java.lang.Object obj52 = option40.getType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class java.lang.String");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        option27.setValueSeparator(' ');
        java.lang.String str33 = option27.getArgName();
        java.lang.Object obj34 = option27.clone();
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option27);
        java.lang.Object obj36 = option27.clone();
        java.lang.String str37 = option27.getLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.util.List<java.lang.String> strList23 = commandLine10.getArgList();
        java.lang.Object obj25 = commandLine10.getParsedOptionValue('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        java.lang.Object obj42 = commandLine37.getOptionObject("org.apache.commons.cli.ParseException: []");
        java.lang.Object obj44 = commandLine37.getOptionObject('#');
        java.lang.Object obj46 = commandLine37.getOptionObject(' ');
        java.lang.String str49 = commandLine37.getOptionValue('4', "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str49, "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.ParseException: [ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = optionGroup10.getOptions();
        boolean boolean13 = optionGroup10.isRequired();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection14 = optionGroup10.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(optionCollection14);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str21 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        java.lang.String str54 = commandLine32.getOptionValue(option44, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option44.setRequired(true);
        java.lang.String[] strArray57 = commandLine10.getOptionValues(option44);
        java.lang.String str60 = commandLine10.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str54, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str60, "org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        java.util.List<java.lang.String> strList10 = option4.getValuesList();
        option4.setArgs((int) '\000');
        java.lang.Object obj13 = option4.getType();
        java.lang.String str14 = option4.getOpt();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.Options options18 = options6.addOption("", "hi!");
        boolean boolean20 = options18.hasShortOption("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean22 = options18.hasOption("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.DefaultParser defaultParser23 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser23.parse(options24, strArray31, properties32);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser5.parse(options18, strArray31, false);
        org.apache.commons.cli.Option.Builder builder36 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder38 = builder36.argName("[]");
        org.apache.commons.cli.Option.Builder builder39 = builder36.hasArg();
        org.apache.commons.cli.Option.Builder builder41 = builder36.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder43 = builder41.option("");
        org.apache.commons.cli.Option.Builder builder45 = builder43.desc("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.Option option46 = builder45.build();
        org.apache.commons.cli.OptionGroup optionGroup47 = options18.getOptionGroup(option46);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertNull(optionGroup47);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        java.lang.String str41 = option38.getValue(10);
        java.lang.String str43 = option38.getValue((int) '#');
        boolean boolean44 = option38.hasArg();
        option38.setValueSeparator('a');
        boolean boolean47 = commandLine33.hasOption(option38);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        java.lang.String str55 = option52.getValue(10);
        java.lang.String str57 = option52.getValue((int) '#');
        boolean boolean58 = option52.hasArgs();
        option52.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str61 = option52.getLongOpt();
        option52.setLongOpt("[- ]");
        java.util.Properties properties64 = commandLine33.getOptionProperties(option52);
        java.lang.String str65 = option52.toString();
        char char66 = option52.getValueSeparator();
        option52.setLongOpt("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str61, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ option:  [- ]  ::  :: class java.lang.String ]" + "'", str65, "[ option:  [- ]  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + char66 + "' != '" + '\000' + "'", char66 == '\000');
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection42 = options41.getOptions();
        java.util.List<java.lang.String> strList44 = options41.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser1.parse(options41, strArray45);
        java.util.List<java.lang.String> strList48 = options41.getMatchingOptions("");
        boolean boolean50 = options41.hasShortOption("");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionCollection42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        option6.setArgName("");
        java.lang.String[] strArray12 = option6.getValues();
        boolean boolean13 = option6.hasArgName();
        java.lang.String str14 = option6.getOpt();
        optionGroup0.setSelected(option6);
        java.lang.String str16 = optionGroup0.toString();
        optionGroup0.setRequired(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder6.required();
        org.apache.commons.cli.Option.Builder builder9 = builder7.desc("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option.Builder builder11 = builder9.numberOfArgs((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options35 = options26.addOption(option31);
        org.apache.commons.cli.DefaultParser defaultParser36 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser25.parse(options26, strArray44);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser25.parse(options69, strArray70, false);
        java.lang.Object obj74 = commandLine72.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str77 = commandLine72.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup78 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str79 = optionGroup78.getSelected();
        org.apache.commons.cli.Option option84 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj85 = option84.getType();
        java.lang.String str86 = option84.getArgName();
        option84.setValueSeparator('#');
        optionGroup78.setSelected(option84);
        boolean boolean90 = option84.hasLongOpt();
        boolean boolean91 = commandLine72.hasOption(option84);
        java.util.Properties properties92 = commandLine22.getOptionProperties(option84);
        java.lang.String str93 = option84.getLongOpt();
        boolean boolean94 = option84.hasArg();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "class java.lang.String");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        java.lang.Object obj43 = commandLine10.getParsedOptionValue("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        boolean boolean49 = option46.equals((java.lang.Object) 0);
        boolean boolean50 = option46.hasLongOpt();
        org.apache.commons.cli.Options options51 = options39.addOption(option46);
        java.lang.Object obj52 = option46.clone();
        boolean boolean53 = option46.isRequired();
        java.lang.Object obj54 = commandLine29.getParsedOptionValue(option46);
        java.lang.String str57 = commandLine29.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str60 = commandLine29.getOptionValue("org.apache.commons.cli.AlreadySelectedException: ", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser61 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        boolean boolean70 = option67.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options71 = options62.addOption(option67);
        org.apache.commons.cli.DefaultParser defaultParser72 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = defaultParser72.parse(options73, strArray80, properties81);
        org.apache.commons.cli.CommandLine commandLine83 = defaultParser61.parse(options62, strArray80);
        org.apache.commons.cli.Option option88 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties89 = commandLine83.getOptionProperties(option88);
        java.lang.String str90 = option88.getValue();
        java.lang.Object obj91 = option88.getType();
        boolean boolean92 = commandLine29.hasOption(option88);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str57, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str60, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(properties89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        java.lang.String str54 = commandLine52.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList55 = commandLine52.getArgList();
        java.lang.Object obj57 = commandLine52.getParsedOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str60 = commandLine52.getOptionValue('a', "");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder4 = builder2.hasArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.List<java.lang.String> strList49 = options9.getMatchingOptions("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options53 = options9.addOption("", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        boolean boolean59 = optionGroup54.isRequired();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        java.util.List<java.lang.String> strList67 = option64.getValuesList();
        option64.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup54.setSelected(option64);
        org.apache.commons.cli.Options options71 = options9.addOptionGroup(optionGroup54);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection72 = optionGroup54.getOptions();
        boolean boolean73 = optionGroup54.isRequired();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(optionCollection72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.util.List<java.lang.String> strList38 = commandLine37.getArgList();
        java.lang.Class<?> wildcardClass39 = strList38.getClass();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getLongOpt();
        option4.setOptionalArg(true);
        option4.setOptionalArg(true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option22.setRequired(true);
        option22.setValueSeparator(' ');
        option22.setRequired(true);
        java.lang.String str39 = option22.getLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        java.lang.String str55 = option53.getArgName();
        boolean boolean56 = option53.hasArgName();
        boolean boolean57 = option53.hasArg();
        option53.setOptionalArg(false);
        java.lang.String str60 = option53.getValue();
        java.lang.String str62 = option53.getValue((int) '4');
        boolean boolean63 = option53.hasOptionalArg();
        java.lang.String[] strArray64 = commandLine10.getOptionValues(option53);
        option53.setOptionalArg(true);
        java.lang.String str67 = option53.getDescription();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser1 = builder0.build();
        org.apache.commons.cli.DefaultParser defaultParser2 = builder0.build();
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser defaultParser7 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaultParser1);
        org.junit.Assert.assertNotNull(defaultParser2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaultParser7);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("hi!");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder6 = builder4.longOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder6.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[ option:    ::  :: class java.lang.String ]");
        org.apache.commons.cli.OptionGroup optionGroup2 = alreadySelectedException1.getOptionGroup();
        org.junit.Assert.assertNull(optionGroup2);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        java.lang.Object obj42 = commandLine37.getOptionObject("org.apache.commons.cli.ParseException: []");
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str47 = option46.getArgName();
        int int48 = option46.getArgs();
        boolean boolean49 = option46.hasArg();
        java.lang.String[] strArray50 = commandLine37.getOptionValues(option46);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(strArray50);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj56 = commandLine29.getOptionObject(' ');
        java.lang.String str59 = commandLine29.getOptionValue("hi!", "");
        org.apache.commons.cli.Option[] optionArray60 = commandLine29.getOptions();
        java.lang.String[] strArray61 = commandLine29.getArgs();
        java.lang.String str63 = commandLine29.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(optionArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        option4.setLongOpt("");
        boolean boolean10 = option4.hasArgs();
        java.util.List<java.lang.String> strList11 = option4.getValuesList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = option4.addValue("org.apache.commons.cli.ParseException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder8 = builder3.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder9 = builder3.hasArgs();
        org.apache.commons.cli.Option.Builder builder11 = builder3.optionalArg(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        boolean boolean5 = options3.hasShortOption("[]");
        boolean boolean7 = options3.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser10 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser21 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser21.parse(options22, strArray29, properties30);
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser10.parse(options11, strArray29);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser9.parse(options11, strArray35, false);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj44 = option43.getType();
        boolean boolean46 = option43.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options47 = options38.addOption(option43);
        java.lang.String str49 = option43.getValue("hi!");
        java.util.List<java.lang.String> strList50 = option43.getValuesList();
        int int51 = option43.getArgs();
        java.lang.String[] strArray52 = commandLine37.getOptionValues(option43);
        org.apache.commons.cli.OptionGroup optionGroup53 = options3.getOptionGroup(option43);
        java.lang.String[] strArray54 = commandLine2.getOptionValues(option43);
        java.lang.String str55 = option43.getValue();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray35 = option27.getValues();
        org.apache.commons.cli.Options options36 = options1.addOption(option27);
        char char37 = option27.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + char37 + "' != '" + '\000' + "'", char37 == '\000');
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        option3.setRequired(true);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        boolean boolean32 = option29.hasArgName();
        option29.setLongOpt("");
        boolean boolean35 = option29.hasArgs();
        java.lang.Object obj36 = option29.getType();
        java.lang.String str37 = commandLine10.getOptionValue(option29);
        java.lang.Object obj39 = commandLine10.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        java.lang.String str40 = commandLine38.getOptionValue("hi!");
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean46 = option45.hasValueSeparator();
        boolean boolean47 = commandLine38.hasOption(option45);
        org.apache.commons.cli.OptionGroup optionGroup48 = optionGroup10.addOption(option45);
        org.apache.commons.cli.Option.Builder builder49 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder50 = builder49.required();
        org.apache.commons.cli.Option.Builder builder51 = builder50.hasArg();
        org.apache.commons.cli.Option.Builder builder52 = builder50.required();
        org.apache.commons.cli.Option.Builder builder54 = builder50.longOpt("");
        org.apache.commons.cli.Option.Builder builder56 = builder54.desc("");
        org.apache.commons.cli.Option option57 = builder54.build();
        optionGroup48.setSelected(option57);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(optionGroup48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(option57);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder8 = builder3.longOpt("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option.Builder builder10 = builder8.argName("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder12 = builder8.option("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        java.lang.String str10 = option4.getValue((int) '4');
        option4.setOptionalArg(false);
        option4.setRequired(true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup2 = alreadySelectedException1.getOptionGroup();
        java.lang.Throwable[] throwableArray3 = alreadySelectedException1.getSuppressed();
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException1.getOptionGroup();
        org.junit.Assert.assertNull(optionGroup2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNull(optionGroup4);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        option16.setRequired(false);
        java.lang.String[] strArray24 = option16.getValues();
        option16.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        boolean boolean27 = option16.hasValueSeparator();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection3 = optionGroup0.getOptions();
        java.util.Collection<java.lang.String> strCollection4 = optionGroup0.getNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(optionCollection3);
        org.junit.Assert.assertNotNull(strCollection4);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder7.numberOfArgs((int) '\000');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        java.lang.String str37 = option34.getValue(10);
        java.lang.String str39 = option34.getValue((int) '#');
        boolean boolean40 = option34.hasArgs();
        option34.setRequired(true);
        java.lang.String str43 = option34.getArgName();
        java.lang.Object obj44 = option34.getType();
        java.lang.String str45 = commandLine29.getOptionValue(option34);
        java.util.List<java.lang.String> strList46 = option34.getValuesList();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str34 = commandLine10.getOptionValue(' ');
        java.lang.String str36 = commandLine10.getOptionValue(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray11 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine13 = defaultParser3.parse(options4, strArray11, properties12);
        java.util.List<java.lang.String> strList14 = commandLine13.getArgList();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        option19.setArgName("");
        java.lang.Object obj25 = commandLine13.getParsedOptionValue(option19);
        java.lang.String str26 = option19.toString();
        optionGroup0.setSelected(option19);
        java.lang.String str29 = option19.getValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option19.setValueSeparator('4');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str26, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str29, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        java.lang.String str13 = option7.getValue("hi!");
        int int14 = option7.getArgs();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException15 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option7);
        org.apache.commons.cli.OptionGroup optionGroup16 = alreadySelectedException15.getOptionGroup();
        boolean boolean17 = optionGroup16.isRequired();
        java.lang.String str18 = optionGroup16.getSelected();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(optionGroup16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection76 = options20.getOptions();
        org.apache.commons.cli.Options options79 = options20.addOption("", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(optionCollection76);
        org.junit.Assert.assertNotNull(options79);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        java.lang.Object obj9 = option4.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = option4.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]", "org.apache.commons.cli.UnrecognizedOptionException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        java.lang.String str11 = option4.getValue();
        java.lang.String str13 = option4.getValue((int) '4');
        boolean boolean14 = option4.hasOptionalArg();
        java.lang.String str15 = option4.getLongOpt();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        boolean boolean54 = options52.hasLongOption("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean56 = options52.hasOption("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties28 = commandLine22.getOptionProperties(option27);
        java.lang.Object obj30 = commandLine22.getParsedOptionValue("[]");
        java.lang.String str33 = commandLine22.getOptionValue("org.apache.commons.cli.ParseException: [ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: []" + "'", str33, "org.apache.commons.cli.UnrecognizedOptionException: []");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder6.required();
        org.apache.commons.cli.Option.Builder builder8 = builder6.valueSeparator();
        org.apache.commons.cli.Option.Builder builder9 = builder8.required();
        org.apache.commons.cli.Option.Builder builder11 = builder8.valueSeparator('a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException37 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException39 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException41 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup42 = alreadySelectedException41.getOptionGroup();
        missingOptionException39.addSuppressed((java.lang.Throwable) alreadySelectedException41);
        alreadySelectedException37.addSuppressed((java.lang.Throwable) missingOptionException39);
        boolean boolean45 = option32.equals((java.lang.Object) alreadySelectedException37);
        option32.setArgName("");
        boolean boolean48 = option32.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option[] optionArray55 = commandLine29.getOptions();
        java.lang.String[] strArray56 = commandLine29.getArgs();
        java.lang.String str58 = commandLine29.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List<java.lang.String> strList59 = commandLine29.getArgList();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(optionArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strList59);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray2 = alreadySelectedException1.getSuppressed();
        org.apache.commons.cli.OptionGroup optionGroup3 = alreadySelectedException1.getOptionGroup();
        org.apache.commons.cli.Option option4 = alreadySelectedException1.getOption();
        org.apache.commons.cli.OptionGroup optionGroup5 = alreadySelectedException1.getOptionGroup();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNull(option4);
        org.junit.Assert.assertNull(optionGroup5);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        java.lang.String str10 = option4.getDescription();
        java.lang.String str11 = option4.getValue();
        option4.setArgs((int) '#');
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        boolean boolean9 = option4.hasArgName();
        java.lang.String str11 = option4.getValue(100);
        option4.setOptionalArg(false);
        java.lang.String str14 = option4.toString();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str14, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder0.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder5 = builder0.option("[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("hi!");
        java.lang.Object obj26 = commandLine22.getParsedOptionValue("");
        java.lang.String[] strArray27 = commandLine22.getArgs();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strArray27);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:  [- ]  ::  :: class java.lang.String ]", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = options11.getOptions();
        java.util.List<java.lang.String> strList14 = options11.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        option19.setArgName("");
        java.lang.String[] strArray25 = option19.getValues();
        boolean boolean26 = option19.isRequired();
        java.lang.String str27 = option19.getValue();
        org.apache.commons.cli.OptionGroup optionGroup28 = options11.getOptionGroup(option19);
        option19.setOptionalArg(false);
        org.apache.commons.cli.DefaultParser defaultParser31 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj38 = option37.getType();
        boolean boolean40 = option37.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options41 = options32.addOption(option37);
        org.apache.commons.cli.DefaultParser defaultParser42 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser42.parse(options43, strArray50, properties51);
        org.apache.commons.cli.CommandLine commandLine53 = defaultParser31.parse(options32, strArray50);
        // The following exception was thrown during execution in test generation
        try {
            option19.setType((java.lang.Object) defaultParser31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.DefaultParser cannot be cast to class java.lang.Class (org.apache.commons.cli.DefaultParser is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(commandLine53);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg();
        org.apache.commons.cli.Option.Builder builder10 = builder8.numberOfArgs(0);
        org.apache.commons.cli.Option.Builder builder12 = builder8.optionalArg(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str26 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj28 = commandLine10.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str31 = commandLine10.getOptionValue(' ', "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str31, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder4.numberOfArgs((int) ' ');
        org.apache.commons.cli.Option.Builder builder7 = builder4.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException3 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException7 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup8 = alreadySelectedException7.getOptionGroup();
        missingOptionException5.addSuppressed((java.lang.Throwable) alreadySelectedException7);
        alreadySelectedException3.addSuppressed((java.lang.Throwable) missingOptionException5);
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException12 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Throwable[] throwableArray13 = unrecognizedOptionException12.getSuppressed();
        alreadySelectedException3.addSuppressed((java.lang.Throwable) unrecognizedOptionException12);
        org.apache.commons.cli.OptionGroup optionGroup15 = alreadySelectedException3.getOptionGroup();
        unrecognizedOptionException1.addSuppressed((java.lang.Throwable) alreadySelectedException3);
        java.lang.String str17 = alreadySelectedException3.toString();
        org.junit.Assert.assertNull(optionGroup8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.cli.AlreadySelectedException: " + "'", str17, "org.apache.commons.cli.AlreadySelectedException: ");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("hi!");
        java.lang.Object obj26 = commandLine22.getParsedOptionValue("");
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        java.lang.String str33 = option31.getArgName();
        java.lang.String str34 = option31.getValue();
        option31.setValueSeparator(' ');
        boolean boolean37 = option31.hasArgName();
        java.lang.String str38 = commandLine22.getOptionValue(option31);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ", "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj56 = commandLine29.getOptionObject(' ');
        java.lang.String str59 = commandLine29.getOptionValue("hi!", "");
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean65 = option64.hasValueSeparator();
        java.lang.String str67 = commandLine29.getOptionValue(option64, "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]" + "'", str67, "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine.Builder builder6 = builder0.addArg("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser8 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        boolean boolean18 = option15.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options19 = options10.addOption(option15);
        org.apache.commons.cli.DefaultParser defaultParser20 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray28 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = defaultParser20.parse(options21, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser9.parse(options10, strArray28);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser8.parse(options10, strArray34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        boolean boolean45 = option42.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options46 = options37.addOption(option42);
        org.apache.commons.cli.OptionGroup optionGroup47 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options48 = options46.addOptionGroup(optionGroup47);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        boolean boolean57 = option53.hasLongOpt();
        org.apache.commons.cli.Options options58 = options46.addOption(option53);
        java.lang.Object obj59 = option53.clone();
        boolean boolean60 = option53.isRequired();
        java.lang.Object obj61 = commandLine36.getParsedOptionValue(option53);
        int int62 = option53.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder63 = builder0.addOption(option53);
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        java.lang.String str70 = option68.getArgName();
        boolean boolean71 = option68.hasArgName();
        option68.setLongOpt("");
        boolean boolean74 = option68.hasArgs();
        org.apache.commons.cli.Option.Builder builder75 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder76 = builder75.required();
        org.apache.commons.cli.Option.Builder builder78 = builder76.longOpt("[]");
        org.apache.commons.cli.Option.Builder builder80 = builder78.desc("org.apache.commons.cli.ParseException: []");
        boolean boolean81 = option68.equals((java.lang.Object) "org.apache.commons.cli.ParseException: []");
        org.apache.commons.cli.CommandLine.Builder builder82 = builder63.addOption(option68);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        boolean boolean26 = commandLine22.hasOption("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.Object obj28 = commandLine22.getParsedOptionValue('a');
        java.lang.String[] strArray30 = commandLine22.getOptionValues('\000');
        boolean boolean32 = commandLine22.hasOption('#');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder1.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder6 = builder5.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        java.lang.Object obj42 = commandLine37.getOptionObject("org.apache.commons.cli.ParseException: []");
        java.lang.Object obj44 = commandLine37.getOptionObject('#');
        java.lang.String[] strArray46 = commandLine37.getOptionValues('#');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strArray46);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        option16.setValueSeparator('4');
        boolean boolean24 = option16.hasValueSeparator();
        boolean boolean25 = option16.hasArgName();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser1 = builder0.build();
        org.apache.commons.cli.DefaultParser defaultParser2 = builder0.build();
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setAllowPartialMatching(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaultParser1);
        org.junit.Assert.assertNotNull(defaultParser2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        java.lang.String str40 = commandLine38.getOptionValue("hi!");
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean46 = option45.hasValueSeparator();
        boolean boolean47 = commandLine38.hasOption(option45);
        org.apache.commons.cli.OptionGroup optionGroup48 = optionGroup10.addOption(option45);
        org.apache.commons.cli.DefaultParser defaultParser49 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = defaultParser49.parse(options50, strArray57, properties58);
        java.lang.String str61 = commandLine59.getOptionValue("hi!");
        java.lang.Object obj63 = commandLine59.getParsedOptionValue("");
        java.lang.String[] strArray65 = commandLine59.getOptionValues('4');
        java.lang.String[] strArray66 = commandLine59.getArgs();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj72 = option71.getType();
        java.util.Properties properties73 = commandLine59.getOptionProperties(option71);
        org.apache.commons.cli.DefaultParser defaultParser74 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray82 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = defaultParser74.parse(options75, strArray82, properties83);
        java.util.List<java.lang.String> strList85 = commandLine84.getArgList();
        org.apache.commons.cli.Option option90 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj91 = option90.getType();
        boolean boolean93 = option90.equals((java.lang.Object) 0);
        option90.setArgName("");
        java.lang.Object obj96 = commandLine84.getParsedOptionValue(option90);
        java.lang.String[] strArray97 = commandLine59.getOptionValues(option90);
        java.lang.Object obj98 = option90.clone();
        org.apache.commons.cli.OptionGroup optionGroup99 = optionGroup48.addOption(option90);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(strArray97);
        org.junit.Assert.assertNotNull(obj98);
        org.junit.Assert.assertEquals(obj98.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj98), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj98), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(optionGroup99);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser1 = builder0.build();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        org.apache.commons.cli.OptionGroup optionGroup12 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options13 = options11.addOptionGroup(optionGroup12);
        java.lang.String str14 = options11.toString();
        boolean boolean16 = options11.hasLongOption("hi!");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection17 = options11.getOptions();
        java.util.List<java.lang.String> strList19 = options11.getMatchingOptions("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser20 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray28 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = defaultParser20.parse(options21, strArray28, properties29);
        boolean boolean32 = commandLine30.hasOption("hi!");
        java.lang.String[] strArray33 = commandLine30.getArgs();
        org.apache.commons.cli.Option option34 = null;
        boolean boolean35 = commandLine30.hasOption(option34);
        java.lang.String[] strArray36 = commandLine30.getArgs();
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser1.parse(options11, strArray36);
        boolean boolean39 = commandLine37.hasOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaultParser1);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str14, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(optionCollection17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options32 = options3.addOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ", "[ option:  [- ]  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.AlreadySelectedException: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        java.util.List<java.lang.String> strList72 = options20.getMatchingOptions("org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder5.required(true);
        org.apache.commons.cli.Option.Builder builder10 = builder9.hasArg();
        org.apache.commons.cli.Option.Builder builder12 = builder9.hasArg(false);
        org.apache.commons.cli.Option.Builder builder14 = builder9.required(false);
        org.apache.commons.cli.Option.Builder builder16 = builder14.hasArg(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "[ Options: [ short {=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ], org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option:  org.apache.commons.cli.UnrecognizedOptionException: hi!  [ARG] :: hi! :: class java.lang.String ]} ]", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = defaultParser2.parse(options3, strArray10, properties11);
        java.util.List<java.lang.String> strList13 = commandLine12.getArgList();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        option18.setArgName("");
        java.lang.Object obj24 = commandLine12.getParsedOptionValue(option18);
        optionGroup0.setSelected(option18);
        boolean boolean26 = optionGroup0.isRequired();
        java.lang.String str27 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        java.lang.String str35 = option32.getValue(10);
        java.lang.String str37 = option32.getValue((int) '#');
        boolean boolean38 = option32.hasArg();
        option32.setOptionalArg(false);
        optionGroup0.setSelected(option32);
        java.lang.String str42 = option32.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.String str14 = commandLine10.getOptionValue(' ');
        java.lang.Object obj16 = commandLine10.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj18 = commandLine10.getParsedOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        org.apache.commons.cli.Options options53 = options9.addOption(option52);
        java.lang.Object obj54 = option52.getType();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder4 = builder3.hasArgs();
        org.apache.commons.cli.Option.Builder builder6 = builder3.hasArg(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        boolean boolean15 = option12.equals((java.lang.Object) 0);
        option12.setArgName("");
        java.lang.String[] strArray18 = option12.getValues();
        option12.setArgs(0);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException21 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option12);
        org.apache.commons.cli.OptionGroup optionGroup22 = alreadySelectedException21.getOptionGroup();
        optionGroup22.setRequired(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(optionGroup22);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.option("");
        org.apache.commons.cli.Option.Builder builder9 = builder7.hasArg(false);
        org.apache.commons.cli.Option.Builder builder10 = builder9.hasArgs();
        org.apache.commons.cli.Option option11 = builder10.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(option11);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj56 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj63 = option62.getType();
        boolean boolean65 = option62.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options66 = options57.addOption(option62);
        java.lang.String str68 = option62.getValue("hi!");
        int int69 = option62.getArgs();
        option62.setDescription("hi!");
        java.lang.String str72 = option62.getLongOpt();
        java.lang.Object obj73 = option62.getType();
        option62.setOptionalArg(true);
        java.lang.String str77 = commandLine29.getOptionValue(option62, "");
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj83 = option82.getType();
        boolean boolean85 = option82.equals((java.lang.Object) 0);
        option82.setArgName("");
        option82.setRequired(false);
        option82.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean92 = commandLine29.hasOption(option82);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = options11.getOptions();
        java.util.List<java.lang.String> strList14 = options11.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection15 = options11.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(optionCollection15);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser5 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.DefaultParser defaultParser16 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = defaultParser16.parse(options17, strArray24, properties25);
        org.apache.commons.cli.CommandLine commandLine27 = defaultParser5.parse(options6, strArray24);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        boolean boolean36 = option33.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options37 = options28.addOption(option33);
        org.apache.commons.cli.OptionGroup optionGroup38 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options39 = options37.addOptionGroup(optionGroup38);
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        boolean boolean48 = option44.hasLongOpt();
        org.apache.commons.cli.Options options49 = options37.addOption(option44);
        java.lang.String[] strArray50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser5.parse(options49, strArray50, false);
        java.lang.Object obj54 = commandLine52.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str57 = commandLine52.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str59 = optionGroup58.getSelected();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        option64.setValueSeparator('#');
        optionGroup58.setSelected(option64);
        boolean boolean70 = option64.hasLongOpt();
        boolean boolean71 = commandLine52.hasOption(option64);
        org.apache.commons.cli.CommandLine.Builder builder72 = builder0.addOption(option64);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        java.util.List<java.lang.String> strList22 = option17.getValuesList();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties28 = commandLine22.getOptionProperties(option27);
        java.lang.String str29 = option27.getValue();
        java.lang.Object obj30 = option27.getType();
        java.lang.String str31 = option27.getArgName();
        boolean boolean32 = option27.hasArgName();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.DefaultParser defaultParser5 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.DefaultParser defaultParser16 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = defaultParser16.parse(options17, strArray24, properties25);
        org.apache.commons.cli.CommandLine commandLine27 = defaultParser5.parse(options6, strArray24);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties33 = commandLine27.getOptionProperties(option32);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        boolean boolean41 = option38.equals((java.lang.Object) 0);
        option38.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option38.setArgs((-2));
        option38.setDescription("hi!");
        java.util.Properties properties48 = commandLine27.getOptionProperties(option38);
        java.lang.String[] strArray50 = commandLine27.getOptionValues('#');
        java.lang.Object obj52 = commandLine27.getParsedOptionValue(' ');
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.Character cannot be cast to class java.lang.Class (java.lang.Character and java.lang.Class are in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj81 = option80.getType();
        java.lang.String str82 = option80.getArgName();
        boolean boolean83 = option80.hasArgName();
        option80.setLongOpt("");
        boolean boolean86 = option80.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup87 = options20.getOptionGroup(option80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options90 = options20.addOption("hi!", "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class java.lang.String");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.Object obj20 = commandLine10.getParsedOptionValue('a');
        boolean boolean22 = commandLine10.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.OptionGroup optionGroup18 = new org.apache.commons.cli.OptionGroup();
        boolean boolean19 = optionGroup18.isRequired();
        java.lang.String str20 = optionGroup18.getSelected();
        optionGroup18.setRequired(false);
        boolean boolean23 = optionGroup18.isRequired();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        java.util.List<java.lang.String> strList31 = option28.getValuesList();
        option28.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup18.setSelected(option28);
        java.lang.Object obj35 = commandLine10.getParsedOptionValue(option28);
        java.lang.String[] strArray36 = option28.getValues();
        char char37 = option28.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertTrue("'" + char37 + "' != '" + '\000' + "'", char37 == '\000');
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasShortOption("[]");
        boolean boolean4 = options0.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser6 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj14 = option13.getType();
        boolean boolean16 = option13.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options17 = options8.addOption(option13);
        org.apache.commons.cli.DefaultParser defaultParser18 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = defaultParser18.parse(options19, strArray26, properties27);
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser7.parse(options8, strArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser6.parse(options8, strArray32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        boolean boolean43 = option40.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options44 = options35.addOption(option40);
        java.lang.String str46 = option40.getValue("hi!");
        java.util.List<java.lang.String> strList47 = option40.getValuesList();
        int int48 = option40.getArgs();
        java.lang.String[] strArray49 = commandLine34.getOptionValues(option40);
        org.apache.commons.cli.OptionGroup optionGroup50 = options0.getOptionGroup(option40);
        boolean boolean52 = options0.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        option6.setArgName("");
        java.lang.String[] strArray12 = option6.getValues();
        boolean boolean13 = option6.hasArgName();
        java.lang.String str14 = option6.getOpt();
        optionGroup0.setSelected(option6);
        boolean boolean17 = option6.equals((java.lang.Object) 100);
        option6.setDescription("org.apache.commons.cli.ParseException: [ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.required(false);
        org.apache.commons.cli.Option.Builder builder7 = builder5.longOpt("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.Option.Builder builder9 = builder5.desc("[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg(true);
        org.apache.commons.cli.Option.Builder builder7 = builder2.argName("hi!");
        org.apache.commons.cli.Option.Builder builder8 = builder7.required();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder4 = builder3.hasArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option5 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = builder0.build();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj14 = option13.getType();
        boolean boolean16 = option13.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options17 = options8.addOption(option13);
        org.apache.commons.cli.OptionGroup optionGroup18 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options19 = options17.addOptionGroup(optionGroup18);
        org.apache.commons.cli.DefaultParser defaultParser21 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.DefaultParser defaultParser33 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = defaultParser33.parse(options34, strArray41, properties42);
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser22.parse(options23, strArray41);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine49 = defaultParser21.parse(options23, strArray47, false);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj56 = option55.getType();
        boolean boolean58 = option55.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options59 = options50.addOption(option55);
        org.apache.commons.cli.OptionGroup optionGroup60 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options61 = options59.addOptionGroup(optionGroup60);
        org.apache.commons.cli.Option option66 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj67 = option66.getType();
        boolean boolean69 = option66.equals((java.lang.Object) 0);
        boolean boolean70 = option66.hasLongOpt();
        org.apache.commons.cli.Options options71 = options59.addOption(option66);
        java.lang.Object obj72 = option66.clone();
        boolean boolean73 = option66.isRequired();
        java.lang.Object obj74 = commandLine49.getParsedOptionValue(option66);
        java.lang.String str77 = commandLine49.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ", "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String[] strArray78 = commandLine49.getArgs();
        org.apache.commons.cli.CommandLine commandLine80 = defaultParser7.parse(options17, strArray78, true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaultParser7);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str77, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        java.lang.String str22 = options21.toString();
        java.util.List list23 = options21.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine.Builder builder6 = builder0.addArg("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser8 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        boolean boolean18 = option15.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options19 = options10.addOption(option15);
        org.apache.commons.cli.DefaultParser defaultParser20 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray28 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = defaultParser20.parse(options21, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser9.parse(options10, strArray28);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser8.parse(options10, strArray34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        boolean boolean45 = option42.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options46 = options37.addOption(option42);
        org.apache.commons.cli.OptionGroup optionGroup47 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options48 = options46.addOptionGroup(optionGroup47);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        boolean boolean57 = option53.hasLongOpt();
        org.apache.commons.cli.Options options58 = options46.addOption(option53);
        java.lang.Object obj59 = option53.clone();
        boolean boolean60 = option53.isRequired();
        java.lang.Object obj61 = commandLine36.getParsedOptionValue(option53);
        int int62 = option53.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder63 = builder0.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup64 = new org.apache.commons.cli.OptionGroup();
        boolean boolean65 = optionGroup64.isRequired();
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj71 = option70.getType();
        boolean boolean73 = option70.equals((java.lang.Object) 0);
        option70.setArgName("");
        java.lang.String[] strArray76 = option70.getValues();
        boolean boolean77 = option70.hasArgName();
        java.lang.String str78 = option70.getOpt();
        optionGroup64.setSelected(option70);
        boolean boolean81 = option70.equals((java.lang.Object) 100);
        boolean boolean82 = option70.hasValueSeparator();
        org.apache.commons.cli.CommandLine.Builder builder83 = builder0.addOption(option70);
        org.apache.commons.cli.CommandLine commandLine84 = builder83.build();
        org.apache.commons.cli.CommandLine commandLine85 = builder83.build();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(commandLine85);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj27 = option26.getType();
        boolean boolean29 = option26.equals((java.lang.Object) 0);
        boolean boolean30 = option26.hasLongOpt();
        java.lang.String str31 = option26.toString();
        org.apache.commons.cli.OptionGroup optionGroup32 = options21.getOptionGroup(option26);
        boolean boolean33 = option26.hasArgName();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = option26.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str31, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(optionGroup32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.Object obj20 = commandLine10.getParsedOptionValue("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        boolean boolean24 = commandLine10.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.CommandLine.Builder builder25 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine26 = builder25.build();
        org.apache.commons.cli.CommandLine commandLine27 = builder25.build();
        org.apache.commons.cli.CommandLine.Builder builder29 = builder25.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        java.lang.String str36 = option34.getArgName();
        option34.setValueSeparator('#');
        boolean boolean39 = option34.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder40 = builder29.addOption(option34);
        java.lang.String[] strArray41 = option34.getValues();
        java.util.Properties properties42 = commandLine10.getOptionProperties(option34);
        java.util.Properties properties44 = commandLine10.getOptionProperties("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(properties44);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        java.lang.String str40 = commandLine38.getOptionValue("hi!");
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean46 = option45.hasValueSeparator();
        boolean boolean47 = commandLine38.hasOption(option45);
        org.apache.commons.cli.OptionGroup optionGroup48 = optionGroup10.addOption(option45);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        boolean boolean57 = option54.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options58 = options49.addOption(option54);
        org.apache.commons.cli.OptionGroup optionGroup59 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options60 = options58.addOptionGroup(optionGroup59);
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj66 = option65.getType();
        boolean boolean68 = option65.equals((java.lang.Object) 0);
        boolean boolean69 = option65.hasLongOpt();
        org.apache.commons.cli.Options options70 = options58.addOption(option65);
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj76 = option75.getType();
        boolean boolean78 = option75.equals((java.lang.Object) 0);
        boolean boolean79 = option75.hasLongOpt();
        java.lang.String str80 = option75.toString();
        org.apache.commons.cli.OptionGroup optionGroup81 = options70.getOptionGroup(option75);
        optionGroup48.setSelected(option75);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(optionGroup48);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str80, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(optionGroup81);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder7.optionalArg(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder11 = builder9.option("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor11 = commandLine10.iterator();
        java.lang.String str14 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!", "");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(optionItor11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray35 = option27.getValues();
        org.apache.commons.cli.Options options36 = options1.addOption(option27);
        org.apache.commons.cli.Option option38 = options36.getOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options36.addOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", true, "[ option:    ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNull(option38);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        java.lang.String str46 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
        java.lang.String str48 = commandLine10.getOptionValue("[- ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        optionGroup0.setRequired(true);
        boolean boolean4 = optionGroup0.isRequired();
        optionGroup0.setRequired(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = defaultParser7.parse(options8, strArray15, properties16);
        java.util.List<java.lang.String> strList18 = commandLine17.getArgList();
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj24 = option23.getType();
        boolean boolean26 = option23.equals((java.lang.Object) 0);
        option23.setArgName("");
        java.lang.Object obj29 = commandLine17.getParsedOptionValue(option23);
        java.lang.String str30 = option23.toString();
        java.lang.String[] strArray31 = option23.getValues();
        int int32 = option23.getArgs();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException33 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option23);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str30, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder4 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg();
        org.apache.commons.cli.Option.Builder builder7 = builder2.longOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option.Builder builder8 = builder2.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.lang.String[] strArray47 = commandLine37.getArgs();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = builder0.build();
        org.apache.commons.cli.DefaultParser defaultParser9 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser10 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser21 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser21.parse(options22, strArray29, properties30);
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser10.parse(options11, strArray29);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser9.parse(options11, strArray35, false);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection38 = options11.getOptions();
        org.apache.commons.cli.Option option40 = options11.getOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.DefaultParser defaultParser41 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = defaultParser41.parse(options42, strArray49, properties50);
        java.util.List<java.lang.String> strList52 = commandLine51.getArgList();
        java.lang.String str54 = commandLine51.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str56 = commandLine51.getOptionValue(' ');
        boolean boolean58 = commandLine51.hasOption('a');
        java.lang.String[] strArray60 = commandLine51.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray61 = commandLine51.getArgs();
        org.apache.commons.cli.CommandLine commandLine63 = defaultParser7.parse(options11, strArray61, true);
        java.lang.Class<?> wildcardClass64 = options11.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaultParser7);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(optionCollection38);
        org.junit.Assert.assertNull(option40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.lang.String str45 = option35.getOpt();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.longOpt("[]");
        org.apache.commons.cli.Option.Builder builder5 = builder1.valueSeparator('4');
        org.apache.commons.cli.Option.Builder builder6 = builder5.valueSeparator();
        org.apache.commons.cli.Option.Builder builder8 = builder6.argName("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option.Builder builder10 = builder6.optionalArg(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder3.desc("");
        org.apache.commons.cli.Option.Builder builder9 = builder3.numberOfArgs((-2));
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str17 = commandLine10.getOptionValue("hi!", "[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean19 = commandLine10.hasOption('#');
        java.lang.String str21 = commandLine10.getOptionValue('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str17, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        java.lang.String str13 = options10.toString();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        java.lang.String str20 = option18.getArgName();
        boolean boolean21 = option18.hasArgName();
        boolean boolean22 = option18.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup23 = options10.getOptionGroup(option18);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser0.parse(options10, strArray32, true);
        boolean boolean38 = commandLine36.hasOption("org.apache.commons.cli.ParseException: []");
        org.apache.commons.cli.DefaultParser defaultParser39 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = defaultParser39.parse(options40, strArray47, properties48);
        java.lang.String str51 = commandLine49.getOptionValue("hi!");
        org.apache.commons.cli.Option option56 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean57 = option56.hasValueSeparator();
        boolean boolean58 = commandLine49.hasOption(option56);
        option56.setOptionalArg(true);
        java.lang.String str61 = option56.getLongOpt();
        java.lang.String str62 = option56.getLongOpt();
        java.util.Properties properties63 = commandLine36.getOptionProperties(option56);
        java.lang.String str64 = option56.getDescription();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str13, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.lang.String str45 = option35.getDescription();
        java.lang.String str47 = option35.getValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str47, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list2 = missingOptionException1.getMissingOptions();
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException4 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str5 = unrecognizedOptionException4.getOption();
        missingOptionException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException4);
        org.apache.commons.cli.MissingOptionException missingOptionException8 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException10 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str11 = unrecognizedOptionException10.getOption();
        missingOptionException8.addSuppressed((java.lang.Throwable) unrecognizedOptionException10);
        missingOptionException1.addSuppressed((java.lang.Throwable) missingOptionException8);
        org.junit.Assert.assertNull(list2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        int int36 = option29.getArgs();
        java.lang.String str37 = option29.getValue();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.Options options12 = options0.addOption("", "hi!");
        boolean boolean14 = options12.hasShortOption("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser15 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser15.parse(options16, strArray34);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj44 = option43.getType();
        boolean boolean46 = option43.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options47 = options38.addOption(option43);
        org.apache.commons.cli.OptionGroup optionGroup48 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options49 = options47.addOptionGroup(optionGroup48);
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        boolean boolean57 = option54.equals((java.lang.Object) 0);
        boolean boolean58 = option54.hasLongOpt();
        org.apache.commons.cli.Options options59 = options47.addOption(option54);
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser15.parse(options59, strArray60, false);
        java.lang.Object obj64 = commandLine62.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str67 = commandLine62.getOptionValue("", "[]");
        org.apache.commons.cli.OptionGroup optionGroup68 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str69 = optionGroup68.getSelected();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj75 = option74.getType();
        java.lang.String str76 = option74.getArgName();
        option74.setValueSeparator('#');
        optionGroup68.setSelected(option74);
        boolean boolean80 = option74.hasLongOpt();
        boolean boolean81 = commandLine62.hasOption(option74);
        org.apache.commons.cli.Options options82 = options12.addOption(option74);
        org.apache.commons.cli.Options options85 = options82.addOption("", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str86 = options85.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class java.lang.String");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str86, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }
}

