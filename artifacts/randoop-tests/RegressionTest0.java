import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("hi!", "");
        java.lang.String str3 = unrecognizedOptionException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str3, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", "", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.cli.OptionGroup optionGroup0 = null;
        org.apache.commons.cli.Option option1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.AlreadySelectedException alreadySelectedException2 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Option.getKey()\" because \"option\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "" };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine6 = defaultParser0.parse(options1, strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Options.getRequiredOptions()\" because \"options\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine9 = defaultParser0.parse(options1, strArray7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Options.getRequiredOptions()\" because \"options\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        int int0 = org.apache.commons.cli.Option.UNLIMITED_VALUES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-2) + "'", int0 == (-2));
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "" };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Options.getRequiredOptions()\" because \"options\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        int int0 = org.apache.commons.cli.Option.UNINITIALIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-1) + "'", int0 == (-1));
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        boolean boolean18 = option15.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options19 = options10.addOption(option15);
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) option15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Option cannot be cast to class java.lang.Class (org.apache.commons.cli.Option is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options19);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.Class<?> wildcardClass8 = option4.getClass();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options5 = options0.addRequiredOption("hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = option4.addValue("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        option22.setDescription("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException10 = new org.apache.commons.cli.UnrecognizedOptionException("", "");
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.String cannot be cast to class java.lang.Class (java.lang.String and java.lang.Class are in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[]", "hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        option4.setArgName("hi!");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.String str45 = option42.getValue();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException74 = new org.apache.commons.cli.MissingOptionException(list73);
        java.lang.String str75 = missingOptionException74.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str75, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        java.lang.String[] strArray14 = commandLine10.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strArray14);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj34 = commandLine10.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = options1.hasLongOption("[]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        int int12 = option5.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = option5.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        boolean boolean11 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str12 = options9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options17 = options9.addOption("[ option:  hi!  ::  :: class java.lang.String ]", "", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options79 = options20.addRequiredOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", "[]", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option4.setArgs((-2));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = option4.addValue("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        boolean boolean22 = option16.hasLongOpt();
        option16.setArgs((-1));
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ option:  hi!  ::  :: class java.lang.String ]", "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options77 = options20.addRequiredOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", "[ option:  hi!  ::  :: class java.lang.String ]", true, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ option:  hi!  ::  :: class java.lang.String ]", "[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options12.addOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", "[]", false, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException3 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException3.getOptionGroup();
        missingOptionException1.addSuppressed((java.lang.Throwable) alreadySelectedException3);
        java.util.List list6 = missingOptionException1.getMissingOptions();
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(list6);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = option4.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options52 = options47.addRequiredOption("[]", "[ option:  hi!  ::  :: class java.lang.String ]", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        java.lang.Object obj28 = commandLine10.getParsedOptionValue('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        java.lang.String str13 = optionGroup10.getSelected();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.hasArg(true);
        org.apache.commons.cli.Option.Builder builder3 = builder2.hasArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder5 = builder3.option("[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        boolean boolean11 = options0.hasOption("[]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        java.lang.String[] strArray33 = option21.getValues();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(strArray33);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options50 = options44.addOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        boolean boolean11 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str12 = options9.toString();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection13 = options9.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(optionCollection13);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        option21.setValueSeparator(' ');
        java.lang.String str27 = option21.getArgName();
        boolean boolean28 = option21.hasValueSeparator();
        java.lang.String str30 = commandLine10.getOptionValue(option21, "[ option:  hi!  ::  :: class java.lang.String ]");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = option21.addValue("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str30, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("hi!", "", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options51 = options44.addOption("org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("[]");
        java.lang.String str2 = unrecognizedOptionException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: []" + "'", str2, "org.apache.commons.cli.UnrecognizedOptionException: []");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str2 = unrecognizedOptionException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str2, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setArgs(0);
        java.lang.String str13 = option4.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = option4.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str13, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        org.apache.commons.cli.DefaultParser defaultParser70 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = defaultParser70.parse(options71, strArray78, properties79);
        java.lang.String str82 = commandLine80.getOptionValue("hi!");
        java.lang.Object obj84 = commandLine80.getParsedOptionValue("");
        java.lang.String[] strArray86 = commandLine80.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine80.getArgs();
        org.apache.commons.cli.Option option92 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj93 = option92.getType();
        java.util.Properties properties94 = commandLine80.getOptionProperties(option92);
        org.apache.commons.cli.Options options95 = options57.addOption(option92);
        org.apache.commons.cli.Option option97 = options57.getOption("");
        java.util.Properties properties98 = commandLine47.getOptionProperties(option97);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertEquals(obj93.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj93), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj93), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties94);
        org.junit.Assert.assertNotNull(options95);
        org.junit.Assert.assertNotNull(option97);
        org.junit.Assert.assertNotNull(properties98);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option49 = options9.getOption("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options54 = options9.addRequiredOption("org.apache.commons.cli.UnrecognizedOptionException: []", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: []' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(option49);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option[] optionArray25 = commandLine22.getOptions();
        java.lang.String[] strArray27 = commandLine22.getOptionValues("[]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNull(strArray27);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder4 = builder3.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean26 = commandLine22.hasOption('#');
        java.lang.String str28 = commandLine22.getOptionValue("");
        java.lang.Object obj30 = commandLine22.getOptionObject('a');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.Object obj20 = commandLine10.getOptionObject("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String[] strArray22 = commandLine10.getOptionValues('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(strArray22);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        org.apache.commons.cli.DefaultParser defaultParser70 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = defaultParser70.parse(options71, strArray78, properties79);
        java.lang.String str82 = commandLine80.getOptionValue("hi!");
        java.lang.Object obj84 = commandLine80.getParsedOptionValue("");
        java.lang.String[] strArray86 = commandLine80.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine80.getArgs();
        org.apache.commons.cli.CommandLine commandLine88 = defaultParser0.parse(options69, strArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options91 = options69.addOption("[ option:  hi!  ::  :: class java.lang.String ]", "org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[]", "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Throwable[] throwableArray2 = parseException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.numberOfArgs(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option6 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("", "");
        java.lang.String str3 = unrecognizedOptionException2.getOption();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option5 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", "[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options9.addOption("hi!", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setLongOpt("");
        option4.setArgs((int) (byte) -1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine.Builder builder34 = builder32.addArg("");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder1.desc("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        boolean boolean39 = commandLine37.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str4 = option3.getArgName();
        int int5 = option3.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = option3.addValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.valueSeparator('#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("hi!", "hi!");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = option4.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection30 = options3.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options34 = options3.addOption("[]", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(optionCollection30);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        optionGroup10.setRequired(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        java.lang.Object obj27 = commandLine10.getOptionObject("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj29 = commandLine10.getOptionObject("[]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("hi!", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        option4.setValueSeparator('4');
        java.lang.String str10 = option4.getValue();
        java.lang.String str11 = option4.getDescription();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        option4.setLongOpt("");
        boolean boolean10 = option4.hasArgs();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        boolean boolean35 = options20.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection36 = options20.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) options20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Options cannot be cast to class java.lang.Class (org.apache.commons.cli.Options is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(optionCollection36);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: []", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.lang.String str25 = commandLine10.getOptionValue(' ', "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str25, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        boolean boolean11 = option4.hasValueSeparator();
        option4.setValueSeparator('a');
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("[]");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        org.apache.commons.cli.DefaultParser defaultParser71 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray79 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = defaultParser71.parse(options72, strArray79, properties80);
        java.util.List<java.lang.String> strList82 = commandLine81.getArgList();
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj88 = option87.getType();
        boolean boolean90 = option87.equals((java.lang.Object) 0);
        option87.setArgName("");
        java.lang.Object obj93 = commandLine81.getParsedOptionValue(option87);
        boolean boolean94 = option87.hasValueSeparator();
        org.apache.commons.cli.OptionGroup optionGroup95 = options20.getOptionGroup(option87);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(optionGroup95);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection30 = options3.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options34 = options3.addOption("org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(optionCollection30);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setLongOpt("");
        java.lang.Class<?> wildcardClass13 = option4.getClass();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.hasArg(true);
        org.apache.commons.cli.Option.Builder builder3 = builder2.hasArgs();
        org.apache.commons.cli.Option.Builder builder5 = builder2.numberOfArgs((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        java.util.List<java.lang.String> strList12 = option5.getValuesList();
        org.apache.commons.cli.MissingOptionException missingOptionException13 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList12);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options26 = options21.addOption("org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.List<java.lang.String> strList40 = commandLine37.getArgList();
        org.apache.commons.cli.MissingOptionException missingOptionException41 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList40);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option22.setRequired(true);
        java.lang.Object obj35 = option22.getType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str25 = options1.toString();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str25, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj54 = option53.getType();
        boolean boolean56 = option53.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options57 = options48.addOption(option53);
        org.apache.commons.cli.OptionGroup optionGroup58 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options59 = options57.addOptionGroup(optionGroup58);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        boolean boolean67 = option64.equals((java.lang.Object) 0);
        boolean boolean68 = option64.hasLongOpt();
        org.apache.commons.cli.Options options69 = options57.addOption(option64);
        org.apache.commons.cli.DefaultParser defaultParser70 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = defaultParser70.parse(options71, strArray78, properties79);
        java.lang.String str82 = commandLine80.getOptionValue("hi!");
        java.lang.Object obj84 = commandLine80.getParsedOptionValue("");
        java.lang.String[] strArray86 = commandLine80.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine80.getArgs();
        org.apache.commons.cli.CommandLine commandLine88 = defaultParser0.parse(options69, strArray87);
        java.lang.Class<?> wildcardClass89 = commandLine88.getClass();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        java.lang.String str12 = option4.getOpt();
        boolean boolean13 = option4.hasValueSeparator();
        java.util.List<java.lang.String> strList14 = option4.getValuesList();
        option4.setArgName("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setAllowPartialMatching(false);
        java.lang.Class<?> wildcardClass3 = builder2.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        option4.setLongOpt("");
        option4.setDescription("");
        java.lang.String str13 = option4.getArgName();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options52 = options47.addRequiredOption("[ option:  hi!  ::  :: class java.lang.String ]", "[ option:  hi!  ::  :: class java.lang.String ]", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        boolean boolean20 = option17.hasArg();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        boolean boolean49 = option46.equals((java.lang.Object) 0);
        boolean boolean50 = option46.hasLongOpt();
        org.apache.commons.cli.Options options51 = options39.addOption(option46);
        java.lang.Object obj52 = option46.clone();
        boolean boolean53 = option46.isRequired();
        java.lang.Object obj54 = commandLine29.getParsedOptionValue(option46);
        boolean boolean56 = commandLine29.hasOption("");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getValue();
        option4.setValueSeparator(' ');
        boolean boolean10 = option4.hasArgName();
        int int11 = option4.getArgs();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setArgs(0);
        java.lang.String str13 = option4.toString();
        java.lang.String str14 = option4.toString();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str13, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str14, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str4 = option3.getArgName();
        int int5 = option3.getArgs();
        boolean boolean6 = option3.hasArg();
        option3.setArgName("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.DefaultParser defaultParser10 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        boolean boolean20 = option17.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options21 = options12.addOption(option17);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser11.parse(options12, strArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser10.parse(options12, strArray36, false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        int int51 = option44.getArgs();
        option44.setDescription("hi!");
        org.apache.commons.cli.OptionGroup optionGroup54 = options12.getOptionGroup(option44);
        // The following exception was thrown during execution in test generation
        try {
            option3.setType((java.lang.Object) options12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Options cannot be cast to class java.lang.Class (org.apache.commons.cli.Options is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(optionGroup54);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", false, "[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        java.lang.String str13 = options10.toString();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        java.lang.String str20 = option18.getArgName();
        boolean boolean21 = option18.hasArgName();
        boolean boolean22 = option18.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup23 = options10.getOptionGroup(option18);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser0.parse(options10, strArray32, true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        boolean boolean45 = option42.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options46 = options37.addOption(option42);
        org.apache.commons.cli.OptionGroup optionGroup47 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options48 = options46.addOptionGroup(optionGroup47);
        java.lang.String str49 = optionGroup47.getSelected();
        boolean boolean50 = optionGroup47.isRequired();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj56 = option55.getType();
        boolean boolean58 = option55.equals((java.lang.Object) 0);
        boolean boolean59 = option55.hasLongOpt();
        option55.setLongOpt("");
        option55.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException64 = new org.apache.commons.cli.AlreadySelectedException(optionGroup47, option55);
        java.lang.String str65 = option55.getDescription();
        boolean boolean66 = commandLine36.hasOption(option55);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str13, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = builder2.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        boolean boolean12 = option4.hasValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        boolean boolean11 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Class<?> wildcardClass12 = options9.getClass();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArgs();
        org.apache.commons.cli.Option.Builder builder5 = builder4.valueSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder3.hasArg(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option6 = builder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        java.lang.Object obj27 = commandLine10.getOptionObject("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str29 = commandLine10.getOptionValue("[]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        boolean boolean11 = option4.isRequired();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("hi!");
        org.apache.commons.cli.Option option2 = alreadySelectedException1.getOption();
        org.junit.Assert.assertNull(option2);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        // The following exception was thrown during execution in test generation
        try {
            option27.setType((java.lang.Object) options30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Options cannot be cast to class java.lang.Class (org.apache.commons.cli.Options is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        boolean boolean9 = option4.hasArg();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option8 = builder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        java.lang.String[] strArray35 = commandLine33.getOptionValues('4');
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(strArray35);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj15 = commandLine10.getParsedOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        java.lang.Object obj11 = option4.clone();
        option4.setLongOpt("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException74 = new org.apache.commons.cli.MissingOptionException(list73);
        java.lang.Class<?> wildcardClass75 = missingOptionException74.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(true);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        org.apache.commons.cli.OptionGroup optionGroup12 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options13 = options11.addOptionGroup(optionGroup12);
        java.lang.String str14 = options11.toString();
        boolean boolean16 = options11.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options22 = options11.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser23 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser23.parse(options24, strArray31, properties32);
        java.lang.String str35 = commandLine33.getOptionValue("hi!");
        java.lang.Object obj37 = commandLine33.getParsedOptionValue("");
        java.lang.String[] strArray39 = commandLine33.getOptionValues('4');
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj46 = option45.getType();
        boolean boolean48 = option45.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options49 = options40.addOption(option45);
        java.lang.String str51 = option45.getValue("hi!");
        java.util.List<java.lang.String> strList52 = option45.getValuesList();
        int int53 = option45.getArgs();
        java.lang.String str55 = commandLine33.getOptionValue(option45, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray56 = commandLine33.getArgs();
        org.apache.commons.cli.CommandLine commandLine58 = defaultParser1.parse(options22, strArray56, true);
        org.apache.commons.cli.Options options59 = null;
        org.apache.commons.cli.DefaultParser defaultParser60 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj67 = option66.getType();
        boolean boolean69 = option66.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options70 = options61.addOption(option66);
        org.apache.commons.cli.OptionGroup optionGroup71 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options72 = options70.addOptionGroup(optionGroup71);
        org.apache.commons.cli.DefaultParser defaultParser73 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj80 = option79.getType();
        boolean boolean82 = option79.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options83 = options74.addOption(option79);
        org.apache.commons.cli.DefaultParser defaultParser84 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options85 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray92 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = defaultParser84.parse(options85, strArray92, properties93);
        org.apache.commons.cli.CommandLine commandLine95 = defaultParser73.parse(options74, strArray92);
        org.apache.commons.cli.CommandLine commandLine97 = defaultParser60.parse(options72, strArray92, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine98 = defaultParser1.parse(options59, strArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Options.getRequiredOptions()\" because \"options\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str14, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str55, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str16 = option15.getArgName();
        int int17 = option15.getArgs();
        optionGroup10.setSelected(option15);
        boolean boolean19 = option15.hasArg();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str10 = option4.toString();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]" + "'", str10, "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean26 = option18.isRequired();
        option18.setArgName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        boolean boolean23 = option20.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options24 = options15.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup25 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options26 = options24.addOptionGroup(optionGroup25);
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        boolean boolean35 = option31.hasLongOpt();
        org.apache.commons.cli.Options options36 = options24.addOption(option31);
        boolean boolean37 = option31.hasLongOpt();
        java.lang.String str39 = commandLine10.getOptionValue(option31, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str40 = option31.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str39, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str40, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        java.util.List list53 = options2.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        org.apache.commons.cli.Option option37 = options35.getOption("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection38 = options35.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNull(option37);
        org.junit.Assert.assertNotNull(optionCollection38);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        option16.setRequired(false);
        java.lang.String[] strArray24 = option16.getValues();
        option16.setOptionalArg(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str4 = option3.getArgName();
        int int5 = option3.getArgs();
        org.apache.commons.cli.MissingOptionException missingOptionException7 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException9 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup10 = alreadySelectedException9.getOptionGroup();
        missingOptionException7.addSuppressed((java.lang.Throwable) alreadySelectedException9);
        org.apache.commons.cli.OptionGroup optionGroup12 = alreadySelectedException9.getOptionGroup();
        boolean boolean13 = option3.equals((java.lang.Object) alreadySelectedException9);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertNull(optionGroup12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = commandLine10.getOptionValue(option46, "hi!");
        org.apache.commons.cli.DefaultParser defaultParser51 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray59 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = defaultParser51.parse(options52, strArray59, properties60);
        boolean boolean63 = commandLine61.hasOption("hi!");
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        java.lang.String str70 = option68.getArgName();
        option68.setValueSeparator('#');
        java.lang.String[] strArray73 = commandLine61.getOptionValues(option68);
        java.lang.Object obj75 = commandLine61.getParsedOptionValue('4');
        java.lang.String str78 = commandLine61.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str85 = option83.getValue("");
        java.lang.String[] strArray86 = commandLine61.getOptionValues(option83);
        boolean boolean87 = commandLine10.hasOption(option83);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        java.util.List<java.lang.String> strList24 = options9.getMatchingOptions("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection25 = options9.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options30 = options9.addRequiredOption("org.apache.commons.cli.UnrecognizedOptionException: hi!", "", false, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(optionCollection25);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        java.lang.Object obj49 = option41.clone();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = option41.addValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        java.lang.String str27 = commandLine22.getOptionValue(' ', "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List<java.lang.String> strList28 = commandLine22.getArgList();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str27, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("[ option:  hi!  ::  :: class java.lang.String ]", false, "org.apache.commons.cli.UnrecognizedOptionException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        java.lang.String str14 = optionGroup10.toString();
        optionGroup10.setRequired(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean26 = option18.isRequired();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = option18.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options29 = options1.addOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "[ option:  hi!  ::  :: class java.lang.String ]", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        boolean boolean23 = option17.hasArg();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        option17.setOptionalArg(true);
        java.lang.String str22 = option17.getLongOpt();
        boolean boolean23 = option17.hasLongOpt();
        option17.setDescription("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: []");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = strArray17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strArray17);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option22.setRequired(true);
        java.lang.String str36 = option22.getValue((int) 'a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        boolean boolean20 = option17.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options21 = options12.addOption(option17);
        org.apache.commons.cli.OptionGroup optionGroup22 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options23 = options21.addOptionGroup(optionGroup22);
        java.lang.String str24 = options21.toString();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        boolean boolean32 = option29.hasArgName();
        boolean boolean33 = option29.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup34 = options21.getOptionGroup(option29);
        org.apache.commons.cli.DefaultParser defaultParser35 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray43 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties44 = null;
        org.apache.commons.cli.CommandLine commandLine45 = defaultParser35.parse(options36, strArray43, properties44);
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser11.parse(options21, strArray43, true);
        org.apache.commons.cli.DefaultParser defaultParser48 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        boolean boolean57 = option54.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options58 = options49.addOption(option54);
        org.apache.commons.cli.DefaultParser defaultParser59 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray67 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = defaultParser59.parse(options60, strArray67, properties68);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser48.parse(options49, strArray67);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser0.parse(options21, strArray67, properties71);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str24, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine72);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = option35.addValue("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder1.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder1.numberOfArgs(10);
        org.apache.commons.cli.Option.Builder builder9 = builder7.numberOfArgs(100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option10 = builder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("[]");
        java.lang.String str2 = parseException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.ParseException: []" + "'", str2, "org.apache.commons.cli.ParseException: []");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        java.lang.Object obj16 = commandLine10.getParsedOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean18 = commandLine10.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder4 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg();
        org.apache.commons.cli.Option.Builder builder7 = builder5.required(false);
        org.apache.commons.cli.Option.Builder builder8 = builder7.required();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.List<java.lang.String> strList49 = options9.getMatchingOptions("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options53 = options9.addOption("", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        boolean boolean59 = optionGroup54.isRequired();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        java.util.List<java.lang.String> strList67 = option64.getValuesList();
        option64.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup54.setSelected(option64);
        org.apache.commons.cli.Options options71 = options9.addOptionGroup(optionGroup54);
        boolean boolean73 = options71.hasLongOption("hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.CommandLine.Builder builder17 = builder15.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.CommandLine commandLine18 = builder17.build();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(commandLine18);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        boolean boolean22 = option16.hasOptionalArg();
        option16.setArgName("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.Object obj25 = option16.clone();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.MissingOptionException: Missing required options: ", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        java.lang.String str50 = commandLine10.getOptionValue(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        boolean boolean5 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        java.lang.String str12 = option10.getArgName();
        java.util.List<java.lang.String> strList13 = option10.getValuesList();
        option10.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup0.setSelected(option10);
        java.lang.Object obj17 = option10.getType();
        java.lang.String[] strArray18 = option10.getValues();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.util.Collection<java.lang.String> strCollection2 = optionGroup0.getNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strCollection2);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str2 = missingOptionException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str2, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        java.lang.String str11 = option4.getValue();
        java.lang.String str13 = option4.getValue((-1));
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = builder2.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.List<java.lang.String> strList49 = options9.getMatchingOptions("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options53 = options9.addOption("", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        boolean boolean59 = optionGroup54.isRequired();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        java.util.List<java.lang.String> strList67 = option64.getValuesList();
        option64.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup54.setSelected(option64);
        org.apache.commons.cli.Options options71 = options9.addOptionGroup(optionGroup54);
        java.lang.String str72 = options9.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str72, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("hi!");
        java.lang.Throwable[] throwableArray2 = missingOptionException1.getSuppressed();
        java.util.List list3 = missingOptionException1.getMissingOptions();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(list3);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        org.apache.commons.cli.Option.Builder builder36 = org.apache.commons.cli.Option.builder();
        boolean boolean37 = option32.equals((java.lang.Object) builder36);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder6.required();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder9 = builder6.option("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        boolean boolean23 = option20.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options24 = options15.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup25 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options26 = options24.addOptionGroup(optionGroup25);
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        boolean boolean35 = option31.hasLongOpt();
        org.apache.commons.cli.Options options36 = options24.addOption(option31);
        boolean boolean37 = option31.hasLongOpt();
        java.lang.String str39 = commandLine10.getOptionValue(option31, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.lang.String str47 = option44.getValue(10);
        java.lang.String str49 = option44.getValue((int) '#');
        boolean boolean50 = option44.hasArgs();
        java.lang.String str51 = option44.getValue();
        java.lang.String str52 = commandLine10.getOptionValue(option44);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str39, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        boolean boolean22 = option16.hasOptionalArg();
        option16.setArgName("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        option16.setOptionalArg(false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        option4.setValueSeparator('4');
        java.lang.String str11 = option4.getValue("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: []" + "'", str11, "org.apache.commons.cli.UnrecognizedOptionException: []");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        java.util.List<java.lang.String> strList12 = option5.getValuesList();
        option5.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        int int15 = option5.getArgs();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        boolean boolean26 = commandLine10.hasOption('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[]", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = commandLine10.getOptionValue(option46, "hi!");
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj56 = option55.getType();
        java.lang.String str57 = option55.getArgName();
        java.lang.String str58 = commandLine10.getOptionValue(option55);
        boolean boolean59 = option55.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "class java.lang.String");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.MissingOptionException missingOptionException25 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList24);
        java.util.List list26 = missingOptionException25.getMissingOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException27 = new org.apache.commons.cli.MissingOptionException(list26);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray2 = alreadySelectedException1.getSuppressed();
        org.apache.commons.cli.OptionGroup optionGroup3 = alreadySelectedException1.getOptionGroup();
        org.apache.commons.cli.OptionGroup optionGroup4 = alreadySelectedException1.getOptionGroup();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNull(optionGroup4);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg(true);
        org.apache.commons.cli.Option.Builder builder7 = builder5.numberOfArgs((int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.OptionGroup optionGroup16 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options17 = options15.addOptionGroup(optionGroup16);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        boolean boolean26 = option22.hasLongOpt();
        org.apache.commons.cli.Options options27 = options15.addOption(option22);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        java.lang.String str40 = commandLine38.getOptionValue("hi!");
        java.lang.Object obj42 = commandLine38.getParsedOptionValue("");
        java.lang.String[] strArray44 = commandLine38.getOptionValues('4');
        java.lang.String[] strArray45 = commandLine38.getArgs();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.util.Properties properties52 = commandLine38.getOptionProperties(option50);
        org.apache.commons.cli.Options options53 = options15.addOption(option50);
        org.apache.commons.cli.Options options58 = options53.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list59 = options53.getRequiredOptions();
        org.apache.commons.cli.DefaultParser defaultParser61 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser62 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        boolean boolean71 = option68.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options72 = options63.addOption(option68);
        org.apache.commons.cli.DefaultParser defaultParser73 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = defaultParser73.parse(options74, strArray81, properties82);
        org.apache.commons.cli.CommandLine commandLine84 = defaultParser62.parse(options63, strArray81);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine89 = defaultParser61.parse(options63, strArray87, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine91 = defaultParser5.parse(options53, strArray87, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.MissingOptionException; message: Missing required option: ");
        } catch (org.apache.commons.cli.MissingOptionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setAllowPartialMatching(true);
        org.apache.commons.cli.DefaultParser defaultParser3 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(defaultParser3);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        option4.setLongOpt("");
        boolean boolean10 = option4.hasArgs();
        java.util.List<java.lang.String> strList11 = option4.getValuesList();
        org.apache.commons.cli.MissingOptionException missingOptionException12 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList11);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        org.apache.commons.cli.Option[] optionArray47 = commandLine37.getOptions();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(optionArray47);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj38 = option37.getType();
        java.lang.String str39 = option37.getArgName();
        java.lang.String str40 = option37.getValue();
        option37.setValueSeparator(' ');
        java.util.Properties properties43 = commandLine10.getOptionProperties(option37);
        org.apache.commons.cli.Option[] optionArray44 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class java.lang.String");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(optionArray44);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        java.lang.String str44 = option35.getValue();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.cli.OptionGroup optionGroup0 = null;
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = defaultParser1.parse(options2, strArray9, properties10);
        java.util.List<java.lang.String> strList12 = commandLine11.getArgList();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        boolean boolean20 = option17.equals((java.lang.Object) 0);
        option17.setArgName("");
        java.lang.Object obj23 = commandLine11.getParsedOptionValue(option17);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        option28.setValueSeparator(' ');
        java.lang.String str34 = option28.getArgName();
        java.lang.Object obj35 = option28.clone();
        java.lang.String[] strArray36 = commandLine11.getOptionValues(option28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.AlreadySelectedException alreadySelectedException37 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.OptionGroup.getSelected()\" because \"group\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(strArray36);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        option17.setOptionalArg(true);
        java.lang.String str22 = option17.getLongOpt();
        java.lang.String str23 = option17.getLongOpt();
        int int24 = option17.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        boolean boolean54 = options52.hasOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options58 = options52.addOption("[ option:  hi!  ::  :: class java.lang.String ]", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder10 = builder8.option("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        boolean boolean14 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options20 = options9.addOption(option19);
        boolean boolean22 = options9.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options26 = options9.addOption("hi!", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.Object obj22 = option16.getType();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.List<java.lang.String> strList24 = options1.getMatchingOptions("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.MissingOptionException missingOptionException25 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList24);
        java.util.List list26 = missingOptionException25.getMissingOptions();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException28 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray29 = alreadySelectedException28.getSuppressed();
        org.apache.commons.cli.OptionGroup optionGroup30 = alreadySelectedException28.getOptionGroup();
        org.apache.commons.cli.Option option31 = alreadySelectedException28.getOption();
        missingOptionException25.addSuppressed((java.lang.Throwable) alreadySelectedException28);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNull(option31);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: []");
        java.lang.Object obj19 = commandLine10.getOptionObject('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        java.lang.String str11 = option4.getValue();
        char char12 = option4.getValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection30 = options3.getOptions();
        org.apache.commons.cli.Option option32 = options3.getOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options37 = options3.addRequiredOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "[ option:  hi!  ::  :: class java.lang.String ]", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(optionCollection30);
        org.junit.Assert.assertNull(option32);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        boolean boolean7 = optionGroup0.isRequired();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        option18.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option18.setArgName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = option18.addValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        java.lang.String str12 = option4.getOpt();
        boolean boolean13 = option4.hasValueSeparator();
        java.util.List<java.lang.String> strList14 = option4.getValuesList();
        option4.setLongOpt("hi!");
        option4.setLongOpt("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.String str45 = option42.getDescription();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = option42.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArg();
        option4.setValueSeparator('a');
        java.lang.String[] strArray13 = option4.getValues();
        java.lang.String str15 = option4.getValue((int) (byte) 0);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str5 = option4.getDescription();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str5, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("org.apache.commons.cli.ParseException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.ParseException: []' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        java.lang.String str27 = commandLine22.getOptionValue(' ', "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str29 = commandLine22.getOptionValue('4');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str27, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.util.List<java.lang.String> strList38 = commandLine37.getArgList();
        org.apache.commons.cli.Option[] optionArray39 = commandLine37.getOptions();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(optionArray39);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        java.lang.String str11 = option4.getValue();
        java.lang.String str13 = option4.getValue((int) '4');
        boolean boolean14 = option4.hasOptionalArg();
        java.lang.Object obj15 = option4.getType();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class java.lang.String");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder5.required(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option10 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean18 = option17.hasValueSeparator();
        boolean boolean19 = commandLine10.hasOption(option17);
        option17.setOptionalArg(true);
        java.lang.String str22 = option17.getLongOpt();
        java.lang.String str23 = option17.getLongOpt();
        java.lang.String str24 = option17.getOpt();
        java.util.List<java.lang.String> strList25 = option17.getValuesList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        option41.setLongOpt("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        boolean boolean11 = option4.hasArg();
        java.lang.String[] strArray12 = option4.getValues();
        java.lang.String str14 = option4.getValue((int) (byte) 0);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.Object obj20 = commandLine10.getOptionObject("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean22 = commandLine10.hasOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String[] strArray41 = commandLine37.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: []");
        boolean boolean43 = commandLine37.hasOption('\000');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine22.getOptions();
        boolean boolean26 = commandLine22.hasOption("[ option:  hi!  ::  :: class java.lang.String ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor27 = commandLine22.iterator();
        java.lang.String[] strArray29 = commandLine22.getOptionValues('#');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(optionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(optionItor27);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.Option option23 = options21.getOption("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(option23);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options56 = options2.addOption("org.apache.commons.cli.ParseException: []", false, "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.ParseException: []' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        boolean boolean15 = option12.equals((java.lang.Object) 0);
        option12.setArgName("");
        java.lang.String[] strArray18 = option12.getValues();
        option12.setArgs(0);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException21 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option12);
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj27 = option26.getType();
        java.lang.String str29 = option26.getValue(10);
        boolean boolean30 = option26.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup31 = optionGroup0.addOption(option26);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = option26.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class java.lang.String");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(optionGroup31);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        java.lang.String str11 = option4.getValue();
        java.lang.String str13 = option4.getValue((int) '4');
        option4.setLongOpt("org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        option4.setValueSeparator('4');
        org.apache.commons.cli.CommandLine.Builder builder12 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine13 = builder12.build();
        org.apache.commons.cli.CommandLine commandLine14 = builder12.build();
        org.apache.commons.cli.CommandLine.Builder builder16 = builder12.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        boolean boolean26 = option21.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder27 = builder16.addOption(option21);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        boolean boolean36 = option33.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options37 = options28.addOption(option33);
        java.lang.String str39 = option33.getValue("hi!");
        int int40 = option33.getArgs();
        option33.setDescription("hi!");
        java.lang.String str43 = option33.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder44 = builder16.addOption(option33);
        org.apache.commons.cli.CommandLine commandLine45 = builder16.build();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.lang.String str53 = option50.getValue(10);
        java.lang.String str55 = option50.getValue((int) '#');
        boolean boolean56 = option50.hasArg();
        option50.setValueSeparator('a');
        boolean boolean59 = commandLine45.hasOption(option50);
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) option50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Option cannot be cast to class java.lang.Class (org.apache.commons.cli.Option is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder4.numberOfArgs((int) ' ');
        org.apache.commons.cli.Option.Builder builder7 = builder6.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = option46.getValue((int) 'a');
        java.lang.String str51 = option46.getValue();
        option46.setValueSeparator('#');
        java.lang.String str55 = commandLine10.getOptionValue(option46, "org.apache.commons.cli.ParseException: []");
        boolean boolean57 = commandLine10.hasOption("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.ParseException: []" + "'", str55, "org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str22 = commandLine10.getOptionValue('#', "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.longOpt("");
        org.apache.commons.cli.Option option6 = builder5.build();
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getValue();
        boolean boolean8 = option4.hasArg();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(true);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        org.apache.commons.cli.OptionGroup optionGroup12 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options13 = options11.addOptionGroup(optionGroup12);
        java.lang.String str14 = options11.toString();
        boolean boolean16 = options11.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options22 = options11.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser23 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser23.parse(options24, strArray31, properties32);
        java.lang.String str35 = commandLine33.getOptionValue("hi!");
        java.lang.Object obj37 = commandLine33.getParsedOptionValue("");
        java.lang.String[] strArray39 = commandLine33.getOptionValues('4');
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj46 = option45.getType();
        boolean boolean48 = option45.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options49 = options40.addOption(option45);
        java.lang.String str51 = option45.getValue("hi!");
        java.util.List<java.lang.String> strList52 = option45.getValuesList();
        int int53 = option45.getArgs();
        java.lang.String str55 = commandLine33.getOptionValue(option45, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray56 = commandLine33.getArgs();
        org.apache.commons.cli.CommandLine commandLine58 = defaultParser1.parse(options22, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser61 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser62 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        boolean boolean71 = option68.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options72 = options63.addOption(option68);
        org.apache.commons.cli.DefaultParser defaultParser73 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = defaultParser73.parse(options74, strArray81, properties82);
        org.apache.commons.cli.CommandLine commandLine84 = defaultParser62.parse(options63, strArray81);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine89 = defaultParser61.parse(options63, strArray87, false);
        org.apache.commons.cli.CommandLine commandLine90 = defaultParser1.parse(options59, strArray87);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str14, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str55, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine90);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        java.lang.Class<?> wildcardClass76 = options20.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.hasArg(true);
        org.apache.commons.cli.Option.Builder builder3 = builder0.valueSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg(true);
        org.apache.commons.cli.Option.Builder builder6 = builder2.valueSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options9.addOption("hi!", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.util.List<java.lang.String> strList23 = option16.getValuesList();
        java.lang.Class<?> wildcardClass24 = option16.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[ option:  hi!  ::  :: class java.lang.String ]", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.String str3 = unrecognizedOptionException1.getOption();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.String str20 = commandLine10.getOptionValue("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String str22 = commandLine10.getOptionValue(' ');
        boolean boolean24 = commandLine10.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.DefaultParser defaultParser32 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = defaultParser32.parse(options33, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue("hi!");
        java.lang.Object obj46 = commandLine42.getParsedOptionValue("");
        java.lang.String[] strArray48 = commandLine42.getOptionValues('4');
        java.lang.String[] strArray49 = commandLine42.getArgs();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        java.util.Properties properties56 = commandLine42.getOptionProperties(option54);
        option54.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option54.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean61 = option54.isRequired();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException62 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option54);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = option54.addValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.lang.String str74 = options20.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str74, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder7.longOpt("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        boolean boolean9 = option4.hasOptionalArg();
        java.lang.String str10 = option4.toString();
        java.lang.String str12 = option4.getValue("");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str10, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.required(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder7 = builder5.option("org.apache.commons.cli.ParseException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.ParseException: []' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        java.util.List<java.lang.String> strList23 = options21.getMatchingOptions("");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        option4.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        org.apache.commons.cli.Option.Builder builder9 = builder7.required();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArg();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option5 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getValue();
        java.lang.Class<?> wildcardClass8 = option4.getClass();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue('4');
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = commandLine10.getOptionValue(option46, "hi!");
        java.lang.Object obj52 = commandLine10.getParsedOptionValue('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine.Builder builder6 = builder0.addArg("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        option11.setArgName("");
        java.lang.String[] strArray17 = option11.getValues();
        org.apache.commons.cli.CommandLine.Builder builder18 = builder0.addOption(option11);
        org.apache.commons.cli.CommandLine.Builder builder20 = builder18.addArg("hi!");
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj56 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj63 = option62.getType();
        boolean boolean65 = option62.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options66 = options57.addOption(option62);
        java.lang.String str68 = option62.getValue("hi!");
        int int69 = option62.getArgs();
        option62.setDescription("hi!");
        java.lang.String str72 = option62.getLongOpt();
        java.lang.Object obj73 = option62.getType();
        option62.setOptionalArg(true);
        java.lang.String str77 = commandLine29.getOptionValue(option62, "");
        java.lang.String str80 = commandLine29.getOptionValue('a', "[]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser15 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser15.parse(options16, strArray34);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine42 = defaultParser14.parse(options16, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        boolean boolean51 = option48.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options52 = options43.addOption(option48);
        org.apache.commons.cli.OptionGroup optionGroup53 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options54 = options52.addOptionGroup(optionGroup53);
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj60 = option59.getType();
        boolean boolean62 = option59.equals((java.lang.Object) 0);
        boolean boolean63 = option59.hasLongOpt();
        org.apache.commons.cli.Options options64 = options52.addOption(option59);
        java.lang.Object obj65 = option59.clone();
        boolean boolean66 = option59.isRequired();
        java.lang.Object obj67 = commandLine42.getParsedOptionValue(option59);
        java.lang.Object obj68 = commandLine10.getParsedOptionValue(option59);
        java.lang.String str69 = option59.getLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        boolean boolean54 = options52.hasOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean56 = options52.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder3.hasArg();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = options11.getOptions();
        java.util.List<java.lang.String> strList14 = options11.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        option19.setArgName("");
        java.lang.String[] strArray25 = option19.getValues();
        boolean boolean26 = option19.isRequired();
        java.lang.String str27 = option19.getValue();
        org.apache.commons.cli.OptionGroup optionGroup28 = options11.getOptionGroup(option19);
        java.util.List<java.lang.String> strList30 = options11.getMatchingOptions("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        java.lang.String str9 = option4.toString();
        java.lang.String str11 = option4.getValue((int) (short) 100);
        java.lang.Class<?> wildcardClass12 = option4.getClass();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str9, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str52 = commandLine29.getOptionValue(option50, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj54 = commandLine29.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj56 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj63 = option62.getType();
        boolean boolean65 = option62.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options66 = options57.addOption(option62);
        java.lang.String str68 = option62.getValue("hi!");
        int int69 = option62.getArgs();
        option62.setDescription("hi!");
        java.lang.String str72 = option62.getLongOpt();
        java.lang.Object obj73 = option62.getType();
        option62.setOptionalArg(true);
        java.lang.String str77 = commandLine29.getOptionValue(option62, "");
        int int78 = option62.getArgs();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options50 = options44.addOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = option46.getValue((int) 'a');
        java.lang.String str51 = option46.getValue();
        option46.setValueSeparator('#');
        java.lang.String str55 = commandLine10.getOptionValue(option46, "org.apache.commons.cli.ParseException: []");
        option46.setDescription("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.ParseException: []" + "'", str55, "org.apache.commons.cli.ParseException: []");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("", "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        java.util.List<java.lang.String> strList24 = option20.getValuesList();
        option20.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder5.required(true);
        org.apache.commons.cli.Option.Builder builder10 = builder9.hasArg();
        org.apache.commons.cli.Option.Builder builder11 = builder10.required();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        java.lang.String str10 = option4.getValue((int) '4');
        option4.setOptionalArg(false);
        boolean boolean13 = option4.isRequired();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.util.List<java.lang.String> strList47 = commandLine37.getArgList();
        java.util.List<java.lang.String> strList48 = commandLine37.getArgList();
        java.lang.String str50 = commandLine37.getOptionValue(' ');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine.Builder builder6 = builder0.addArg("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        option11.setArgName("");
        java.lang.String[] strArray17 = option11.getValues();
        org.apache.commons.cli.CommandLine.Builder builder18 = builder0.addOption(option11);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = option11.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.argName("[]");
        org.apache.commons.cli.Option.Builder builder3 = builder0.hasArg();
        org.apache.commons.cli.Option.Builder builder5 = builder0.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder7 = builder5.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder9 = builder5.required(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option10 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        boolean boolean14 = commandLine10.hasOption('#');
        java.lang.String str17 = commandLine10.getOptionValue('a', "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str19 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str17, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray33 = commandLine10.getArgs();
        java.lang.String str36 = commandLine10.getOptionValue("[ option:  hi!  ::  :: class java.lang.String ]", "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException3 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException5 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup6 = alreadySelectedException5.getOptionGroup();
        missingOptionException3.addSuppressed((java.lang.Throwable) alreadySelectedException5);
        alreadySelectedException1.addSuppressed((java.lang.Throwable) missingOptionException3);
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException10 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Throwable[] throwableArray11 = unrecognizedOptionException10.getSuppressed();
        alreadySelectedException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException10);
        org.apache.commons.cli.Option option13 = alreadySelectedException1.getOption();
        org.junit.Assert.assertNull(optionGroup6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNull(option13);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.util.List<java.lang.String> strList47 = commandLine37.getArgList();
        java.util.Iterator<org.apache.commons.cli.Option> optionItor48 = commandLine37.iterator();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(optionItor48);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        boolean boolean24 = option21.hasArgName();
        boolean boolean25 = option21.hasArg();
        option21.setOptionalArg(false);
        java.lang.String str28 = option21.getValue();
        java.lang.String str30 = option21.getValue((int) '4');
        boolean boolean31 = option21.hasOptionalArg();
        java.lang.String str33 = commandLine10.getOptionValue(option21, "");
        int int34 = option21.getArgs();
        char char35 = option21.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + char35 + "' != '" + '\000' + "'", char35 == '\000');
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        java.lang.String str13 = options10.toString();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        java.lang.String str20 = option18.getArgName();
        boolean boolean21 = option18.hasArgName();
        boolean boolean22 = option18.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup23 = options10.getOptionGroup(option18);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser0.parse(options10, strArray32, true);
        org.apache.commons.cli.Options options40 = options10.addOption("", false, "hi!");
        org.apache.commons.cli.Options options43 = options10.addOption("", "[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option45 = options10.getOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options50 = options10.addRequiredOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "", false, "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str13, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(option45);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        java.lang.Object obj25 = commandLine22.getParsedOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection48 = options47.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(optionCollection48);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.DefaultParser defaultParser32 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = defaultParser32.parse(options33, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue("hi!");
        java.lang.Object obj46 = commandLine42.getParsedOptionValue("");
        java.lang.String[] strArray48 = commandLine42.getOptionValues('4');
        java.lang.String[] strArray49 = commandLine42.getArgs();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        java.util.Properties properties56 = commandLine42.getOptionProperties(option54);
        option54.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option54.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean61 = option54.isRequired();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException62 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option54);
        org.apache.commons.cli.OptionGroup optionGroup63 = alreadySelectedException62.getOptionGroup();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(optionGroup63);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection42 = options41.getOptions();
        java.util.List<java.lang.String> strList44 = options41.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser1.parse(options41, strArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options49 = options41.addOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionCollection42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(commandLine46);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        java.lang.String[] strArray8 = option4.getValues();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option4.setArgs((-2));
        option4.setDescription("hi!");
        option4.setRequired(false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str5 = option4.getLongOpt();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException37 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException39 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException41 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup42 = alreadySelectedException41.getOptionGroup();
        missingOptionException39.addSuppressed((java.lang.Throwable) alreadySelectedException41);
        alreadySelectedException37.addSuppressed((java.lang.Throwable) missingOptionException39);
        boolean boolean45 = option32.equals((java.lang.Object) alreadySelectedException37);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = option32.addValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean27 = commandLine10.hasOption("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String[] strArray29 = commandLine10.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        java.lang.String str12 = option4.getOpt();
        boolean boolean13 = option4.hasValueSeparator();
        java.lang.String str14 = option4.getOpt();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        java.util.List<java.lang.String> strList24 = option20.getValuesList();
        char char25 = option20.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options14 = options11.addOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.String str3 = unrecognizedOptionException1.getOption();
        java.lang.String str4 = unrecognizedOptionException1.getOption();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        java.lang.String str10 = option4.getArgName();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List list36 = options21.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options39 = options21.addOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        java.lang.String str8 = option6.getArgName();
        option6.setValueSeparator('#');
        optionGroup0.setSelected(option6);
        boolean boolean12 = option6.hasLongOpt();
        java.lang.String str13 = option6.getLongOpt();
        option6.setDescription("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        org.apache.commons.cli.DefaultParser defaultParser54 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser55 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        boolean boolean64 = option61.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options65 = options56.addOption(option61);
        org.apache.commons.cli.DefaultParser defaultParser66 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray74 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = defaultParser66.parse(options67, strArray74, properties75);
        org.apache.commons.cli.CommandLine commandLine77 = defaultParser55.parse(options56, strArray74);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine82 = defaultParser54.parse(options56, strArray80, false);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine85 = defaultParser1.parse(options56, strArray83, true);
        org.apache.commons.cli.Option option87 = options56.getOption("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNull(option87);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        option4.setArgs((int) '#');
        java.lang.String str12 = option4.getArgName();
        boolean boolean13 = option4.hasArg();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.ParseException: []");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String[] strArray41 = commandLine37.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: []");
        java.lang.Object obj43 = commandLine37.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        option4.setArgs(0);
        java.lang.String str13 = option4.toString();
        option4.setRequired(true);
        boolean boolean16 = option4.hasLongOpt();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str13, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str34 = commandLine10.getOptionValue(' ');
        java.lang.Object obj36 = commandLine10.getParsedOptionValue('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.Class<?> wildcardClass23 = options1.getClass();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        java.lang.String str31 = options28.toString();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup41 = options28.getOptionGroup(option36);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean47 = option46.hasValueSeparator();
        org.apache.commons.cli.Options options48 = options28.addOption(option46);
        java.lang.String str50 = option46.getValue((int) 'a');
        java.lang.String str51 = option46.getValue();
        option46.setValueSeparator('#');
        java.lang.String str55 = commandLine10.getOptionValue(option46, "org.apache.commons.cli.ParseException: []");
        java.lang.String str57 = commandLine10.getOptionValue("[]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str31, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.ParseException: []" + "'", str55, "org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.util.List<java.lang.String> strList23 = commandLine10.getArgList();
        java.lang.Object obj25 = commandLine10.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "[]");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("[ option:  hi!  ::  :: class java.lang.String ]", true, "[]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj33 = option32.getType();
        boolean boolean35 = option32.equals((java.lang.Object) 0);
        option32.setValueSeparator(' ');
        optionGroup10.setSelected(option32);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options48 = options39.addOption(option44);
        java.lang.String str50 = option44.getValue("hi!");
        java.util.List<java.lang.String> strList51 = option44.getValuesList();
        int int52 = option44.getArgs();
        org.apache.commons.cli.CommandLine.Builder builder53 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine54 = builder53.build();
        org.apache.commons.cli.CommandLine commandLine55 = builder53.build();
        org.apache.commons.cli.CommandLine.Builder builder57 = builder53.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean58 = option44.equals((java.lang.Object) builder57);
        org.apache.commons.cli.OptionGroup optionGroup59 = optionGroup10.addOption(option44);
        java.lang.String str60 = optionGroup10.getSelected();
        java.lang.String str61 = optionGroup10.getSelected();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(optionGroup59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str52 = commandLine47.getOptionValue("", "[]");
        org.apache.commons.cli.Option[] optionArray53 = commandLine47.getOptions();
        java.lang.String str56 = commandLine47.getOptionValue('a', "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(optionArray53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str56, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        option21.setArgName("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = option21.addValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        option18.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List<java.lang.String> strList32 = option18.getValuesList();
        java.lang.String str34 = option18.getValue("[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str34, "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String str18 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj25 = option24.getType();
        boolean boolean27 = option24.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options28 = options19.addOption(option24);
        org.apache.commons.cli.OptionGroup optionGroup29 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options30 = options28.addOptionGroup(optionGroup29);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        boolean boolean39 = option35.hasLongOpt();
        org.apache.commons.cli.Options options40 = options28.addOption(option35);
        java.lang.Object obj41 = option35.clone();
        java.lang.String str43 = commandLine10.getOptionValue(option35, "hi!");
        java.lang.String str46 = commandLine10.getOptionValue("org.apache.commons.cli.MissingOptionException: Missing required options: ", "");
        boolean boolean48 = commandLine10.hasOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        boolean boolean36 = commandLine34.hasOption("hi!");
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        java.lang.String str43 = option41.getArgName();
        option41.setValueSeparator('#');
        java.lang.String[] strArray46 = commandLine34.getOptionValues(option41);
        boolean boolean47 = commandLine22.hasOption(option41);
        boolean boolean48 = option41.hasOptionalArg();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        java.lang.String str28 = option18.getDescription();
        java.lang.String str29 = option18.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str29, "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser defaultParser1 = builder0.build();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        org.apache.commons.cli.Options options14 = options2.addOption("", "hi!");
        boolean boolean16 = options14.hasShortOption("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser17 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj24 = option23.getType();
        boolean boolean26 = option23.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options27 = options18.addOption(option23);
        org.apache.commons.cli.OptionGroup optionGroup28 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options29 = options27.addOptionGroup(optionGroup28);
        java.lang.String str30 = options27.toString();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        java.lang.String str37 = option35.getArgName();
        boolean boolean38 = option35.hasArgName();
        boolean boolean39 = option35.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup40 = options27.getOptionGroup(option35);
        org.apache.commons.cli.DefaultParser defaultParser41 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = defaultParser41.parse(options42, strArray49, properties50);
        org.apache.commons.cli.CommandLine commandLine53 = defaultParser17.parse(options27, strArray49, true);
        org.apache.commons.cli.DefaultParser defaultParser54 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj61 = option60.getType();
        boolean boolean63 = option60.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options64 = options55.addOption(option60);
        org.apache.commons.cli.DefaultParser defaultParser65 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray73 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = defaultParser65.parse(options66, strArray73, properties74);
        org.apache.commons.cli.CommandLine commandLine76 = defaultParser54.parse(options55, strArray73);
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties82 = commandLine76.getOptionProperties(option81);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj88 = option87.getType();
        boolean boolean90 = option87.equals((java.lang.Object) 0);
        option87.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option87.setArgs((-2));
        option87.setDescription("hi!");
        java.util.Properties properties97 = commandLine76.getOptionProperties(option87);
        org.apache.commons.cli.CommandLine commandLine99 = defaultParser1.parse(options14, strArray49, properties97, false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaultParser1);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str30, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(properties97);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser3 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        boolean boolean12 = option9.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options13 = options4.addOption(option9);
        org.apache.commons.cli.DefaultParser defaultParser14 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser14.parse(options15, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine25 = defaultParser3.parse(options4, strArray22);
        org.apache.commons.cli.DefaultParser defaultParser26 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser26.parse(options27, strArray34, properties35);
        java.lang.String str38 = commandLine36.getOptionValue("hi!");
        java.lang.Object obj40 = commandLine36.getParsedOptionValue("");
        java.lang.String[] strArray42 = commandLine36.getOptionValues('4');
        java.lang.String[] strArray43 = commandLine36.getArgs();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj49 = option48.getType();
        java.util.Properties properties50 = commandLine36.getOptionProperties(option48);
        org.apache.commons.cli.CommandLine commandLine52 = defaultParser1.parse(options2, strArray22, properties50, true);
        org.apache.commons.cli.DefaultParser defaultParser54 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser55 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        boolean boolean64 = option61.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options65 = options56.addOption(option61);
        org.apache.commons.cli.DefaultParser defaultParser66 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray74 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = defaultParser66.parse(options67, strArray74, properties75);
        org.apache.commons.cli.CommandLine commandLine77 = defaultParser55.parse(options56, strArray74);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine82 = defaultParser54.parse(options56, strArray80, false);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine85 = defaultParser1.parse(options56, strArray83, true);
        org.apache.commons.cli.Option option90 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj91 = option90.getType();
        java.lang.String str93 = option90.getValue(10);
        java.lang.String str95 = option90.getValue((int) '#');
        option90.setArgs((int) '#');
        org.apache.commons.cli.Options options98 = options56.addOption(option90);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "class java.lang.String");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(options98);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.util.List<java.lang.String> strList47 = commandLine37.getArgList();
        java.util.List<java.lang.String> strList48 = commandLine37.getArgList();
        java.lang.String str50 = commandLine37.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.Object obj52 = commandLine37.getOptionObject("");
        java.lang.String str55 = commandLine37.getOptionValue("hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str55, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        optionGroup10.setRequired(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.Throwable[] throwableArray3 = unrecognizedOptionException1.getSuppressed();
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("hi!");
        unrecognizedOptionException1.addSuppressed((java.lang.Throwable) missingOptionException5);
        java.util.List list7 = missingOptionException5.getMissingOptions();
        java.util.List list8 = missingOptionException5.getMissingOptions();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNull(list7);
        org.junit.Assert.assertNull(list8);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        boolean boolean55 = option52.equals((java.lang.Object) 0);
        option52.setDescription("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray58 = commandLine47.getOptionValues(option52);
        java.lang.Object obj60 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        boolean boolean25 = commandLine22.hasOption('#');
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str31 = commandLine22.getOptionValue(option30);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray35 = option27.getValues();
        org.apache.commons.cli.Options options36 = options1.addOption(option27);
        java.util.List<java.lang.String> strList38 = options1.getMatchingOptions("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder10 = builder8.setAllowPartialMatching(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.OptionGroup optionGroup16 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options17 = options15.addOptionGroup(optionGroup16);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection18 = options17.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser19 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser19.parse(options20, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser5.parse(options17, strArray27, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options36 = options17.addRequiredOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", true, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionCollection18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray2 = alreadySelectedException1.getSuppressed();
        org.apache.commons.cli.Option option3 = alreadySelectedException1.getOption();
        java.lang.String str4 = alreadySelectedException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(option3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.cli.AlreadySelectedException: " + "'", str4, "org.apache.commons.cli.AlreadySelectedException: ");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        boolean boolean10 = option4.hasOptionalArg();
        java.lang.String str11 = option4.getLongOpt();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray33 = commandLine10.getArgs();
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        java.util.List<java.lang.String> strList45 = commandLine44.getArgList();
        java.lang.String str48 = commandLine44.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        boolean boolean57 = option54.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options58 = options49.addOption(option54);
        org.apache.commons.cli.OptionGroup optionGroup59 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options60 = options58.addOptionGroup(optionGroup59);
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj66 = option65.getType();
        boolean boolean68 = option65.equals((java.lang.Object) 0);
        boolean boolean69 = option65.hasLongOpt();
        org.apache.commons.cli.Options options70 = options58.addOption(option65);
        boolean boolean71 = option65.hasLongOpt();
        java.lang.String str73 = commandLine44.getOptionValue(option65, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean74 = commandLine10.hasOption(option65);
        option65.setOptionalArg(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str48, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str73, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        option4.setValueSeparator('#');
        java.lang.String str10 = option4.getValue((int) '4');
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        java.lang.String str33 = options32.toString();
        org.apache.commons.cli.OptionGroup optionGroup34 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str35 = optionGroup34.getSelected();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        java.lang.String str42 = option40.getArgName();
        option40.setValueSeparator('#');
        optionGroup34.setSelected(option40);
        org.apache.commons.cli.Options options46 = options32.addOption(option40);
        java.util.List list47 = options32.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) options32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Options cannot be cast to class java.lang.Class (org.apache.commons.cli.Options is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str33, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(list47);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        boolean boolean11 = option4.hasValueSeparator();
        char char12 = option4.getValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + ' ' + "'", char12 == ' ');
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        java.lang.String str24 = option20.getLongOpt();
        boolean boolean25 = option20.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder6 = builder4.numberOfArgs((int) (short) 10);
        org.apache.commons.cli.Option.Builder builder7 = builder4.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        boolean boolean14 = options9.hasLongOption("hi!");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection15 = options9.getOptions();
        java.lang.String str16 = options9.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(optionCollection15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str16, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        java.util.List<java.lang.String> strList24 = option20.getValuesList();
        boolean boolean25 = option20.hasArgs();
        org.apache.commons.cli.CommandLine.Builder builder26 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine27 = builder26.build();
        org.apache.commons.cli.CommandLine commandLine28 = builder26.build();
        org.apache.commons.cli.CommandLine.Builder builder30 = builder26.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        java.lang.String str37 = option35.getArgName();
        option35.setValueSeparator('#');
        boolean boolean40 = option35.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder41 = builder30.addOption(option35);
        // The following exception was thrown during execution in test generation
        try {
            option20.setType((java.lang.Object) builder41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.CommandLine$Builder cannot be cast to class java.lang.Class (org.apache.commons.cli.CommandLine$Builder is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray33 = commandLine10.getArgs();
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        java.util.List<java.lang.String> strList45 = commandLine44.getArgList();
        java.lang.String str48 = commandLine44.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj55 = option54.getType();
        boolean boolean57 = option54.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options58 = options49.addOption(option54);
        org.apache.commons.cli.OptionGroup optionGroup59 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options60 = options58.addOptionGroup(optionGroup59);
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj66 = option65.getType();
        boolean boolean68 = option65.equals((java.lang.Object) 0);
        boolean boolean69 = option65.hasLongOpt();
        org.apache.commons.cli.Options options70 = options58.addOption(option65);
        boolean boolean71 = option65.hasLongOpt();
        java.lang.String str73 = commandLine44.getOptionValue(option65, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean74 = commandLine10.hasOption(option65);
        option65.setDescription("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str48, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str73, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.Options options12 = options0.addOption("", "hi!");
        boolean boolean14 = options12.hasShortOption("[ option:  hi!  ::  :: class java.lang.String ]");
        boolean boolean16 = options12.hasOption("org.apache.commons.cli.UnrecognizedOptionException: []");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options20 = options12.addOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", false, "org.apache.commons.cli.ParseException: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder8 = builder6.longOpt("");
        org.apache.commons.cli.Option.Builder builder9 = builder8.required();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        option16.setRequired(false);
        java.lang.String[] strArray24 = option16.getValues();
        option16.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        option16.setRequired(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list2 = missingOptionException1.getMissingOptions();
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException4 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str5 = unrecognizedOptionException4.getOption();
        missingOptionException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException4);
        java.lang.String str7 = unrecognizedOptionException4.toString();
        org.junit.Assert.assertNull(list2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str7, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser7 = builder0.build();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj14 = option13.getType();
        boolean boolean16 = option13.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options17 = options8.addOption(option13);
        org.apache.commons.cli.OptionGroup optionGroup18 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options19 = options17.addOptionGroup(optionGroup18);
        java.lang.String str20 = options17.toString();
        boolean boolean22 = options17.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options28 = options17.addOption(option27);
        org.apache.commons.cli.DefaultParser defaultParser29 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.DefaultParser defaultParser40 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray48 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = defaultParser40.parse(options41, strArray48, properties49);
        org.apache.commons.cli.CommandLine commandLine51 = defaultParser29.parse(options30, strArray48);
        org.apache.commons.cli.CommandLine commandLine53 = defaultParser7.parse(options17, strArray48, false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaultParser7);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str20, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine53);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        java.lang.Object obj25 = commandLine22.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        java.util.List list75 = options20.getRequiredOptions();
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj81 = option80.getType();
        java.lang.String str82 = option80.getArgName();
        boolean boolean83 = option80.hasArgName();
        option80.setLongOpt("");
        boolean boolean86 = option80.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup87 = options20.getOptionGroup(option80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options92 = options20.addRequiredOption("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class java.lang.String");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        option22.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option22.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean29 = option22.isRequired();
        option22.setArgs((-1));
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        java.lang.String str34 = option28.getValue("hi!");
        java.util.List<java.lang.String> strList35 = option28.getValuesList();
        option28.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.Object obj38 = commandLine10.getParsedOptionValue(option28);
        char char39 = option28.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        boolean boolean26 = commandLine10.hasOption(' ');
        org.apache.commons.cli.OptionGroup optionGroup27 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str28 = optionGroup27.getSelected();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        option33.setValueSeparator('#');
        optionGroup27.setSelected(option33);
        boolean boolean39 = option33.hasArgs();
        boolean boolean40 = commandLine10.hasOption(option33);
        java.lang.String str41 = option33.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str41, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        org.apache.commons.cli.DefaultParser defaultParser30 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray38 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = defaultParser30.parse(options31, strArray38, properties39);
        java.lang.String str42 = commandLine40.getOptionValue("hi!");
        java.lang.Object obj44 = commandLine40.getParsedOptionValue("");
        java.lang.String[] strArray46 = commandLine40.getOptionValues('4');
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj53 = option52.getType();
        boolean boolean55 = option52.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options56 = options47.addOption(option52);
        java.lang.String str58 = option52.getValue("hi!");
        java.util.List<java.lang.String> strList59 = option52.getValuesList();
        int int60 = option52.getArgs();
        java.lang.String str62 = commandLine40.getOptionValue(option52, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.lang.String str69 = option67.getArgName();
        java.lang.String str70 = option67.getValue();
        option67.setValueSeparator(' ');
        java.util.Properties properties73 = commandLine40.getOptionProperties(option67);
        boolean boolean74 = option67.hasLongOpt();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException75 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option67);
        option67.setOptionalArg(false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str62, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("hi!");
        java.util.List<java.lang.String> strList25 = commandLine22.getArgList();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.Iterator<org.apache.commons.cli.Option> optionItor14 = commandLine10.iterator();
        org.apache.commons.cli.OptionGroup optionGroup15 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str16 = optionGroup15.getSelected();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        java.lang.String str23 = option21.getArgName();
        option21.setValueSeparator('#');
        optionGroup15.setSelected(option21);
        boolean boolean27 = option21.hasLongOpt();
        boolean boolean28 = commandLine10.hasOption(option21);
        java.lang.Object obj29 = option21.getType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(optionItor14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List list36 = options21.getRequiredOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException37 = new org.apache.commons.cli.MissingOptionException(list36);
        java.lang.String str38 = missingOptionException37.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str38, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        char char12 = option4.getValueSeparator();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option9 = builder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Either opt or longOpt must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder1.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder1.numberOfArgs(10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder9 = builder1.option("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        org.apache.commons.cli.Options options53 = options9.addOption(option52);
        option52.setRequired(true);
        java.lang.String str56 = option52.getArgName();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[]" + "'", str1, "[]");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        boolean boolean11 = option4.hasArg();
        java.lang.String[] strArray12 = option4.getValues();
        org.apache.commons.cli.Option.Builder builder13 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder15 = builder13.hasArg(true);
        org.apache.commons.cli.Option.Builder builder16 = builder15.hasArgs();
        org.apache.commons.cli.Option.Builder builder18 = builder16.required(true);
        boolean boolean19 = option4.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.Object obj39 = commandLine37.getOptionObject("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        boolean boolean47 = option44.equals((java.lang.Object) 0);
        option44.setArgName("");
        java.lang.String[] strArray50 = option44.getValues();
        option44.setArgs(0);
        java.lang.String str53 = option44.toString();
        option44.setRequired(true);
        java.lang.String str56 = commandLine37.getOptionValue(option44);
        java.lang.String str57 = option44.getDescription();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException59 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.MissingOptionException missingOptionException61 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException63 = new org.apache.commons.cli.AlreadySelectedException("");
        org.apache.commons.cli.OptionGroup optionGroup64 = alreadySelectedException63.getOptionGroup();
        missingOptionException61.addSuppressed((java.lang.Throwable) alreadySelectedException63);
        alreadySelectedException59.addSuppressed((java.lang.Throwable) missingOptionException61);
        // The following exception was thrown during execution in test generation
        try {
            option44.setType((java.lang.Object) missingOptionException61);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.MissingOptionException cannot be cast to class java.lang.Class (org.apache.commons.cli.MissingOptionException is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str53, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(optionGroup64);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        java.lang.String str14 = optionGroup10.toString();
        java.lang.String str15 = optionGroup10.getSelected();
        optionGroup10.setRequired(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        boolean boolean5 = optionGroup0.isRequired();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj11 = option10.getType();
        java.lang.String str12 = option10.getArgName();
        java.util.List<java.lang.String> strList13 = option10.getValuesList();
        option10.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup0.setSelected(option10);
        org.apache.commons.cli.DefaultParser defaultParser17 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj24 = option23.getType();
        boolean boolean26 = option23.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options27 = options18.addOption(option23);
        org.apache.commons.cli.DefaultParser defaultParser28 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = defaultParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.CommandLine commandLine39 = defaultParser17.parse(options18, strArray36);
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties45 = commandLine39.getOptionProperties(option44);
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj51 = option50.getType();
        java.lang.String str52 = option50.getArgName();
        java.lang.String str54 = commandLine39.getOptionValue(option50, "");
        java.lang.String str55 = option50.getValue();
        org.apache.commons.cli.OptionGroup optionGroup56 = optionGroup0.addOption(option50);
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj62 = option61.getType();
        java.lang.String str63 = option61.getArgName();
        boolean boolean64 = option61.hasArgName();
        option61.setLongOpt("");
        boolean boolean67 = option61.hasArgs();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException68 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option61);
        java.lang.String str69 = optionGroup0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class java.lang.String");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(optionGroup56);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class java.lang.String");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[- ]" + "'", str69, "[- ]");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser defaultParser7 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaultParser7);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("[]");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException43 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option36);
        optionGroup10.setRequired(true);
        optionGroup10.setRequired(true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str14 = option4.getValue((int) (short) 0);
        option4.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean17 = option4.hasArg();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.valueSeparator('4');
        org.apache.commons.cli.Option.Builder builder4 = builder2.longOpt("org.apache.commons.cli.ParseException: []");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        boolean boolean11 = option4.hasArgName();
        java.lang.String str12 = option4.getValue();
        java.lang.Object obj13 = option4.getType();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("hi!");
        java.lang.String str2 = unrecognizedOptionException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str2, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        boolean boolean17 = commandLine10.hasOption('a');
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option20 = null;
        java.lang.Object obj21 = commandLine10.getParsedOptionValue(option20);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.longOpt("");
        org.apache.commons.cli.Option option6 = builder3.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(option6);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("hi!");
        java.lang.Class<?> wildcardClass25 = commandLine22.getClass();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setRequired(true);
        java.lang.String str13 = option4.getArgName();
        java.lang.String str15 = option4.getValue((int) (short) 10);
        java.lang.String str16 = option4.getValue();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        optionGroup0.setRequired(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setArgName("");
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getArgs();
        java.lang.String str12 = option4.getArgName();
        int int13 = option4.getArgs();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(false);
        org.apache.commons.cli.DefaultParser defaultParser5 = builder4.build();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj12 = option11.getType();
        boolean boolean14 = option11.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options15 = options6.addOption(option11);
        org.apache.commons.cli.OptionGroup optionGroup16 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options17 = options15.addOptionGroup(optionGroup16);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection18 = options17.getOptions();
        org.apache.commons.cli.DefaultParser defaultParser19 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser19.parse(options20, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = defaultParser5.parse(options17, strArray27, false);
        org.apache.commons.cli.DefaultParser defaultParser33 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj41 = option40.getType();
        boolean boolean43 = option40.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options44 = options35.addOption(option40);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = defaultParser34.parse(options35, strArray53);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine61 = defaultParser33.parse(options35, strArray59, false);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        boolean boolean70 = option67.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options71 = options62.addOption(option67);
        org.apache.commons.cli.OptionGroup optionGroup72 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options73 = options71.addOptionGroup(optionGroup72);
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj79 = option78.getType();
        boolean boolean81 = option78.equals((java.lang.Object) 0);
        boolean boolean82 = option78.hasLongOpt();
        org.apache.commons.cli.Options options83 = options71.addOption(option78);
        java.lang.Object obj84 = option78.clone();
        boolean boolean85 = option78.isRequired();
        java.lang.Object obj86 = commandLine61.getParsedOptionValue(option78);
        boolean boolean87 = commandLine31.hasOption(option78);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaultParser5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionCollection18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        boolean boolean15 = option12.equals((java.lang.Object) 0);
        option12.setArgName("");
        java.lang.String[] strArray18 = option12.getValues();
        option12.setArgs(0);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException21 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option12);
        org.apache.commons.cli.Option option22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.AlreadySelectedException alreadySelectedException23 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.Option.getKey()\" because \"option\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        option4.setLongOpt("");
        option4.setDescription("");
        org.apache.commons.cli.Option.Builder builder13 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder14 = builder13.required();
        org.apache.commons.cli.Option.Builder builder15 = builder14.hasArg();
        org.apache.commons.cli.Option.Builder builder16 = builder14.required();
        org.apache.commons.cli.Option.Builder builder18 = builder14.longOpt("");
        org.apache.commons.cli.Option.Builder builder20 = builder18.desc("");
        org.apache.commons.cli.Option.Builder builder21 = builder18.hasArg();
        org.apache.commons.cli.Option.Builder builder22 = builder21.hasArg();
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) builder22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Option$Builder cannot be cast to class java.lang.Class (org.apache.commons.cli.Option$Builder is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        boolean boolean31 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        optionGroup10.setSelected(option36);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str16 = commandLine10.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        java.lang.String[] strArray27 = commandLine10.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(strArray27);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        java.lang.String str42 = option31.toString();
        java.lang.Object obj43 = option31.getType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str42, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.Throwable[] throwableArray3 = unrecognizedOptionException1.getSuppressed();
        java.lang.String str4 = unrecognizedOptionException1.getOption();
        java.lang.String str5 = unrecognizedOptionException1.toString();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str5, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str52 = commandLine47.getOptionValue("", "[]");
        java.lang.String[] strArray54 = commandLine47.getOptionValues('#');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNull(strArray54);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Options options52 = options47.addRequiredOption("", "org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "hi!");
        java.util.List list53 = options47.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        java.util.Collection<java.lang.String> strCollection59 = optionGroup54.getNames();
        org.apache.commons.cli.Options options60 = options47.addOptionGroup(optionGroup54);
        org.apache.commons.cli.Options options63 = options47.addOption("", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options67 = options47.addOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", false, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strCollection59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(options63);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.CommandLine commandLine5 = builder4.build();
        org.apache.commons.cli.CommandLine commandLine6 = builder4.build();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(commandLine5);
        org.junit.Assert.assertNotNull(commandLine6);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        boolean boolean45 = option35.hasLongOpt();
        boolean boolean46 = option35.hasArgName();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.cli.OptionGroup optionGroup0 = null;
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        option5.setArgName("");
        java.lang.String[] strArray11 = option5.getValues();
        option5.setLongOpt("");
        java.lang.String str14 = option5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.AlreadySelectedException alreadySelectedException15 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.OptionGroup.getSelected()\" because \"group\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ option:    ::  :: class java.lang.String ]" + "'", str14, "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.hasArg(true);
        org.apache.commons.cli.Option.Builder builder7 = builder2.argName("hi!");
        org.apache.commons.cli.Option.Builder builder9 = builder7.valueSeparator('a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = defaultParser2.parse(options3, strArray10, properties11);
        java.util.List<java.lang.String> strList13 = commandLine12.getArgList();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        option18.setArgName("");
        java.lang.Object obj24 = commandLine12.getParsedOptionValue(option18);
        optionGroup0.setSelected(option18);
        boolean boolean26 = optionGroup0.isRequired();
        java.lang.String str27 = optionGroup0.getSelected();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection28 = optionGroup0.getOptions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(optionCollection28);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException43 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option36);
        org.apache.commons.cli.Option option44 = alreadySelectedException43.getOption();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(option44);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str15 = commandLine10.getOptionValue(' ');
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj21 = option20.getType();
        java.lang.String str22 = option20.getArgName();
        boolean boolean23 = commandLine10.hasOption(option20);
        java.lang.String[] strArray25 = commandLine10.getOptionValues(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class java.lang.String");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strArray25);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        java.lang.String str23 = options20.toString();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasArgName();
        boolean boolean32 = option28.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options20.getOptionGroup(option28);
        org.apache.commons.cli.DefaultParser defaultParser34 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = defaultParser34.parse(options35, strArray42, properties43);
        org.apache.commons.cli.DefaultParser defaultParser45 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = defaultParser45.parse(options46, strArray53, properties54);
        java.lang.String str57 = commandLine55.getOptionValue("hi!");
        java.lang.Object obj59 = commandLine55.getParsedOptionValue("");
        java.lang.String[] strArray61 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray62 = commandLine55.getArgs();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj68 = option67.getType();
        java.util.Properties properties69 = commandLine55.getOptionProperties(option67);
        org.apache.commons.cli.CommandLine commandLine70 = defaultParser0.parse(options20, strArray42, properties69);
        boolean boolean72 = options20.hasLongOption("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List list73 = options20.getRequiredOptions();
        java.util.List list74 = options20.getRequiredOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException75 = new org.apache.commons.cli.MissingOptionException(list74);
        java.util.List list76 = missingOptionException75.getMissingOptions();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException78 = new org.apache.commons.cli.AlreadySelectedException("");
        java.lang.Throwable[] throwableArray79 = alreadySelectedException78.getSuppressed();
        org.apache.commons.cli.Option option80 = alreadySelectedException78.getOption();
        org.apache.commons.cli.Option option81 = alreadySelectedException78.getOption();
        org.apache.commons.cli.OptionGroup optionGroup82 = alreadySelectedException78.getOptionGroup();
        missingOptionException75.addSuppressed((java.lang.Throwable) alreadySelectedException78);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str23, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNull(option80);
        org.junit.Assert.assertNull(option81);
        org.junit.Assert.assertNull(optionGroup82);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.Throwable[] throwableArray3 = unrecognizedOptionException1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = unrecognizedOptionException1.getSuppressed();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("org.apache.commons.cli.AlreadySelectedException: ", "[ option:    ::  :: class java.lang.String ]", false, "org.apache.commons.cli.AlreadySelectedException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.AlreadySelectedException: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser5 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray13 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = defaultParser5.parse(options6, strArray13, properties14);
        java.lang.String str17 = commandLine15.getOptionValue("hi!");
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean23 = option22.hasValueSeparator();
        boolean boolean24 = commandLine15.hasOption(option22);
        option22.setOptionalArg(true);
        java.lang.String str27 = option22.getLongOpt();
        java.lang.String str28 = option22.getLongOpt();
        java.lang.String str29 = option22.getOpt();
        org.apache.commons.cli.CommandLine.Builder builder30 = builder0.addOption(option22);
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        boolean boolean49 = option46.equals((java.lang.Object) 0);
        boolean boolean50 = option46.hasLongOpt();
        org.apache.commons.cli.Options options51 = options39.addOption(option46);
        java.lang.Object obj52 = option46.clone();
        boolean boolean53 = option46.isRequired();
        java.lang.Object obj54 = commandLine29.getParsedOptionValue(option46);
        java.lang.String[] strArray55 = commandLine29.getArgs();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.UnrecognizedOptionException: hi!' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj37 = option36.getType();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasArgName();
        boolean boolean40 = option36.hasArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException43 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option36);
        optionGroup10.setRequired(false);
        org.apache.commons.cli.Option option46 = null;
        optionGroup10.setSelected(option46);
        org.apache.commons.cli.DefaultParser defaultParser48 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = defaultParser48.parse(options49, strArray56, properties57);
        java.lang.String str60 = commandLine58.getOptionValue("hi!");
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean66 = option65.hasValueSeparator();
        boolean boolean67 = commandLine58.hasOption(option65);
        option65.setOptionalArg(true);
        java.lang.String str70 = option65.getLongOpt();
        boolean boolean71 = option65.hasLongOpt();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException72 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option65);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class java.lang.String");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.longOpt("[]");
        org.apache.commons.cli.Option.Builder builder5 = builder1.valueSeparator('4');
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("hi!");
        org.apache.commons.cli.Option.Builder builder9 = builder7.hasArg(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.longOpt("");
        org.apache.commons.cli.Option.Builder builder7 = builder5.desc("");
        org.apache.commons.cli.Option.Builder builder9 = builder7.hasArg(false);
        org.apache.commons.cli.Option.Builder builder11 = builder9.longOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List<java.lang.String> strList37 = options21.getMatchingOptions("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.MissingOptionException missingOptionException38 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList37);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj35 = option34.getType();
        java.lang.String str37 = option34.getValue(10);
        java.lang.String str39 = option34.getValue((int) '#');
        boolean boolean40 = option34.hasArgs();
        option34.setRequired(true);
        java.lang.String str43 = option34.getArgName();
        java.lang.Object obj44 = option34.getType();
        java.lang.String str45 = commandLine29.getOptionValue(option34);
        java.lang.String[] strArray46 = option34.getValues();
        java.lang.String str47 = option34.getDescription();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class java.lang.String");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class java.lang.String");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        java.lang.String str8 = option6.getArgName();
        option6.setValueSeparator('#');
        optionGroup0.setSelected(option6);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = option6.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder2 = builder0.hasArg(true);
        org.apache.commons.cli.Option.Builder builder3 = builder2.hasArgs();
        org.apache.commons.cli.Option.Builder builder5 = builder3.required(true);
        org.apache.commons.cli.Option.Builder builder7 = builder5.longOpt("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.List list36 = options21.getRequiredOptions();
        java.util.List list37 = options21.getRequiredOptions();
        boolean boolean39 = options21.hasShortOption("[]");
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj46 = option45.getType();
        boolean boolean48 = option45.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options49 = options40.addOption(option45);
        org.apache.commons.cli.OptionGroup optionGroup50 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options51 = options49.addOptionGroup(optionGroup50);
        java.lang.String str52 = optionGroup50.getSelected();
        boolean boolean53 = optionGroup50.isRequired();
        java.lang.String str54 = optionGroup50.toString();
        org.apache.commons.cli.CommandLine.Builder builder55 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine56 = builder55.build();
        org.apache.commons.cli.CommandLine commandLine57 = builder55.build();
        org.apache.commons.cli.CommandLine.Builder builder59 = builder55.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        option64.setValueSeparator('#');
        boolean boolean69 = option64.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder70 = builder59.addOption(option64);
        java.lang.String[] strArray71 = option64.getValues();
        optionGroup50.setSelected(option64);
        org.apache.commons.cli.OptionGroup optionGroup73 = options21.getOptionGroup(option64);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertNull(optionGroup73);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder0.setAllowPartialMatching(true);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder4.setAllowPartialMatching(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = option21.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.DefaultParser defaultParser8 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = defaultParser8.parse(options9, strArray16, properties17);
        java.lang.String str20 = commandLine18.getOptionValue("hi!");
        java.lang.Object obj22 = commandLine18.getParsedOptionValue("");
        java.lang.String[] strArray24 = commandLine18.getOptionValues('4');
        java.lang.String[] strArray25 = commandLine18.getArgs();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj31 = option30.getType();
        java.util.Properties properties32 = commandLine18.getOptionProperties(option30);
        boolean boolean33 = option30.hasArg();
        optionGroup0.setSelected(option30);
        java.lang.String str35 = option30.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        java.lang.String str13 = options10.toString();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        java.lang.String str20 = option18.getArgName();
        boolean boolean21 = option18.hasArgName();
        boolean boolean22 = option18.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup23 = options10.getOptionGroup(option18);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine36 = defaultParser0.parse(options10, strArray32, true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        boolean boolean45 = option42.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options46 = options37.addOption(option42);
        org.apache.commons.cli.OptionGroup optionGroup47 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options48 = options46.addOptionGroup(optionGroup47);
        java.lang.String str49 = options46.toString();
        boolean boolean51 = options46.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.DefaultParser defaultParser52 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = defaultParser52.parse(options53, strArray60, properties61);
        java.util.List<java.lang.String> strList63 = commandLine62.getArgList();
        java.lang.String str66 = commandLine62.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean68 = commandLine62.hasOption('4');
        java.lang.String[] strArray70 = commandLine62.getOptionValues(' ');
        org.apache.commons.cli.DefaultParser defaultParser71 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray79 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = defaultParser71.parse(options72, strArray79, properties80);
        java.lang.String str83 = commandLine81.getOptionValue("hi!");
        org.apache.commons.cli.Option option88 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean89 = option88.hasValueSeparator();
        boolean boolean90 = commandLine81.hasOption(option88);
        option88.setOptionalArg(true);
        java.lang.String str93 = option88.getLongOpt();
        java.lang.String str94 = commandLine62.getOptionValue(option88);
        java.lang.String[] strArray95 = commandLine62.getArgs();
        org.apache.commons.cli.CommandLine commandLine97 = defaultParser0.parse(options46, strArray95, true);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str13, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str49, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str66, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine97);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        boolean boolean9 = option4.hasValueSeparator();
        java.lang.String str11 = option4.getValue((int) (short) 1);
        boolean boolean12 = option4.hasArg();
        option4.setArgName("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("org.apache.commons.cli.UnrecognizedOptionException: []");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "hi!", false, "");
        org.apache.commons.cli.Options options53 = options9.addOption(option52);
        boolean boolean54 = option52.hasArgName();
        java.lang.String str55 = option52.getValue();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("[]", "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        boolean boolean14 = options9.hasLongOption("hi!");
        java.util.Collection<org.apache.commons.cli.Option> optionCollection15 = options9.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options17 = options9.addOptionGroup(optionGroup16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"org.apache.commons.cli.OptionGroup.isRequired()\" because \"group\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(optionCollection15);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean27 = commandLine10.hasOption(' ');
        java.lang.String str30 = commandLine10.getOptionValue("[- ]", "hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        boolean boolean27 = commandLine10.hasOption(' ');
        java.lang.String[] strArray29 = commandLine10.getOptionValues("[- ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[- ]");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.String str40 = commandLine37.getOptionValue('a', "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str43 = commandLine37.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String[] strArray45 = commandLine37.getOptionValues('a');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str40, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str43, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNull(strArray45);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setAllowPartialMatching(true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        org.apache.commons.cli.Option.Builder builder10 = builder7.hasArg(true);
        org.apache.commons.cli.Option.Builder builder12 = builder10.argName("[]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str14 = option4.getValue((int) (short) 0);
        java.lang.String str15 = option4.getDescription();
        boolean boolean16 = option4.isRequired();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.longOpt("");
        org.apache.commons.cli.Option option6 = builder5.build();
        org.apache.commons.cli.Option.Builder builder7 = builder5.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        option4.setLongOpt("");
        java.lang.Object obj10 = option4.getType();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj16 = option15.getType();
        boolean boolean18 = option15.equals((java.lang.Object) 0);
        option15.setArgName("");
        java.lang.String[] strArray21 = option15.getValues();
        boolean boolean22 = option15.hasArgName();
        java.lang.String str23 = option15.getOpt();
        boolean boolean24 = option15.hasValueSeparator();
        java.util.List<java.lang.String> strList25 = option15.getValuesList();
        option15.setLongOpt("hi!");
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.String cannot be cast to class java.lang.Class (java.lang.String and java.lang.Class are in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "org.apache.commons.cli.AlreadySelectedException: ", false, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        java.util.List<java.lang.String> strList36 = commandLine35.getArgList();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        boolean boolean44 = option41.equals((java.lang.Object) 0);
        option41.setArgName("");
        java.lang.Object obj47 = commandLine35.getParsedOptionValue(option41);
        java.lang.String[] strArray48 = commandLine10.getOptionValues(option41);
        java.util.Properties properties50 = commandLine10.getOptionProperties("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(properties50);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getValue();
        boolean boolean8 = option4.hasValueSeparator();
        boolean boolean9 = option4.isRequired();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        org.apache.commons.cli.DefaultParser defaultParser19 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser19.parse(options20, strArray27, properties28);
        java.lang.String str31 = commandLine29.getOptionValue("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean37 = option36.hasValueSeparator();
        boolean boolean38 = commandLine29.hasOption(option36);
        option36.setOptionalArg(true);
        java.lang.String str41 = option36.getLongOpt();
        java.lang.String str42 = commandLine10.getOptionValue(option36);
        java.lang.String[] strArray43 = commandLine10.getArgs();
        java.util.Properties properties45 = commandLine10.getOptionProperties("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(properties45);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        option16.setRequired(false);
        java.lang.String[] strArray24 = option16.getValues();
        option16.setArgs((int) (byte) 1);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "[ option:  hi!  ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        boolean boolean25 = commandLine10.hasOption(option18);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        boolean boolean34 = option31.equals((java.lang.Object) 0);
        option31.setArgName("");
        java.lang.String[] strArray37 = option31.getValues();
        option31.setArgs(0);
        java.lang.String[] strArray40 = option31.getValues();
        boolean boolean41 = commandLine10.hasOption(option31);
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        java.lang.String str48 = option46.getArgName();
        boolean boolean49 = option46.hasArgName();
        java.lang.String[] strArray50 = commandLine10.getOptionValues(option46);
        option46.setDescription("[ option:  hi!  ::  :: class java.lang.String ]");
        option46.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strArray50);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.String[] strArray14 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj16 = commandLine10.getParsedOptionValue(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder0.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder5 = builder3.longOpt("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.Option.Builder builder6 = builder3.hasArgs();
        org.apache.commons.cli.Option.Builder builder8 = builder3.option("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str7 = option4.getValue(10);
        java.lang.String str9 = option4.getValue((int) '#');
        boolean boolean10 = option4.hasArgs();
        option4.setLongOpt("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.String str14 = option4.getValue((int) (short) 0);
        option4.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option4.setDescription("");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.cli.ParseException parseException1 = new org.apache.commons.cli.ParseException("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        boolean boolean28 = optionGroup10.isRequired();
        java.lang.String str29 = optionGroup10.toString();
        org.apache.commons.cli.DefaultParser defaultParser31 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser32 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        boolean boolean41 = option38.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options42 = options33.addOption(option38);
        org.apache.commons.cli.DefaultParser defaultParser43 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray51 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = defaultParser43.parse(options44, strArray51, properties52);
        org.apache.commons.cli.CommandLine commandLine54 = defaultParser32.parse(options33, strArray51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine59 = defaultParser31.parse(options33, strArray57, false);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj66 = option65.getType();
        boolean boolean68 = option65.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options69 = options60.addOption(option65);
        java.lang.String str71 = option65.getValue("hi!");
        int int72 = option65.getArgs();
        option65.setDescription("hi!");
        org.apache.commons.cli.OptionGroup optionGroup75 = options33.getOptionGroup(option65);
        optionGroup10.setSelected(option65);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(optionGroup75);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str1 = optionGroup0.getSelected();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        java.lang.String str13 = option7.getValue("hi!");
        int int14 = option7.getArgs();
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException15 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option7);
        org.apache.commons.cli.Option.Builder builder16 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder17 = builder16.required();
        org.apache.commons.cli.Option.Builder builder18 = builder17.hasArg();
        org.apache.commons.cli.Option.Builder builder19 = builder17.required();
        org.apache.commons.cli.Option.Builder builder20 = builder19.required();
        org.apache.commons.cli.Option.Builder builder22 = builder19.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder24 = builder19.optionalArg(true);
        // The following exception was thrown during execution in test generation
        try {
            option7.setType((java.lang.Object) builder24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Option$Builder cannot be cast to class java.lang.Class (org.apache.commons.cli.Option$Builder is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.cli.MissingOptionException missingOptionException1 = new org.apache.commons.cli.MissingOptionException("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        java.lang.String[] strArray17 = commandLine10.getArgs();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        java.util.Properties properties24 = commandLine10.getOptionProperties(option22);
        option22.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        option22.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String[] strArray29 = option22.getValues();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException1 = new org.apache.commons.cli.AlreadySelectedException("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder4 = builder3.required();
        org.apache.commons.cli.Option.Builder builder6 = builder3.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder8 = builder6.longOpt("");
        org.apache.commons.cli.Option.Builder builder10 = builder6.longOpt("org.apache.commons.cli.UnrecognizedOptionException: []");
        org.apache.commons.cli.Option.Builder builder12 = builder6.argName("[]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        boolean boolean40 = options38.hasShortOption("[]");
        boolean boolean42 = options38.hasShortOption("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.apache.commons.cli.DefaultParser defaultParser43 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray51 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = defaultParser43.parse(options44, strArray51, properties52);
        boolean boolean55 = commandLine53.hasOption("hi!");
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj61 = option60.getType();
        java.lang.String str62 = option60.getArgName();
        option60.setValueSeparator('#');
        java.lang.String[] strArray65 = commandLine53.getOptionValues(option60);
        java.lang.Object obj67 = commandLine53.getParsedOptionValue('4');
        boolean boolean69 = commandLine53.hasOption(' ');
        java.lang.String[] strArray70 = commandLine53.getArgs();
        org.apache.commons.cli.CommandLine commandLine72 = defaultParser0.parse(options38, strArray70, false);
        java.lang.Object obj74 = commandLine72.getOptionObject(' ');
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "class java.lang.String");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        boolean boolean8 = option4.hasLongOpt();
        boolean boolean9 = option4.hasValueSeparator();
        java.lang.String str11 = option4.getValue((int) (short) 1);
        boolean boolean12 = option4.hasArg();
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        java.lang.Object obj37 = commandLine35.getOptionObject("");
        option4.setType(obj37);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        java.lang.String str31 = option27.getValue((int) 'a');
        option27.setDescription("");
        boolean boolean34 = option27.hasLongOpt();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        java.lang.String str41 = option35.getValue("hi!");
        java.util.List<java.lang.String> strList42 = option35.getValuesList();
        int int43 = option35.getArgs();
        java.lang.String[] strArray44 = commandLine29.getOptionValues(option35);
        java.util.List<java.lang.String> strList45 = commandLine29.getArgList();
        org.apache.commons.cli.MissingOptionException missingOptionException46 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList45);
        java.lang.Throwable throwable47 = null;
        // The following exception was thrown during execution in test generation
        try {
            missingOptionException46.addSuppressed(throwable47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        int int12 = option5.getArgs();
        option5.setDescription("hi!");
        java.lang.String str15 = option5.getLongOpt();
        boolean boolean16 = option5.hasOptionalArg();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj36 = option35.getType();
        boolean boolean38 = option35.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options39 = options30.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup40 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options41 = options39.addOptionGroup(optionGroup40);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection42 = options41.getOptions();
        java.util.List<java.lang.String> strList44 = options41.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = defaultParser1.parse(options41, strArray45);
        org.apache.commons.cli.DefaultParser defaultParser47 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser47.parse(options48, strArray55, properties56);
        java.util.List<java.lang.String> strList58 = commandLine57.getArgList();
        java.lang.String str61 = commandLine57.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean63 = commandLine57.hasOption('4');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj69 = option68.getType();
        java.lang.String str70 = option68.getArgName();
        boolean boolean71 = option68.hasArgName();
        boolean boolean72 = option68.hasArg();
        option68.setOptionalArg(false);
        java.lang.String str75 = option68.getValue();
        java.lang.String str77 = option68.getValue((int) '4');
        boolean boolean78 = option68.hasOptionalArg();
        java.lang.String str80 = commandLine57.getOptionValue(option68, "");
        int int81 = option68.getArgs();
        org.apache.commons.cli.Options options82 = options41.addOption(option68);
        boolean boolean83 = option68.hasArg();
        java.lang.String str84 = option68.getLongOpt();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionCollection42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str61, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class java.lang.String");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        java.lang.String str11 = option5.getValue("hi!");
        java.util.List<java.lang.String> strList12 = option5.getValuesList();
        option5.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option5.setArgs((int) (byte) 0);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder0.hasArgs();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj29 = option28.getType();
        boolean boolean31 = option28.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options32 = options23.addOption(option28);
        org.apache.commons.cli.OptionGroup optionGroup33 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options34 = options32.addOptionGroup(optionGroup33);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj40 = option39.getType();
        boolean boolean42 = option39.equals((java.lang.Object) 0);
        boolean boolean43 = option39.hasLongOpt();
        org.apache.commons.cli.Options options44 = options32.addOption(option39);
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = defaultParser0.parse(options44, strArray45, false);
        java.lang.Object obj49 = commandLine47.getParsedOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str52 = commandLine47.getOptionValue("", "[]");
        java.lang.String str55 = commandLine47.getOptionValue('a', "[]");
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj61 = option60.getType();
        java.lang.String str63 = option60.getValue(10);
        java.lang.String str65 = option60.getValue((int) '#');
        boolean boolean66 = option60.hasArg();
        option60.setValueSeparator('a');
        java.lang.String[] strArray69 = option60.getValues();
        java.lang.Object obj70 = commandLine47.getParsedOptionValue(option60);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "class java.lang.String");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.String str3 = unrecognizedOptionException1.getOption();
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException7 = new org.apache.commons.cli.UnrecognizedOptionException("[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str8 = unrecognizedOptionException7.getOption();
        missingOptionException5.addSuppressed((java.lang.Throwable) unrecognizedOptionException7);
        unrecognizedOptionException1.addSuppressed((java.lang.Throwable) unrecognizedOptionException7);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        boolean boolean15 = option12.equals((java.lang.Object) 0);
        option12.setArgName("");
        java.lang.String[] strArray18 = option12.getValues();
        option12.setArgs(0);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException21 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option12);
        org.apache.commons.cli.Option option22 = alreadySelectedException21.getOption();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(option22);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray35 = option27.getValues();
        org.apache.commons.cli.Options options36 = options1.addOption(option27);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        java.lang.String str43 = option41.getArgName();
        option41.setValueSeparator('#');
        java.lang.String str47 = option41.getValue((int) '4');
        java.lang.String str48 = option41.getDescription();
        org.apache.commons.cli.Options options49 = options36.addOption(option41);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(options49);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder5.hasArg();
        org.apache.commons.cli.Option.Builder builder9 = builder5.hasArg();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str7 = option4.getLongOpt();
        option4.setOptionalArg(true);
        boolean boolean10 = option4.isRequired();
        org.apache.commons.cli.DefaultParser defaultParser12 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine40 = defaultParser12.parse(options14, strArray38, false);
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj47 = option46.getType();
        boolean boolean49 = option46.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options50 = options41.addOption(option46);
        org.apache.commons.cli.OptionGroup optionGroup51 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options52 = options50.addOptionGroup(optionGroup51);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection53 = options52.getOptions();
        java.util.List<java.lang.String> strList55 = options52.getMatchingOptions("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = defaultParser12.parse(options52, strArray56);
        org.apache.commons.cli.DefaultParser defaultParser58 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray66 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = defaultParser58.parse(options59, strArray66, properties67);
        java.util.List<java.lang.String> strList69 = commandLine68.getArgList();
        java.lang.String str72 = commandLine68.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean74 = commandLine68.hasOption('4');
        org.apache.commons.cli.Option option79 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj80 = option79.getType();
        java.lang.String str81 = option79.getArgName();
        boolean boolean82 = option79.hasArgName();
        boolean boolean83 = option79.hasArg();
        option79.setOptionalArg(false);
        java.lang.String str86 = option79.getValue();
        java.lang.String str88 = option79.getValue((int) '4');
        boolean boolean89 = option79.hasOptionalArg();
        java.lang.String str91 = commandLine68.getOptionValue(option79, "");
        int int92 = option79.getArgs();
        org.apache.commons.cli.Options options93 = options52.addOption(option79);
        // The following exception was thrown during execution in test generation
        try {
            option4.setType((java.lang.Object) option79);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.apache.commons.cli.Option cannot be cast to class java.lang.Class (org.apache.commons.cli.Option is in unnamed module of loader 'app'; java.lang.Class is in module java.base of loader 'bootstrap')");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(optionCollection53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "class java.lang.String");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(options93);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.longOpt("[]");
        org.apache.commons.cli.Option.Builder builder5 = builder1.valueSeparator('4');
        org.apache.commons.cli.Option.Builder builder7 = builder1.hasArg(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        org.apache.commons.cli.CommandLine commandLine26 = defaultParser0.parse(options1, strArray21, true);
        java.lang.Object obj28 = commandLine26.getOptionObject("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option22.setArgName("[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        option17.setArgs((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = option17.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder2.setAllowPartialMatching(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties28 = commandLine22.getOptionProperties(option27);
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj34 = option33.getType();
        java.lang.String str35 = option33.getArgName();
        java.lang.String str37 = commandLine22.getOptionValue(option33, "");
        boolean boolean38 = option33.hasLongOpt();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class java.lang.String");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder1.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder1.numberOfArgs(10);
        org.apache.commons.cli.Option.Builder builder9 = builder7.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder11 = builder9.numberOfArgs((int) (short) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options20 = options11.addOption(option16);
        org.apache.commons.cli.OptionGroup optionGroup21 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options22 = options20.addOptionGroup(optionGroup21);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj28 = option27.getType();
        boolean boolean30 = option27.equals((java.lang.Object) 0);
        boolean boolean31 = option27.hasLongOpt();
        org.apache.commons.cli.Options options32 = options20.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray35 = option27.getValues();
        org.apache.commons.cli.Options options36 = options1.addOption(option27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options40 = options1.addOption("[]", true, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(options36);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.lang.String str12 = commandLine10.getOptionValue("hi!");
        java.lang.Object obj14 = commandLine10.getParsedOptionValue("");
        java.lang.String[] strArray16 = commandLine10.getOptionValues('4');
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj23 = option22.getType();
        boolean boolean25 = option22.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options26 = options17.addOption(option22);
        java.lang.String str28 = option22.getValue("hi!");
        java.util.List<java.lang.String> strList29 = option22.getValuesList();
        int int30 = option22.getArgs();
        java.lang.String str32 = commandLine10.getOptionValue(option22, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List<java.lang.String> strList33 = commandLine10.getArgList();
        java.util.List<java.lang.String> strList34 = commandLine10.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str32, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder1.argName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.argName("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Option.Builder builder7 = builder3.longOpt("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option8 = builder7.build();
        java.util.List<java.lang.String> strList9 = option8.getValuesList();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder1.argName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option.Builder builder7 = builder5.argName("");
        org.apache.commons.cli.Option.Builder builder8 = builder7.hasArgs();
        org.apache.commons.cli.Option.Builder builder10 = builder7.hasArg(true);
        org.apache.commons.cli.Option.Builder builder12 = builder10.valueSeparator(' ');
        org.apache.commons.cli.Option.Builder builder13 = builder10.valueSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder1.required();
        org.apache.commons.cli.Option.Builder builder5 = builder3.required(false);
        org.apache.commons.cli.Option.Builder builder7 = builder3.valueSeparator(' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder9 = builder3.option("[ option:    ::  :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ option:    ::  :: class java.lang.String ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.lang.String str24 = commandLine22.getOptionValue("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        boolean boolean26 = commandLine22.hasOption('#');
        java.lang.String str28 = commandLine22.getOptionValue("");
        java.lang.String str31 = commandLine22.getOptionValue('a', "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options22 = options13.addOption(option18);
        java.lang.String str24 = option18.getValue("hi!");
        int int25 = option18.getArgs();
        option18.setDescription("hi!");
        java.lang.String str28 = option18.getLongOpt();
        optionGroup10.setSelected(option18);
        java.util.Collection<java.lang.String> strCollection30 = optionGroup10.getNames();
        java.util.Collection<java.lang.String> strCollection31 = optionGroup10.getNames();
        java.lang.String str32 = optionGroup10.toString();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strCollection30);
        org.junit.Assert.assertNotNull(strCollection31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.cli.DefaultParser.Builder builder0 = org.apache.commons.cli.DefaultParser.builder();
        org.apache.commons.cli.DefaultParser.Builder builder2 = builder0.setStripLeadingAndTrailingQuotes((java.lang.Boolean) true);
        org.apache.commons.cli.DefaultParser.Builder builder4 = builder2.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser.Builder builder6 = builder4.setStripLeadingAndTrailingQuotes((java.lang.Boolean) false);
        org.apache.commons.cli.DefaultParser.Builder builder8 = builder6.setAllowPartialMatching(true);
        org.apache.commons.cli.DefaultParser.Builder builder10 = builder8.setAllowPartialMatching(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException2 = new org.apache.commons.cli.UnrecognizedOptionException("", "[ option:    ::  :: class java.lang.String ]");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String[] strArray44 = commandLine37.getOptionValues(option42);
        java.lang.Object obj46 = commandLine37.getOptionObject('#');
        java.util.List<java.lang.String> strList47 = commandLine37.getArgList();
        org.apache.commons.cli.MissingOptionException missingOptionException48 = new org.apache.commons.cli.MissingOptionException((java.util.List) strList47);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strList47);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        boolean boolean23 = option16.hasValueSeparator();
        boolean boolean24 = option16.hasArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection30 = options29.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options33 = options29.addOption("org.apache.commons.cli.MissingOptionException: Missing required options: ", "[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(optionCollection30);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        java.util.List<java.lang.String> strList20 = option17.getValuesList();
        org.apache.commons.cli.Options options21 = options9.addOption(option17);
        boolean boolean23 = options21.hasShortOption("");
        boolean boolean25 = options21.hasShortOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection12 = optionGroup10.getOptions();
        java.lang.String str13 = optionGroup10.getSelected();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.OptionGroup optionGroup24 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options25 = options23.addOptionGroup(optionGroup24);
        java.lang.String str26 = options23.toString();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj32 = option31.getType();
        java.lang.String str33 = option31.getArgName();
        boolean boolean34 = option31.hasArgName();
        boolean boolean35 = option31.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup36 = options23.getOptionGroup(option31);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean42 = option41.hasValueSeparator();
        org.apache.commons.cli.Options options43 = options23.addOption(option41);
        java.lang.String str45 = option41.getValue((int) 'a');
        java.lang.String str46 = option41.getValue();
        option41.setValueSeparator('#');
        optionGroup10.setSelected(option41);
        optionGroup10.setRequired(true);
        optionGroup10.setRequired(false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(optionCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str26, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class java.lang.String");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        boolean boolean15 = option12.equals((java.lang.Object) 0);
        option12.setArgName("");
        java.lang.String[] strArray18 = option12.getValues();
        option12.setArgs(0);
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException21 = new org.apache.commons.cli.AlreadySelectedException(optionGroup0, option12);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection22 = optionGroup0.getOptions();
        java.util.Collection<java.lang.String> strCollection23 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection24 = optionGroup0.getOptions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(optionCollection22);
        org.junit.Assert.assertNotNull(strCollection23);
        org.junit.Assert.assertNotNull(optionCollection24);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException1 = new org.apache.commons.cli.UnrecognizedOptionException("[ Options: [ short {=[ option:   :: org.apache.commons.cli.MissingOptionException: Missing required options:  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.lang.String str2 = unrecognizedOptionException1.getOption();
        java.lang.String str3 = unrecognizedOptionException1.getOption();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        boolean boolean36 = commandLine34.hasOption("hi!");
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj42 = option41.getType();
        java.lang.String str43 = option41.getArgName();
        option41.setValueSeparator('#');
        java.lang.String[] strArray46 = commandLine34.getOptionValues(option41);
        boolean boolean47 = commandLine22.hasOption(option41);
        int int48 = option41.getArgs();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class java.lang.String");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.cli.CommandLine.Builder builder0 = new org.apache.commons.cli.CommandLine.Builder();
        org.apache.commons.cli.CommandLine commandLine1 = builder0.build();
        org.apache.commons.cli.CommandLine commandLine2 = builder0.build();
        org.apache.commons.cli.CommandLine.Builder builder4 = builder0.addArg("[ option:  hi!  ::  :: class java.lang.String ]");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj10 = option9.getType();
        java.lang.String str11 = option9.getArgName();
        option9.setValueSeparator('#');
        boolean boolean14 = option9.hasOptionalArg();
        org.apache.commons.cli.CommandLine.Builder builder15 = builder4.addOption(option9);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj22 = option21.getType();
        boolean boolean24 = option21.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options25 = options16.addOption(option21);
        java.lang.String str27 = option21.getValue("hi!");
        int int28 = option21.getArgs();
        option21.setDescription("hi!");
        java.lang.String str31 = option21.getLongOpt();
        org.apache.commons.cli.CommandLine.Builder builder32 = builder4.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine33 = builder4.build();
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj39 = option38.getType();
        java.lang.String str41 = option38.getValue(10);
        java.lang.String str43 = option38.getValue((int) '#');
        boolean boolean44 = option38.hasArg();
        option38.setValueSeparator('a');
        boolean boolean47 = commandLine33.hasOption(option38);
        java.lang.String str48 = option38.toString();
        org.junit.Assert.assertNotNull(commandLine1);
        org.junit.Assert.assertNotNull(commandLine2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class java.lang.String");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str48, "[ option:  hi!  ::  :: class java.lang.String ]");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String str44 = option42.getArgName();
        option42.setValueSeparator('#');
        java.lang.String[] strArray47 = commandLine35.getOptionValues(option42);
        java.lang.Object obj49 = commandLine35.getParsedOptionValue('4');
        boolean boolean51 = commandLine35.hasOption(' ');
        java.lang.String[] strArray52 = commandLine35.getArgs();
        org.apache.commons.cli.DefaultParser defaultParser53 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj60 = option59.getType();
        boolean boolean62 = option59.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options63 = options54.addOption(option59);
        org.apache.commons.cli.DefaultParser defaultParser64 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = defaultParser64.parse(options65, strArray72, properties73);
        org.apache.commons.cli.CommandLine commandLine75 = defaultParser53.parse(options54, strArray72);
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties81 = commandLine75.getOptionProperties(option80);
        org.apache.commons.cli.CommandLine commandLine83 = defaultParser1.parse(options3, strArray52, properties81, true);
        org.apache.commons.cli.Option option85 = options3.getOption("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = option85.addValue("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(option85);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.lang.String str27 = commandLine10.getOptionValue(' ', "hi!");
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.String str34 = option32.getValue("");
        java.lang.String[] strArray35 = commandLine10.getOptionValues(option32);
        java.lang.Object obj36 = option32.getType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class java.lang.String");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = options9.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasArgName();
        boolean boolean21 = option17.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option17);
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "hi!", false, "");
        boolean boolean28 = option27.hasValueSeparator();
        org.apache.commons.cli.Options options29 = options9.addOption(option27);
        boolean boolean31 = options29.hasOption("[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        java.util.List<java.lang.String> strList33 = options29.getMatchingOptions("");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str12, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.OptionGroup optionGroup11 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options12 = options10.addOptionGroup(optionGroup11);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj20 = option19.getType();
        boolean boolean22 = option19.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options23 = options14.addOption(option19);
        org.apache.commons.cli.DefaultParser defaultParser24 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = defaultParser24.parse(options25, strArray32, properties33);
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser13.parse(options14, strArray32);
        org.apache.commons.cli.CommandLine commandLine37 = defaultParser0.parse(options12, strArray32, true);
        java.lang.String str40 = commandLine37.getOptionValue('a', "[ option:  hi!  ::  :: class java.lang.String ]");
        java.lang.String str43 = commandLine37.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        java.lang.Object obj45 = commandLine37.getParsedOptionValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str40, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.cli.MissingOptionException: Missing required options: " + "'", str43, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("org.apache.commons.cli.MissingOptionException: Missing required options: ", true, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.MissingOptionException: Missing required options: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option.Builder builder1 = org.apache.commons.cli.Option.builder("[- ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[- ]' contains an illegal character : '['");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        java.lang.String str22 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup23 = new org.apache.commons.cli.OptionGroup();
        java.lang.String str24 = optionGroup23.getSelected();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj30 = option29.getType();
        java.lang.String str31 = option29.getArgName();
        option29.setValueSeparator('#');
        optionGroup23.setSelected(option29);
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        org.apache.commons.cli.Option option37 = options35.getOption("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        boolean boolean39 = options35.hasOption("[ option:    ::  :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str22, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class java.lang.String");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNull(option37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("org.apache.commons.cli.AlreadySelectedException: ", "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]", true, "[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'org.apache.commons.cli.AlreadySelectedException: ' contains an illegal character : '.'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        option16.setArgName("");
        java.lang.Object obj22 = commandLine10.getParsedOptionValue(option16);
        java.lang.String str23 = option16.toString();
        java.lang.String str24 = option16.getArgName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:  hi!  ::  :: class java.lang.String ]" + "'", str23, "[ option:  hi!  ::  :: class java.lang.String ]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        boolean boolean7 = option4.equals((java.lang.Object) 0);
        option4.setValueSeparator(' ');
        java.lang.String str10 = option4.getArgName();
        java.lang.Object obj11 = option4.getType();
        boolean boolean12 = option4.hasArgName();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder2 = builder1.hasArg();
        org.apache.commons.cli.Option.Builder builder3 = builder2.valueSeparator();
        org.apache.commons.cli.Option.Builder builder5 = builder2.required(false);
        org.apache.commons.cli.Option.Builder builder7 = builder5.valueSeparator('4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        java.lang.String str12 = optionGroup10.getSelected();
        boolean boolean13 = optionGroup10.isRequired();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj19 = option18.getType();
        boolean boolean21 = option18.equals((java.lang.Object) 0);
        boolean boolean22 = option18.hasLongOpt();
        option18.setLongOpt("");
        option18.setDescription("");
        org.apache.commons.cli.AlreadySelectedException alreadySelectedException27 = new org.apache.commons.cli.AlreadySelectedException(optionGroup10, option18);
        java.util.Collection<org.apache.commons.cli.Option> optionCollection28 = optionGroup10.getOptions();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(optionCollection28);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        boolean boolean12 = commandLine10.hasOption("hi!");
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj18 = option17.getType();
        java.lang.String str19 = option17.getArgName();
        option17.setValueSeparator('#');
        java.lang.String[] strArray22 = commandLine10.getOptionValues(option17);
        java.lang.Object obj24 = commandLine10.getParsedOptionValue('4');
        java.util.Properties properties26 = commandLine10.getOptionProperties("");
        java.lang.String str29 = commandLine10.getOptionValue('\000', "[]");
        java.util.Properties properties31 = commandLine10.getOptionProperties("org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class java.lang.String");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(properties31);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = defaultParser0.parse(options1, strArray8, properties9);
        java.util.List<java.lang.String> strList11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean16 = commandLine10.hasOption('4');
        java.lang.String[] strArray18 = commandLine10.getOptionValues(' ');
        java.lang.String str20 = commandLine10.getOptionValue("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        java.lang.String str22 = commandLine10.getOptionValue(' ');
        boolean boolean24 = commandLine10.hasOption('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        org.apache.commons.cli.DefaultParser defaultParser25 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = defaultParser25.parse(options26, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj43 = option42.getType();
        java.lang.String str44 = option42.getArgName();
        option42.setValueSeparator('#');
        java.lang.String[] strArray47 = commandLine35.getOptionValues(option42);
        java.lang.Object obj49 = commandLine35.getParsedOptionValue('4');
        boolean boolean51 = commandLine35.hasOption(' ');
        java.lang.String[] strArray52 = commandLine35.getArgs();
        org.apache.commons.cli.DefaultParser defaultParser53 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj60 = option59.getType();
        boolean boolean62 = option59.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options63 = options54.addOption(option59);
        org.apache.commons.cli.DefaultParser defaultParser64 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = defaultParser64.parse(options65, strArray72, properties73);
        org.apache.commons.cli.CommandLine commandLine75 = defaultParser53.parse(options54, strArray72);
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Properties properties81 = commandLine75.getOptionProperties(option80);
        org.apache.commons.cli.CommandLine commandLine83 = defaultParser1.parse(options3, strArray52, properties81, true);
        java.lang.String str84 = options3.toString();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class java.lang.String");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str84, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.cli.OptionGroup optionGroup0 = new org.apache.commons.cli.OptionGroup();
        boolean boolean1 = optionGroup0.isRequired();
        java.lang.String str2 = optionGroup0.getSelected();
        optionGroup0.setRequired(false);
        java.util.Collection<java.lang.String> strCollection5 = optionGroup0.getNames();
        java.util.Collection<org.apache.commons.cli.Option> optionCollection6 = optionGroup0.getOptions();
        java.lang.String str7 = optionGroup0.getSelected();
        org.apache.commons.cli.Option option12 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj13 = option12.getType();
        java.lang.String str14 = option12.getArgName();
        boolean boolean15 = option12.hasArgName();
        optionGroup0.setSelected(option12);
        java.lang.String[] strArray17 = option12.getValues();
        java.lang.String str18 = option12.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strCollection5);
        org.junit.Assert.assertNotNull(optionCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class java.lang.String");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.cli.DefaultParser defaultParser0 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj7 = option6.getType();
        boolean boolean9 = option6.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options10 = options1.addOption(option6);
        org.apache.commons.cli.DefaultParser defaultParser11 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = defaultParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.CommandLine commandLine22 = defaultParser0.parse(options1, strArray19);
        java.util.Iterator<org.apache.commons.cli.Option> optionItor23 = commandLine22.iterator();
        boolean boolean25 = commandLine22.hasOption('#');
        java.util.List<java.lang.String> strList26 = commandLine22.getArgList();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(optionItor23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(true);
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj8 = option7.getType();
        boolean boolean10 = option7.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options11 = options2.addOption(option7);
        org.apache.commons.cli.OptionGroup optionGroup12 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options13 = options11.addOptionGroup(optionGroup12);
        java.lang.String str14 = options11.toString();
        boolean boolean16 = options11.hasLongOption("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "[ option:  hi!  ::  :: class java.lang.String ]", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options22 = options11.addOption(option21);
        org.apache.commons.cli.DefaultParser defaultParser23 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = defaultParser23.parse(options24, strArray31, properties32);
        java.lang.String str35 = commandLine33.getOptionValue("hi!");
        java.lang.Object obj37 = commandLine33.getParsedOptionValue("");
        java.lang.String[] strArray39 = commandLine33.getOptionValues('4');
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj46 = option45.getType();
        boolean boolean48 = option45.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options49 = options40.addOption(option45);
        java.lang.String str51 = option45.getValue("hi!");
        java.util.List<java.lang.String> strList52 = option45.getValuesList();
        int int53 = option45.getArgs();
        java.lang.String str55 = commandLine33.getOptionValue(option45, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.String[] strArray56 = commandLine33.getArgs();
        org.apache.commons.cli.CommandLine commandLine58 = defaultParser1.parse(options22, strArray56, true);
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj64 = option63.getType();
        boolean boolean66 = option63.equals((java.lang.Object) 0);
        org.apache.commons.cli.OptionGroup optionGroup67 = options22.getOptionGroup(option63);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str14, "[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str55, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(optionGroup67);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj5 = option4.getType();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasArgName();
        boolean boolean8 = option4.hasArg();
        option4.setOptionalArg(false);
        option4.setDescription("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.cli.Option.Builder builder0 = org.apache.commons.cli.Option.builder();
        org.apache.commons.cli.Option.Builder builder1 = builder0.required();
        org.apache.commons.cli.Option.Builder builder3 = builder1.optionalArg(true);
        org.apache.commons.cli.Option.Builder builder5 = builder1.optionalArg(false);
        org.apache.commons.cli.Option.Builder builder7 = builder1.numberOfArgs(10);
        org.apache.commons.cli.Option.Builder builder9 = builder7.longOpt("[ option:  hi!  :: org.apache.commons.cli.UnrecognizedOptionException: hi! :: class java.lang.String ]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj6 = option5.getType();
        boolean boolean8 = option5.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options9 = options0.addOption(option5);
        org.apache.commons.cli.OptionGroup optionGroup10 = new org.apache.commons.cli.OptionGroup();
        org.apache.commons.cli.Options options11 = options9.addOptionGroup(optionGroup10);
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj17 = option16.getType();
        boolean boolean19 = option16.equals((java.lang.Object) 0);
        boolean boolean20 = option16.hasLongOpt();
        org.apache.commons.cli.Options options21 = options9.addOption(option16);
        org.apache.commons.cli.DefaultParser defaultParser22 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = defaultParser22.parse(options23, strArray30, properties31);
        java.lang.String str34 = commandLine32.getOptionValue("hi!");
        java.lang.Object obj36 = commandLine32.getParsedOptionValue("");
        java.lang.String[] strArray38 = commandLine32.getOptionValues('4');
        java.lang.String[] strArray39 = commandLine32.getArgs();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj45 = option44.getType();
        java.util.Properties properties46 = commandLine32.getOptionProperties(option44);
        org.apache.commons.cli.Options options47 = options9.addOption(option44);
        java.util.List<java.lang.String> strList49 = options9.getMatchingOptions("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.apache.commons.cli.Options options53 = options9.addOption("", false, "org.apache.commons.cli.MissingOptionException: Missing required options: ");
        org.apache.commons.cli.OptionGroup optionGroup54 = new org.apache.commons.cli.OptionGroup();
        boolean boolean55 = optionGroup54.isRequired();
        java.lang.String str56 = optionGroup54.getSelected();
        optionGroup54.setRequired(false);
        boolean boolean59 = optionGroup54.isRequired();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj65 = option64.getType();
        java.lang.String str66 = option64.getArgName();
        java.util.List<java.lang.String> strList67 = option64.getValuesList();
        option64.setArgName("[ Options: [ short {=[ option:  hi!  ::  :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        optionGroup54.setSelected(option64);
        org.apache.commons.cli.Options options71 = options9.addOptionGroup(optionGroup54);
        java.util.Collection<java.lang.String> strCollection72 = optionGroup54.getNames();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class java.lang.String");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class java.lang.String");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(strCollection72);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.cli.DefaultParser defaultParser1 = new org.apache.commons.cli.DefaultParser(false);
        org.apache.commons.cli.DefaultParser defaultParser2 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "hi!", false, "");
        java.lang.Object obj9 = option8.getType();
        boolean boolean11 = option8.equals((java.lang.Object) 0);
        org.apache.commons.cli.Options options12 = options3.addOption(option8);
        org.apache.commons.cli.DefaultParser defaultParser13 = new org.apache.commons.cli.DefaultParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: hi!", "hi!", "", "org.apache.commons.cli.UnrecognizedOptionException: hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = defaultParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine24 = defaultParser2.parse(options3, strArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        org.apache.commons.cli.CommandLine commandLine29 = defaultParser1.parse(options3, strArray27, false);
        java.lang.String str31 = commandLine29.getOptionValue('4');
        java.lang.String str34 = commandLine29.getOptionValue('4', "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]" + "'", str34, "[ Options: [ short {=[ option:   :: [ option:  hi!  ::  :: class java.lang.String ] :: class java.lang.String ]} ] [ long {hi!=[ option:  hi!  ::  :: class java.lang.String ]} ]");
    }
}

